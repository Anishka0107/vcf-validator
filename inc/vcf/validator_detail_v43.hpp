
#line 1 "src/vcf/vcf_v43.ragel"
/**
 * Copyright 2014-2015 EMBL - European Bioinformatics Institute
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <cstdio>

#include "vcf/validator.hpp"


#line 771 "src/vcf/vcf_v43.ragel"


namespace
{
  
#line 31 "inc/vcf/validator_detail_v43.hpp"
static const char _vcf_v43_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 5, 1, 6, 1, 7, 1, 
	8, 1, 9, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 23, 1, 
	26, 1, 27, 1, 29, 2, 0, 1, 
	2, 0, 2, 2, 1, 0, 2, 1, 
	2, 2, 1, 27, 2, 2, 1, 2, 
	3, 87, 2, 3, 88, 2, 10, 3, 
	2, 20, 0, 2, 27, 1, 2, 28, 
	3, 2, 30, 3, 2, 31, 4, 2, 
	33, 5, 2, 34, 6, 2, 36, 6, 
	2, 37, 6, 2, 38, 6, 2, 39, 
	6, 2, 41, 6, 2, 44, 6, 2, 
	45, 6, 2, 46, 6, 2, 52, 8, 
	2, 53, 9, 2, 54, 9, 2, 55, 
	9, 2, 56, 9, 2, 57, 9, 2, 
	58, 9, 2, 59, 9, 2, 60, 9, 
	2, 84, 9, 2, 85, 9, 3, 1, 
	0, 2, 3, 1, 2, 0, 3, 1, 
	28, 3, 3, 2, 0, 1, 3, 2, 
	28, 3, 3, 2, 31, 4, 3, 6, 
	52, 8, 3, 7, 0, 1, 3, 8, 
	53, 9, 3, 20, 0, 1, 3, 21, 
	0, 1, 3, 22, 0, 1, 3, 24, 
	0, 1, 3, 25, 0, 1, 3, 29, 
	30, 3, 3, 35, 34, 6, 3, 38, 
	39, 6, 3, 40, 39, 6, 3, 42, 
	41, 6, 3, 43, 39, 6, 3, 43, 
	41, 6, 3, 47, 46, 6, 3, 48, 
	46, 6, 3, 49, 34, 6, 3, 49, 
	37, 6, 3, 49, 38, 6, 3, 49, 
	39, 6, 3, 49, 41, 6, 3, 49, 
	44, 6, 3, 49, 46, 6, 3, 50, 
	34, 6, 3, 50, 38, 6, 3, 50, 
	39, 6, 3, 50, 41, 6, 3, 50, 
	46, 6, 3, 51, 36, 6, 3, 51, 
	45, 6, 3, 61, 60, 9, 3, 62, 
	60, 9, 3, 63, 60, 9, 3, 64, 
	60, 9, 3, 65, 60, 9, 3, 66, 
	60, 9, 3, 67, 60, 9, 3, 68, 
	60, 9, 3, 69, 60, 9, 3, 70, 
	60, 9, 3, 71, 60, 9, 3, 72, 
	60, 9, 3, 73, 60, 9, 3, 74, 
	60, 9, 3, 75, 60, 9, 3, 76, 
	60, 9, 3, 77, 60, 9, 3, 78, 
	60, 9, 3, 79, 60, 9, 3, 80, 
	60, 9, 3, 81, 60, 9, 3, 82, 
	60, 9, 3, 83, 60, 9, 3, 86, 
	85, 9, 4, 1, 2, 28, 3, 4, 
	2, 31, 32, 3, 4, 5, 6, 52, 
	8, 4, 47, 48, 46, 6, 4, 48, 
	50, 46, 6, 4, 49, 47, 46, 6, 
	4, 49, 50, 34, 6, 4, 49, 50, 
	38, 6, 4, 49, 50, 39, 6, 4, 
	49, 50, 41, 6, 4, 50, 49, 34, 
	6, 4, 50, 49, 38, 6, 4, 50, 
	49, 39, 6, 4, 50, 49, 41, 6, 
	4, 72, 61, 60, 9, 4, 75, 61, 
	60, 9, 4, 76, 61, 60, 9, 4, 
	81, 61, 60, 9, 4, 82, 61, 60, 
	9, 4, 83, 61, 60, 9, 10, 34, 
	38, 39, 41, 36, 37, 46, 44, 45, 
	6
};

static const short _vcf_v43_key_offsets[] = {
	0, 0, 1, 2, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 20, 22, 23, 
	25, 37, 40, 44, 48, 49, 50, 54, 
	58, 60, 64, 70, 80, 84, 88, 89, 
	93, 98, 104, 113, 123, 130, 136, 145, 
	154, 164, 171, 175, 179, 181, 185, 191, 
	211, 231, 250, 256, 262, 268, 274, 280, 
	284, 288, 292, 298, 318, 338, 357, 363, 
	369, 375, 381, 385, 389, 392, 393, 394, 
	395, 396, 404, 412, 413, 414, 415, 416, 
	417, 418, 419, 420, 421, 422, 423, 424, 
	425, 429, 433, 435, 444, 453, 463, 464, 
	468, 472, 476, 482, 502, 522, 541, 545, 
	551, 557, 559, 563, 569, 589, 609, 628, 
	632, 638, 646, 651, 655, 659, 663, 667, 
	670, 671, 672, 673, 674, 683, 692, 702, 
	703, 704, 705, 706, 707, 708, 709, 710, 
	711, 712, 713, 714, 715, 719, 723, 725, 
	734, 743, 753, 754, 758, 762, 766, 772, 
	792, 812, 831, 835, 841, 847, 849, 853, 
	859, 879, 899, 918, 922, 928, 932, 936, 
	940, 944, 947, 948, 949, 950, 951, 960, 
	969, 979, 980, 981, 982, 983, 984, 985, 
	986, 992, 993, 994, 995, 996, 997, 998, 
	1002, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 
	1028, 1030, 1039, 1048, 1058, 1059, 1063, 1067, 
	1071, 1077, 1097, 1117, 1136, 1140, 1146, 1152, 
	1154, 1158, 1164, 1184, 1204, 1223, 1227, 1233, 
	1236, 1240, 1244, 1248, 1251, 1252, 1253, 1254, 
	1255, 1264, 1273, 1283, 1284, 1285, 1286, 1287, 
	1288, 1289, 1290, 1296, 1297, 1298, 1299, 1300, 
	1301, 1302, 1306, 1311, 1312, 1313, 1314, 1315, 
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 
	1324, 1328, 1332, 1334, 1343, 1352, 1362, 1363, 
	1367, 1371, 1375, 1381, 1401, 1421, 1440, 1444, 
	1450, 1456, 1458, 1462, 1468, 1488, 1508, 1527, 
	1531, 1537, 1540, 1544, 1548, 1552, 1556, 1560, 
	1564, 1568, 1571, 1572, 1581, 1590, 1600, 1609, 
	1618, 1629, 1631, 1635, 1639, 1643, 1647, 1651, 
	1654, 1655, 1656, 1657, 1658, 1667, 1676, 1686, 
	1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 
	1702, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 
	1716, 1717, 1725, 1732, 1733, 1734, 1735, 1736, 
	1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 
	1745, 1749, 1753, 1754, 1756, 1760, 1765, 1771, 
	1775, 1779, 1783, 1787, 1791, 1795, 1799, 1802, 
	1806, 1811, 1816, 1817, 1818, 1822, 1824, 1828, 
	1832, 1836, 1840, 1844, 1847, 1848, 1849, 1850, 
	1851, 1861, 1871, 1893, 1915, 1936, 1946, 1952, 
	1961, 1970, 1980, 1987, 1991, 1995, 1997, 1999, 
	2003, 2009, 2029, 2049, 2068, 2074, 2080, 2086, 
	2092, 2098, 2108, 2119, 2130, 2156, 2182, 2206, 
	2217, 2228, 2239, 2250, 2254, 2258, 2262, 2266, 
	2270, 2274, 2278, 2282, 2286, 2289, 2290, 2294, 
	2299, 2304, 2305, 2306, 2310, 2312, 2315, 2317, 
	2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 
	2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 
	2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 
	2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 
	2350, 2351, 2352, 2353, 2356, 2357, 2358, 2359, 
	2360, 2361, 2362, 2363, 2365, 2370, 2387, 2391, 
	2393, 2396, 2400, 2404, 2414, 2425, 2440, 2442, 
	2449, 2453, 2455, 2460, 2476, 2491, 2495, 2514, 
	2517, 2522, 2532, 2535, 2541, 2547, 2563, 2579, 
	2585, 2586, 2587, 2590, 2598, 2602, 2608, 2621, 
	2639, 2653, 2667, 2681, 2695, 2699, 2705, 2718, 
	2720, 2724, 2742, 2751, 2763, 2767, 2781, 2790, 
	2794, 2796, 2803, 2814, 2818, 2820, 2827, 2836, 
	2840, 2842, 2849, 2858, 2862, 2864, 2871, 2880, 
	2887, 2891, 2893, 2902, 2906, 2908, 2915, 2925, 
	2926, 2927, 2932, 2933, 2934, 2943, 2947, 2949, 
	2955, 2969, 2978, 2985, 2989, 2991, 2999, 3003, 
	3005, 3011, 3020, 3021, 3022, 3026, 3027, 3028, 
	3042, 3056, 3070, 3084, 3093, 3099, 3109, 3124, 
	3137, 3139, 3143, 3152, 3156, 3158, 3164, 3178, 
	3192, 3201, 3205, 3207, 3213, 3228, 3241, 3243, 
	3247, 3260, 3262, 3266, 3280, 3290, 3299, 3303, 
	3305, 3311, 3318, 3322, 3324, 3332, 3336, 3338, 
	3344, 3353, 3354, 3355, 3359, 3360, 3361, 3375, 
	3384, 3388, 3390, 3396, 3411, 3420, 3427, 3431, 
	3433, 3441, 3445, 3447, 3453, 3462, 3463, 3464, 
	3468, 3469, 3470, 3484, 3498, 3512, 3526, 3540, 
	3553, 3555, 3559, 3573, 3587, 3601, 3615, 3629, 
	3643, 3657, 3671, 3684, 3686, 3690, 3705, 3721, 
	3725, 3727, 3730, 3736, 3737, 3738, 3739, 3742, 
	3743, 3744, 3759, 3769, 3781, 3789, 3797, 3812, 
	3819, 3836, 3852, 3858, 3862, 3864, 3867, 3873, 
	3889, 3905, 3911, 3912, 3919, 3936, 3952, 3958, 
	3962, 3964, 3967, 3973, 3989, 4005, 4011, 4012, 
	4019, 4036, 4052, 4058, 4062, 4064, 4067, 4073, 
	4089, 4105, 4111, 4112, 4119, 4136, 4152, 4158, 
	4162, 4164, 4167, 4173, 4189, 4205, 4211, 4212, 
	4223, 4239, 4246, 4247, 4248, 4250, 4252, 4259, 
	4266, 4266
};

static const char _vcf_v43_trans_keys[] = {
	35, 35, 102, 105, 108, 101, 102, 111, 
	114, 109, 97, 116, 61, 86, 67, 70, 
	118, 52, 46, 51, 10, 13, 35, 35, 
	67, 65, 70, 73, 80, 83, 97, 99, 
	112, 32, 60, 62, 126, 61, 32, 126, 
	34, 60, 32, 126, 10, 13, 32, 126, 
	35, 10, 34, 92, 32, 126, 34, 92, 
	32, 126, 10, 13, 34, 92, 32, 126, 
	10, 13, 34, 92, 32, 126, 34, 95, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	34, 92, 32, 126, 34, 92, 32, 126, 
	62, 34, 92, 32, 126, 34, 62, 92, 
	32, 126, 10, 13, 34, 92, 32, 126, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 61, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 34, 32, 43, 45, 61, 
	63, 126, 44, 62, 32, 33, 35, 126, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 61, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 34, 32, 43, 45, 
	61, 63, 126, 34, 92, 32, 126, 34, 
	92, 32, 126, 44, 62, 34, 92, 32, 
	126, 34, 44, 62, 92, 32, 126, 34, 
	47, 92, 95, 32, 44, 45, 46, 48, 
	57, 58, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 34, 47, 92, 95, 32, 
	44, 45, 46, 48, 57, 58, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 34, 
	47, 61, 92, 95, 32, 44, 45, 57, 
	58, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 34, 44, 62, 92, 32, 126, 
	34, 44, 62, 92, 32, 126, 10, 13, 
	34, 92, 32, 126, 34, 44, 62, 92, 
	32, 126, 34, 44, 62, 92, 32, 126, 
	34, 92, 32, 126, 34, 92, 32, 126, 
	34, 92, 32, 126, 34, 44, 62, 92, 
	32, 126, 34, 47, 92, 95, 32, 44, 
	45, 46, 48, 57, 58, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 34, 47, 
	92, 95, 32, 44, 45, 46, 48, 57, 
	58, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 34, 47, 61, 92, 95, 32, 
	44, 45, 57, 58, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 34, 44, 62, 
	92, 32, 126, 34, 44, 62, 92, 32, 
	126, 10, 13, 34, 92, 32, 126, 34, 
	44, 62, 92, 32, 126, 61, 76, 32, 
	126, 61, 84, 32, 126, 61, 32, 126, 
	60, 73, 68, 61, 58, 95, 48, 57, 
	65, 90, 97, 122, 44, 95, 48, 58, 
	65, 90, 97, 122, 68, 101, 115, 99, 
	114, 105, 112, 116, 105, 111, 110, 61, 
	34, 34, 92, 32, 126, 34, 92, 32, 
	126, 44, 62, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 95, 45, 46, 48, 
	57, 65, 90, 97, 122, 61, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 34, 
	34, 92, 32, 126, 34, 92, 32, 126, 
	34, 92, 32, 126, 34, 44, 62, 92, 
	32, 126, 34, 47, 92, 95, 32, 44, 
	45, 46, 48, 57, 58, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 34, 47, 
	92, 95, 32, 44, 45, 46, 48, 57, 
	58, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 34, 47, 61, 92, 95, 32, 
	44, 45, 57, 58, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 34, 92, 32, 
	126, 34, 44, 62, 92, 32, 126, 10, 
	13, 34, 92, 32, 126, 10, 13, 34, 
	92, 32, 126, 34, 44, 62, 92, 32, 
	126, 34, 47, 92, 95, 32, 44, 45, 
	46, 48, 57, 58, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 34, 47, 92, 
	95, 32, 44, 45, 46, 48, 57, 58, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 34, 47, 61, 92, 95, 32, 44, 
	45, 57, 58, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 34, 92, 32, 126, 
	10, 13, 34, 92, 32, 126, 58, 95, 
	48, 57, 65, 90, 97, 122, 61, 73, 
	79, 32, 126, 61, 76, 32, 126, 61, 
	84, 32, 126, 61, 69, 32, 126, 61, 
	82, 32, 126, 61, 32, 126, 60, 73, 
	68, 61, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 44, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 68, 101, 
	115, 99, 114, 105, 112, 116, 105, 111, 
	110, 61, 34, 34, 92, 32, 126, 34, 
	92, 32, 126, 44, 62, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 61, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 34, 34, 92, 32, 126, 34, 92, 
	32, 126, 34, 92, 32, 126, 34, 44, 
	62, 92, 32, 126, 34, 47, 92, 95, 
	32, 44, 45, 46, 48, 57, 58, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	34, 47, 92, 95, 32, 44, 45, 46, 
	48, 57, 58, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 34, 47, 61, 92, 
	95, 32, 44, 45, 57, 58, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 34, 
	92, 32, 126, 34, 44, 62, 92, 32, 
	126, 10, 13, 34, 92, 32, 126, 10, 
	13, 34, 92, 32, 126, 34, 44, 62, 
	92, 32, 126, 34, 47, 92, 95, 32, 
	44, 45, 46, 48, 57, 58, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 34, 
	47, 92, 95, 32, 44, 45, 46, 48, 
	57, 58, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 34, 47, 61, 92, 95, 
	32, 44, 45, 57, 58, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 34, 92, 
	32, 126, 10, 13, 34, 92, 32, 126, 
	61, 82, 32, 126, 61, 77, 32, 126, 
	61, 65, 32, 126, 61, 84, 32, 126, 
	61, 32, 126, 60, 73, 68, 61, 95, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 44, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 78, 117, 109, 98, 101, 
	114, 61, 46, 65, 71, 82, 48, 57, 
	44, 84, 121, 112, 101, 61, 65, 90, 
	97, 122, 44, 65, 90, 97, 122, 68, 
	101, 115, 99, 114, 105, 112, 116, 105, 
	111, 110, 61, 34, 34, 92, 32, 126, 
	34, 92, 32, 126, 44, 62, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 95, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	61, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 34, 34, 92, 32, 126, 34, 
	92, 32, 126, 34, 92, 32, 126, 34, 
	44, 62, 92, 32, 126, 34, 47, 92, 
	95, 32, 44, 45, 46, 48, 57, 58, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 34, 47, 92, 95, 32, 44, 45, 
	46, 48, 57, 58, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 34, 47, 61, 
	92, 95, 32, 44, 45, 57, 58, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	34, 92, 32, 126, 34, 44, 62, 92, 
	32, 126, 10, 13, 34, 92, 32, 126, 
	10, 13, 34, 92, 32, 126, 34, 44, 
	62, 92, 32, 126, 34, 47, 92, 95, 
	32, 44, 45, 46, 48, 57, 58, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	34, 47, 92, 95, 32, 44, 45, 46, 
	48, 57, 58, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 34, 47, 61, 92, 
	95, 32, 44, 45, 57, 58, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 34, 
	92, 32, 126, 10, 13, 34, 92, 32, 
	126, 44, 48, 57, 61, 78, 32, 126, 
	61, 70, 32, 126, 61, 79, 32, 126, 
	61, 32, 126, 60, 73, 68, 61, 95, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 44, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 78, 117, 109, 98, 101, 
	114, 61, 46, 65, 71, 82, 48, 57, 
	44, 84, 121, 112, 101, 61, 65, 90, 
	97, 122, 44, 65, 90, 97, 122, 68, 
	101, 115, 99, 114, 105, 112, 116, 105, 
	111, 110, 61, 34, 34, 92, 32, 126, 
	34, 92, 32, 126, 44, 62, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 95, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	61, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 34, 34, 92, 32, 126, 34, 
	92, 32, 126, 34, 92, 32, 126, 34, 
	44, 62, 92, 32, 126, 34, 47, 92, 
	95, 32, 44, 45, 46, 48, 57, 58, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 34, 47, 92, 95, 32, 44, 45, 
	46, 48, 57, 58, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 34, 47, 61, 
	92, 95, 32, 44, 45, 57, 58, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	34, 92, 32, 126, 34, 44, 62, 92, 
	32, 126, 10, 13, 34, 92, 32, 126, 
	10, 13, 34, 92, 32, 126, 34, 44, 
	62, 92, 32, 126, 34, 47, 92, 95, 
	32, 44, 45, 46, 48, 57, 58, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	34, 47, 92, 95, 32, 44, 45, 46, 
	48, 57, 58, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 34, 47, 61, 92, 
	95, 32, 44, 45, 57, 58, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 34, 
	92, 32, 126, 10, 13, 34, 92, 32, 
	126, 44, 48, 57, 61, 69, 32, 126, 
	61, 68, 32, 126, 61, 73, 32, 126, 
	61, 71, 32, 126, 61, 82, 32, 126, 
	61, 69, 32, 126, 61, 69, 32, 126, 
	61, 32, 126, 60, 95, 45, 46, 48, 
	57, 65, 90, 97, 122, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 61, 95, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 44, 62, 95, 45, 46, 48, 
	57, 65, 90, 97, 122, 10, 13, 61, 
	65, 32, 126, 61, 77, 32, 126, 61, 
	80, 32, 126, 61, 76, 32, 126, 61, 
	69, 32, 126, 61, 32, 126, 60, 73, 
	68, 61, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 44, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 71, 101, 
	110, 111, 109, 101, 115, 61, 32, 33, 
	35, 43, 45, 61, 63, 126, 44, 32, 
	33, 35, 61, 63, 126, 77, 105, 120, 
	116, 117, 114, 101, 61, 32, 33, 35, 
	43, 45, 61, 63, 126, 44, 32, 33, 
	35, 61, 63, 126, 68, 101, 115, 99, 
	114, 105, 112, 116, 105, 111, 110, 61, 
	34, 34, 92, 32, 126, 34, 92, 32, 
	126, 62, 10, 13, 34, 92, 32, 126, 
	34, 62, 92, 32, 126, 10, 13, 34, 
	92, 32, 126, 61, 115, 32, 126, 61, 
	115, 32, 126, 61, 101, 32, 126, 61, 
	109, 32, 126, 61, 98, 32, 126, 61, 
	108, 32, 126, 61, 121, 32, 126, 61, 
	32, 126, 65, 90, 97, 122, 10, 35, 
	47, 58, 63, 10, 35, 47, 58, 63, 
	47, 47, 65, 90, 97, 122, 10, 13, 
	61, 111, 32, 126, 61, 110, 32, 126, 
	61, 116, 32, 126, 61, 105, 32, 126, 
	61, 103, 32, 126, 61, 32, 126, 60, 
	73, 68, 61, 59, 92, 33, 41, 43, 
	57, 63, 90, 94, 126, 44, 59, 62, 
	92, 33, 57, 61, 90, 94, 126, 44, 
	47, 59, 62, 92, 95, 33, 43, 45, 
	46, 48, 57, 61, 64, 65, 90, 94, 
	96, 97, 122, 123, 126, 44, 47, 59, 
	62, 92, 95, 33, 43, 45, 46, 48, 
	57, 61, 64, 65, 90, 94, 96, 97, 
	122, 123, 126, 44, 47, 59, 61, 62, 
	92, 95, 33, 43, 45, 57, 63, 64, 
	65, 90, 94, 96, 97, 122, 123, 126, 
	32, 34, 44, 58, 60, 62, 91, 93, 
	33, 126, 44, 62, 32, 33, 35, 126, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 61, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 34, 32, 43, 45, 
	61, 63, 126, 34, 92, 32, 126, 34, 
	92, 32, 126, 44, 62, 10, 13, 34, 
	92, 32, 126, 34, 44, 62, 92, 32, 
	126, 34, 47, 92, 95, 32, 44, 45, 
	46, 48, 57, 58, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 34, 47, 92, 
	95, 32, 44, 45, 46, 48, 57, 58, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 34, 47, 61, 92, 95, 32, 44, 
	45, 57, 58, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 34, 44, 62, 92, 
	32, 126, 34, 44, 62, 92, 32, 126, 
	10, 13, 34, 92, 32, 126, 34, 44, 
	62, 92, 32, 126, 34, 44, 62, 92, 
	32, 126, 32, 34, 44, 58, 60, 62, 
	91, 93, 33, 126, 32, 34, 44, 58, 
	60, 62, 91, 92, 93, 33, 126, 32, 
	34, 44, 58, 60, 62, 91, 92, 93, 
	33, 126, 32, 34, 44, 47, 59, 62, 
	91, 92, 93, 94, 95, 96, 33, 43, 
	45, 46, 48, 57, 58, 60, 61, 64, 
	65, 122, 123, 126, 32, 34, 44, 47, 
	59, 62, 91, 92, 93, 94, 95, 96, 
	33, 43, 45, 46, 48, 57, 58, 60, 
	61, 64, 65, 122, 123, 126, 32, 34, 
	44, 47, 59, 61, 62, 91, 92, 93, 
	94, 96, 33, 43, 45, 57, 58, 60, 
	63, 64, 65, 122, 123, 126, 32, 34, 
	44, 58, 60, 62, 91, 92, 93, 33, 
	126, 32, 34, 44, 58, 60, 62, 91, 
	92, 93, 33, 126, 32, 34, 44, 58, 
	60, 62, 91, 92, 93, 33, 126, 32, 
	34, 44, 58, 60, 62, 91, 92, 93, 
	33, 126, 61, 101, 32, 126, 61, 100, 
	32, 126, 61, 105, 32, 126, 61, 103, 
	32, 126, 61, 114, 32, 126, 61, 101, 
	32, 126, 61, 101, 32, 126, 61, 68, 
	32, 126, 61, 66, 32, 126, 61, 32, 
	126, 60, 65, 90, 97, 122, 10, 35, 
	47, 58, 63, 10, 35, 47, 58, 63, 
	47, 47, 65, 90, 97, 122, 10, 62, 
	10, 13, 62, 10, 62, 72, 82, 79, 
	77, 9, 80, 79, 83, 9, 73, 68, 
	9, 82, 69, 70, 9, 65, 76, 84, 
	9, 81, 85, 65, 76, 9, 70, 73, 
	76, 84, 69, 82, 9, 73, 78, 70, 
	79, 9, 10, 13, 70, 79, 82, 77, 
	65, 84, 9, 32, 126, 9, 10, 13, 
	32, 126, 9, 59, 61, 33, 47, 48, 
	57, 63, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 43, 45, 48, 57, 48, 
	57, 9, 48, 57, 33, 58, 60, 126, 
	9, 59, 33, 126, 65, 67, 71, 78, 
	84, 97, 99, 103, 110, 116, 9, 65, 
	67, 71, 78, 84, 97, 99, 103, 110, 
	116, 42, 46, 60, 65, 67, 71, 78, 
	84, 91, 93, 97, 99, 103, 110, 116, 
	9, 44, 43, 45, 46, 73, 78, 48, 
	57, 46, 73, 48, 57, 48, 57, 9, 
	69, 101, 48, 57, 46, 58, 33, 47, 
	48, 57, 60, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 58, 33, 47, 48, 
	57, 60, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 9, 59, 33, 126, 46, 
	49, 65, 66, 67, 68, 69, 72, 77, 
	78, 83, 86, 95, 48, 57, 70, 90, 
	97, 122, 9, 10, 13, 95, 65, 90, 
	97, 122, 9, 46, 58, 95, 48, 57, 
	65, 90, 97, 122, 46, 48, 57, 9, 
	10, 13, 47, 58, 124, 48, 57, 65, 
	90, 97, 122, 59, 62, 33, 47, 48, 
	57, 61, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 59, 61, 33, 47, 48, 
	57, 63, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 59, 62, 33, 57, 61, 
	126, 9, 10, 46, 48, 57, 9, 10, 
	13, 47, 58, 124, 48, 57, 33, 57, 
	59, 126, 9, 10, 13, 58, 33, 126, 
	9, 10, 13, 46, 59, 61, 95, 48, 
	57, 65, 90, 97, 122, 49, 65, 66, 
	67, 68, 69, 72, 77, 78, 83, 86, 
	95, 48, 57, 70, 90, 97, 122, 9, 
	10, 13, 46, 48, 59, 61, 95, 49, 
	57, 65, 90, 97, 122, 9, 10, 13, 
	46, 48, 59, 61, 95, 49, 57, 65, 
	90, 97, 122, 9, 10, 13, 46, 48, 
	59, 61, 95, 49, 57, 65, 90, 97, 
	122, 9, 10, 13, 46, 59, 61, 71, 
	95, 48, 57, 65, 90, 97, 122, 32, 
	58, 60, 126, 9, 10, 13, 59, 32, 
	126, 9, 10, 13, 46, 59, 61, 95, 
	48, 57, 65, 90, 97, 122, 48, 49, 
	9, 10, 13, 59, 9, 10, 13, 46, 
	59, 61, 65, 67, 68, 70, 78, 95, 
	48, 57, 66, 90, 97, 122, 46, 61, 
	95, 48, 57, 65, 90, 97, 122, 65, 
	67, 71, 78, 84, 97, 99, 103, 110, 
	116, 45, 46, 9, 10, 13, 59, 9, 
	10, 13, 59, 65, 67, 71, 78, 84, 
	97, 99, 103, 110, 116, 46, 61, 95, 
	48, 57, 65, 90, 97, 122, 43, 45, 
	48, 57, 48, 57, 9, 10, 13, 44, 
	59, 48, 57, 46, 61, 70, 82, 95, 
	48, 57, 65, 90, 97, 122, 43, 45, 
	48, 57, 48, 57, 9, 10, 13, 44, 
	59, 48, 57, 46, 61, 95, 48, 57, 
	65, 90, 97, 122, 43, 45, 48, 57, 
	48, 57, 9, 10, 13, 44, 59, 48, 
	57, 46, 61, 95, 48, 57, 65, 90, 
	97, 122, 43, 45, 48, 57, 48, 57, 
	9, 10, 13, 44, 59, 48, 57, 46, 
	61, 95, 48, 57, 65, 90, 97, 122, 
	43, 45, 46, 73, 78, 48, 57, 46, 
	73, 48, 57, 48, 57, 9, 10, 13, 
	44, 59, 69, 101, 48, 57, 43, 45, 
	48, 57, 48, 57, 9, 10, 13, 44, 
	59, 48, 57, 9, 10, 13, 44, 46, 
	59, 69, 101, 48, 57, 110, 102, 9, 
	10, 13, 44, 59, 97, 78, 46, 61, 
	95, 48, 57, 65, 90, 97, 122, 43, 
	45, 48, 57, 48, 57, 9, 10, 13, 
	59, 48, 57, 9, 10, 13, 46, 59, 
	61, 81, 95, 48, 57, 65, 90, 97, 
	122, 46, 61, 95, 48, 57, 65, 90, 
	97, 122, 43, 45, 46, 73, 78, 48, 
	57, 46, 73, 48, 57, 48, 57, 9, 
	10, 13, 59, 69, 101, 48, 57, 43, 
	45, 48, 57, 48, 57, 9, 10, 13, 
	59, 48, 57, 9, 10, 13, 46, 59, 
	69, 101, 48, 57, 110, 102, 9, 10, 
	13, 59, 97, 78, 9, 10, 13, 46, 
	59, 61, 73, 95, 48, 57, 65, 90, 
	97, 122, 9, 10, 13, 46, 59, 61, 
	71, 95, 48, 57, 65, 90, 97, 122, 
	9, 10, 13, 46, 59, 61, 65, 95, 
	48, 57, 66, 90, 97, 122, 9, 10, 
	13, 46, 59, 61, 82, 95, 48, 57, 
	65, 90, 97, 122, 46, 61, 95, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 9, 10, 13, 59, 48, 
	57, 65, 90, 97, 122, 9, 10, 13, 
	46, 59, 61, 66, 80, 95, 48, 57, 
	65, 90, 97, 122, 9, 10, 13, 46, 
	59, 61, 95, 48, 57, 65, 90, 97, 
	122, 48, 49, 9, 10, 13, 59, 46, 
	61, 95, 48, 57, 65, 90, 97, 122, 
	43, 45, 48, 57, 48, 57, 9, 10, 
	13, 59, 48, 57, 9, 10, 13, 46, 
	59, 61, 78, 95, 48, 57, 65, 90, 
	97, 122, 9, 10, 13, 46, 59, 61, 
	68, 95, 48, 57, 65, 90, 97, 122, 
	46, 61, 95, 48, 57, 65, 90, 97, 
	122, 43, 45, 48, 57, 48, 57, 9, 
	10, 13, 59, 48, 57, 9, 10, 13, 
	46, 50, 51, 59, 61, 95, 48, 57, 
	65, 90, 97, 122, 9, 10, 13, 46, 
	59, 61, 95, 48, 57, 65, 90, 97, 
	122, 48, 49, 9, 10, 13, 59, 9, 
	10, 13, 46, 59, 61, 95, 48, 57, 
	65, 90, 97, 122, 48, 49, 9, 10, 
	13, 59, 9, 10, 13, 46, 59, 61, 
	81, 95, 48, 57, 65, 90, 97, 122, 
	46, 48, 61, 95, 49, 57, 65, 90, 
	97, 122, 46, 61, 95, 48, 57, 65, 
	90, 97, 122, 43, 45, 48, 57, 48, 
	57, 9, 10, 13, 59, 48, 57, 43, 
	45, 46, 73, 78, 48, 57, 46, 73, 
	48, 57, 48, 57, 9, 10, 13, 59, 
	69, 101, 48, 57, 43, 45, 48, 57, 
	48, 57, 9, 10, 13, 59, 48, 57, 
	9, 10, 13, 46, 59, 69, 101, 48, 
	57, 110, 102, 9, 10, 13, 59, 97, 
	78, 9, 10, 13, 46, 59, 61, 83, 
	95, 48, 57, 65, 90, 97, 122, 46, 
	61, 95, 48, 57, 65, 90, 97, 122, 
	43, 45, 48, 57, 48, 57, 9, 10, 
	13, 59, 48, 57, 9, 10, 13, 46, 
	59, 61, 66, 79, 95, 48, 57, 65, 
	90, 97, 122, 46, 61, 95, 48, 57, 
	65, 90, 97, 122, 43, 45, 46, 73, 
	78, 48, 57, 46, 73, 48, 57, 48, 
	57, 9, 10, 13, 59, 69, 101, 48, 
	57, 43, 45, 48, 57, 48, 57, 9, 
	10, 13, 59, 48, 57, 9, 10, 13, 
	46, 59, 69, 101, 48, 57, 110, 102, 
	9, 10, 13, 59, 97, 78, 9, 10, 
	13, 46, 59, 61, 77, 95, 48, 57, 
	65, 90, 97, 122, 9, 10, 13, 46, 
	59, 61, 65, 95, 48, 57, 66, 90, 
	97, 122, 9, 10, 13, 46, 59, 61, 
	84, 95, 48, 57, 65, 90, 97, 122, 
	9, 10, 13, 46, 59, 61, 73, 95, 
	48, 57, 65, 90, 97, 122, 9, 10, 
	13, 46, 59, 61, 67, 95, 48, 57, 
	65, 90, 97, 122, 9, 10, 13, 46, 
	59, 61, 95, 48, 57, 65, 90, 97, 
	122, 48, 49, 9, 10, 13, 59, 9, 
	10, 13, 46, 59, 61, 65, 95, 48, 
	57, 66, 90, 97, 122, 9, 10, 13, 
	46, 59, 61, 76, 95, 48, 57, 65, 
	90, 97, 122, 9, 10, 13, 46, 59, 
	61, 73, 95, 48, 57, 65, 90, 97, 
	122, 9, 10, 13, 46, 59, 61, 68, 
	95, 48, 57, 65, 90, 97, 122, 9, 
	10, 13, 46, 59, 61, 65, 95, 48, 
	57, 66, 90, 97, 122, 9, 10, 13, 
	46, 59, 61, 84, 95, 48, 57, 65, 
	90, 97, 122, 9, 10, 13, 46, 59, 
	61, 69, 95, 48, 57, 65, 90, 97, 
	122, 9, 10, 13, 46, 59, 61, 68, 
	95, 48, 57, 65, 90, 97, 122, 9, 
	10, 13, 46, 59, 61, 95, 48, 57, 
	65, 90, 97, 122, 48, 49, 9, 10, 
	13, 59, 58, 33, 47, 48, 57, 60, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 9, 58, 33, 47, 48, 57, 60, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 43, 45, 48, 57, 48, 57, 9, 
	48, 57, 9, 46, 69, 101, 48, 57, 
	110, 102, 9, 9, 48, 57, 97, 78, 
	42, 46, 60, 65, 67, 71, 78, 84, 
	91, 93, 97, 99, 103, 110, 116, 65, 
	67, 71, 78, 84, 97, 99, 103, 110, 
	116, 9, 44, 65, 67, 71, 78, 84, 
	97, 99, 103, 110, 116, 58, 95, 48, 
	57, 65, 90, 97, 122, 62, 95, 48, 
	58, 65, 90, 97, 122, 9, 44, 46, 
	65, 67, 71, 78, 84, 91, 93, 97, 
	99, 103, 110, 116, 60, 48, 57, 65, 
	90, 97, 122, 58, 59, 61, 33, 47, 
	48, 57, 63, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 59, 61, 33, 47, 
	48, 57, 63, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 58, 61, 33, 59, 
	63, 126, 43, 45, 48, 57, 48, 57, 
	91, 48, 57, 48, 57, 65, 90, 97, 
	122, 59, 62, 33, 47, 48, 57, 61, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 59, 61, 33, 47, 48, 57, 63, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 59, 62, 33, 57, 61, 126, 58, 
	60, 48, 57, 65, 90, 97, 122, 58, 
	59, 61, 33, 47, 48, 57, 63, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	59, 61, 33, 47, 48, 57, 63, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	58, 61, 33, 59, 63, 126, 43, 45, 
	48, 57, 48, 57, 93, 48, 57, 48, 
	57, 65, 90, 97, 122, 59, 62, 33, 
	47, 48, 57, 61, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 59, 61, 33, 
	47, 48, 57, 63, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 59, 62, 33, 
	57, 61, 126, 58, 60, 48, 57, 65, 
	90, 97, 122, 58, 59, 61, 33, 47, 
	48, 57, 63, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 59, 61, 33, 47, 
	48, 57, 63, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 58, 61, 33, 59, 
	63, 126, 43, 45, 48, 57, 48, 57, 
	91, 48, 57, 48, 57, 65, 90, 97, 
	122, 59, 62, 33, 47, 48, 57, 61, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 59, 61, 33, 47, 48, 57, 63, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 59, 62, 33, 57, 61, 126, 58, 
	60, 48, 57, 65, 90, 97, 122, 58, 
	59, 61, 33, 47, 48, 57, 63, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	59, 61, 33, 47, 48, 57, 63, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	58, 61, 33, 59, 63, 126, 43, 45, 
	48, 57, 48, 57, 93, 48, 57, 48, 
	57, 65, 90, 97, 122, 59, 62, 33, 
	47, 48, 57, 61, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 59, 61, 33, 
	47, 48, 57, 63, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 59, 62, 33, 
	57, 61, 126, 58, 9, 65, 67, 71, 
	78, 84, 97, 99, 103, 110, 116, 59, 
	61, 33, 47, 48, 57, 63, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 9, 
	59, 61, 33, 57, 63, 126, 10, 10, 
	10, 13, 10, 13, 60, 48, 57, 65, 
	90, 97, 122, 60, 48, 57, 65, 90, 
	97, 122, 0
};

static const char _vcf_v43_single_lengths[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 2, 
	8, 1, 2, 2, 1, 1, 2, 2, 
	2, 2, 4, 2, 2, 2, 1, 2, 
	3, 4, 1, 2, 1, 2, 1, 1, 
	2, 1, 2, 2, 2, 2, 4, 4, 
	4, 5, 4, 4, 4, 4, 4, 2, 
	2, 2, 4, 4, 4, 5, 4, 4, 
	4, 4, 2, 2, 1, 1, 1, 1, 
	1, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 2, 2, 1, 1, 2, 1, 2, 
	2, 2, 4, 4, 4, 5, 2, 4, 
	4, 2, 2, 4, 4, 4, 5, 2, 
	4, 2, 3, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 2, 2, 1, 
	1, 2, 1, 2, 2, 2, 4, 4, 
	4, 5, 2, 4, 4, 2, 2, 4, 
	4, 4, 5, 2, 4, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	4, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	2, 1, 1, 2, 1, 2, 2, 2, 
	4, 4, 4, 5, 2, 4, 4, 2, 
	2, 4, 4, 4, 5, 2, 4, 1, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 4, 1, 1, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 2, 2, 1, 1, 2, 1, 2, 
	2, 2, 4, 4, 4, 5, 2, 4, 
	4, 2, 2, 4, 4, 4, 5, 2, 
	4, 1, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 2, 1, 1, 
	3, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 2, 1, 2, 2, 3, 4, 2, 
	2, 2, 2, 2, 2, 2, 1, 0, 
	5, 5, 1, 1, 0, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	2, 4, 6, 6, 7, 8, 2, 1, 
	1, 2, 1, 2, 2, 2, 2, 2, 
	4, 4, 4, 5, 4, 4, 4, 4, 
	4, 8, 9, 9, 12, 12, 12, 9, 
	9, 9, 9, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 0, 5, 
	5, 1, 1, 0, 2, 3, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 0, 3, 3, 2, 0, 
	1, 0, 2, 10, 11, 15, 2, 5, 
	2, 0, 3, 2, 1, 2, 13, 3, 
	1, 4, 1, 6, 0, 2, 2, 2, 
	1, 1, 1, 6, 0, 4, 7, 12, 
	8, 8, 8, 8, 0, 4, 7, 0, 
	4, 12, 3, 10, 4, 14, 3, 2, 
	0, 5, 5, 2, 0, 5, 3, 2, 
	0, 5, 3, 2, 0, 5, 3, 5, 
	2, 0, 7, 2, 0, 5, 8, 1, 
	1, 5, 1, 1, 3, 2, 0, 4, 
	8, 3, 5, 2, 0, 6, 2, 0, 
	4, 7, 1, 1, 4, 1, 1, 8, 
	8, 8, 8, 3, 0, 4, 9, 7, 
	0, 4, 3, 2, 0, 4, 8, 8, 
	3, 2, 0, 4, 9, 7, 0, 4, 
	7, 0, 4, 8, 4, 3, 2, 0, 
	4, 5, 2, 0, 6, 2, 0, 4, 
	7, 1, 1, 4, 1, 1, 8, 3, 
	2, 0, 4, 9, 3, 5, 2, 0, 
	6, 2, 0, 4, 7, 1, 1, 4, 
	1, 1, 8, 8, 8, 8, 8, 7, 
	0, 4, 8, 8, 8, 8, 8, 8, 
	8, 8, 7, 0, 4, 1, 2, 2, 
	0, 1, 4, 1, 1, 1, 1, 1, 
	1, 15, 10, 12, 2, 2, 15, 1, 
	3, 2, 2, 2, 0, 1, 0, 2, 
	2, 2, 1, 1, 3, 2, 2, 2, 
	0, 1, 0, 2, 2, 2, 1, 1, 
	3, 2, 2, 2, 0, 1, 0, 2, 
	2, 2, 1, 1, 3, 2, 2, 2, 
	0, 1, 0, 2, 2, 2, 1, 11, 
	2, 3, 1, 1, 2, 2, 1, 1, 
	0, 0
};

static const char _vcf_v43_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	2, 1, 1, 1, 0, 0, 1, 1, 
	0, 1, 1, 4, 1, 1, 0, 1, 
	1, 1, 4, 4, 3, 2, 4, 4, 
	4, 3, 1, 1, 0, 1, 1, 8, 
	8, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 8, 8, 7, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 4, 4, 4, 0, 1, 
	1, 1, 1, 8, 8, 7, 1, 1, 
	1, 0, 1, 1, 8, 8, 7, 1, 
	1, 3, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 4, 4, 4, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 4, 
	4, 4, 0, 1, 1, 1, 1, 8, 
	8, 7, 1, 1, 1, 0, 1, 1, 
	8, 8, 7, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 4, 4, 
	4, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 2, 
	2, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 4, 4, 4, 0, 1, 1, 1, 
	1, 8, 8, 7, 1, 1, 1, 0, 
	1, 1, 8, 8, 7, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	4, 4, 4, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 2, 2, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 4, 4, 4, 0, 1, 
	1, 1, 1, 8, 8, 7, 1, 1, 
	1, 0, 1, 1, 8, 8, 7, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 4, 4, 4, 4, 4, 
	4, 0, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 4, 4, 4, 0, 
	0, 0, 0, 0, 0, 0, 0, 4, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	0, 0, 0, 0, 2, 0, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	4, 3, 8, 8, 7, 1, 2, 4, 
	4, 4, 3, 1, 1, 0, 0, 1, 
	1, 8, 8, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 7, 6, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 2, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 7, 1, 1, 
	1, 2, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 7, 7, 1, 3, 0, 
	2, 3, 1, 0, 3, 7, 7, 2, 
	0, 0, 1, 1, 2, 1, 3, 3, 
	3, 3, 3, 3, 2, 1, 3, 1, 
	0, 3, 3, 1, 0, 0, 3, 1, 
	1, 1, 3, 1, 1, 1, 3, 1, 
	1, 1, 3, 1, 1, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 3, 1, 1, 1, 
	3, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 0, 3, 1, 1, 1, 3, 3, 
	3, 1, 1, 1, 3, 3, 1, 0, 
	3, 1, 0, 3, 3, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 3, 3, 
	1, 1, 1, 3, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 3, 3, 3, 3, 3, 3, 
	1, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 1, 0, 7, 7, 1, 
	1, 1, 1, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 3, 3, 0, 3, 
	7, 7, 2, 1, 1, 1, 3, 7, 
	7, 2, 0, 3, 7, 7, 2, 1, 
	1, 1, 3, 7, 7, 2, 0, 3, 
	7, 7, 2, 1, 1, 1, 3, 7, 
	7, 2, 0, 3, 7, 7, 2, 1, 
	1, 1, 3, 7, 7, 2, 0, 0, 
	7, 2, 0, 0, 0, 0, 3, 3, 
	0, 0
};

static const short _vcf_v43_index_offsets[] = {
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 22, 24, 26, 28, 
	30, 32, 34, 36, 38, 40, 43, 45, 
	48, 59, 62, 66, 70, 72, 74, 78, 
	82, 85, 89, 95, 102, 106, 110, 112, 
	116, 121, 127, 133, 140, 145, 150, 156, 
	162, 169, 174, 178, 182, 185, 189, 195, 
	208, 221, 234, 240, 246, 252, 258, 264, 
	268, 272, 276, 282, 295, 308, 321, 327, 
	333, 339, 345, 349, 353, 356, 358, 360, 
	362, 364, 370, 376, 378, 380, 382, 384, 
	386, 388, 390, 392, 394, 396, 398, 400, 
	402, 406, 410, 413, 419, 425, 432, 434, 
	438, 442, 446, 452, 465, 478, 491, 495, 
	501, 507, 510, 514, 520, 533, 546, 559, 
	563, 569, 575, 580, 584, 588, 592, 596, 
	599, 601, 603, 605, 607, 613, 619, 626, 
	628, 630, 632, 634, 636, 638, 640, 642, 
	644, 646, 648, 650, 652, 656, 660, 663, 
	669, 675, 682, 684, 688, 692, 696, 702, 
	715, 728, 741, 745, 751, 757, 760, 764, 
	770, 783, 796, 809, 813, 819, 823, 827, 
	831, 835, 838, 840, 842, 844, 846, 852, 
	858, 865, 867, 869, 871, 873, 875, 877, 
	879, 885, 887, 889, 891, 893, 895, 897, 
	900, 904, 906, 908, 910, 912, 914, 916, 
	918, 920, 922, 924, 926, 928, 930, 934, 
	938, 941, 947, 953, 960, 962, 966, 970, 
	974, 980, 993, 1006, 1019, 1023, 1029, 1035, 
	1038, 1042, 1048, 1061, 1074, 1087, 1091, 1097, 
	1100, 1104, 1108, 1112, 1115, 1117, 1119, 1121, 
	1123, 1129, 1135, 1142, 1144, 1146, 1148, 1150, 
	1152, 1154, 1156, 1162, 1164, 1166, 1168, 1170, 
	1172, 1174, 1177, 1181, 1183, 1185, 1187, 1189, 
	1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 
	1207, 1211, 1215, 1218, 1224, 1230, 1237, 1239, 
	1243, 1247, 1251, 1257, 1270, 1283, 1296, 1300, 
	1306, 1312, 1315, 1319, 1325, 1338, 1351, 1364, 
	1368, 1374, 1377, 1381, 1385, 1389, 1393, 1397, 
	1401, 1405, 1408, 1410, 1416, 1422, 1429, 1435, 
	1441, 1449, 1452, 1456, 1460, 1464, 1468, 1472, 
	1475, 1477, 1479, 1481, 1483, 1489, 1495, 1502, 
	1504, 1506, 1508, 1510, 1512, 1514, 1516, 1518, 
	1523, 1528, 1530, 1532, 1534, 1536, 1538, 1540, 
	1542, 1544, 1549, 1554, 1556, 1558, 1560, 1562, 
	1564, 1566, 1568, 1570, 1572, 1574, 1576, 1578, 
	1580, 1584, 1588, 1590, 1593, 1597, 1602, 1608, 
	1612, 1616, 1620, 1624, 1628, 1632, 1636, 1639, 
	1642, 1648, 1654, 1656, 1658, 1661, 1664, 1668, 
	1672, 1676, 1680, 1684, 1687, 1689, 1691, 1693, 
	1695, 1702, 1710, 1725, 1740, 1755, 1765, 1770, 
	1776, 1782, 1789, 1794, 1798, 1802, 1805, 1808, 
	1812, 1818, 1831, 1844, 1857, 1863, 1869, 1875, 
	1881, 1887, 1897, 1908, 1919, 1939, 1959, 1978, 
	1989, 2000, 2011, 2022, 2026, 2030, 2034, 2038, 
	2042, 2046, 2050, 2054, 2058, 2061, 2063, 2066, 
	2072, 2078, 2080, 2082, 2085, 2088, 2092, 2095, 
	2097, 2099, 2101, 2103, 2105, 2107, 2109, 2111, 
	2113, 2115, 2117, 2119, 2121, 2123, 2125, 2127, 
	2129, 2131, 2133, 2135, 2137, 2139, 2141, 2143, 
	2145, 2147, 2149, 2151, 2153, 2155, 2157, 2159, 
	2161, 2163, 2165, 2167, 2171, 2173, 2175, 2177, 
	2179, 2181, 2183, 2185, 2187, 2192, 2203, 2207, 
	2209, 2212, 2215, 2219, 2230, 2242, 2258, 2261, 
	2268, 2272, 2274, 2279, 2289, 2298, 2302, 2319, 
	2323, 2327, 2335, 2338, 2345, 2349, 2359, 2369, 
	2374, 2376, 2378, 2381, 2389, 2392, 2398, 2409, 
	2425, 2437, 2449, 2461, 2473, 2476, 2482, 2493, 
	2495, 2500, 2516, 2523, 2535, 2540, 2555, 2562, 
	2566, 2568, 2575, 2584, 2588, 2590, 2597, 2604, 
	2608, 2610, 2617, 2624, 2628, 2630, 2637, 2644, 
	2651, 2655, 2657, 2666, 2670, 2672, 2679, 2689, 
	2691, 2693, 2699, 2701, 2703, 2710, 2714, 2716, 
	2722, 2734, 2741, 2748, 2752, 2754, 2762, 2766, 
	2768, 2774, 2783, 2785, 2787, 2792, 2794, 2796, 
	2808, 2820, 2832, 2844, 2851, 2855, 2863, 2876, 
	2887, 2889, 2894, 2901, 2905, 2907, 2913, 2925, 
	2937, 2944, 2948, 2950, 2956, 2969, 2980, 2982, 
	2987, 2998, 3000, 3005, 3017, 3025, 3032, 3036, 
	3038, 3044, 3051, 3055, 3057, 3065, 3069, 3071, 
	3077, 3086, 3088, 3090, 3095, 3097, 3099, 3111, 
	3118, 3122, 3124, 3130, 3143, 3150, 3157, 3161, 
	3163, 3171, 3175, 3177, 3183, 3192, 3194, 3196, 
	3201, 3203, 3205, 3217, 3229, 3241, 3253, 3265, 
	3276, 3278, 3283, 3295, 3307, 3319, 3331, 3343, 
	3355, 3367, 3379, 3390, 3392, 3397, 3406, 3416, 
	3420, 3422, 3425, 3431, 3433, 3435, 3437, 3440, 
	3442, 3444, 3460, 3471, 3484, 3490, 3496, 3512, 
	3517, 3528, 3538, 3543, 3547, 3549, 3552, 3556, 
	3566, 3576, 3581, 3583, 3588, 3599, 3609, 3614, 
	3618, 3620, 3623, 3627, 3637, 3647, 3652, 3654, 
	3659, 3670, 3680, 3685, 3689, 3691, 3694, 3698, 
	3708, 3718, 3723, 3725, 3730, 3741, 3751, 3756, 
	3760, 3762, 3765, 3769, 3779, 3789, 3794, 3796, 
	3808, 3818, 3824, 3826, 3828, 3831, 3834, 3839, 
	3844, 3845
};

static const short _vcf_v43_indicies[] = {
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 11, 0, 12, 0, 
	13, 0, 15, 14, 16, 14, 17, 14, 
	18, 14, 19, 14, 20, 14, 21, 14, 
	22, 23, 14, 25, 24, 27, 28, 26, 
	31, 32, 33, 34, 35, 36, 37, 38, 
	30, 30, 29, 41, 40, 39, 43, 44, 
	42, 39, 45, 46, 47, 39, 25, 26, 
	48, 39, 50, 51, 49, 39, 53, 54, 
	52, 39, 55, 56, 39, 57, 54, 52, 
	39, 55, 56, 53, 54, 52, 39, 58, 
	59, 59, 60, 60, 60, 39, 62, 63, 
	61, 39, 65, 66, 64, 39, 67, 39, 
	68, 66, 64, 39, 65, 69, 66, 64, 
	39, 55, 56, 65, 66, 64, 39, 70, 
	70, 71, 71, 71, 39, 72, 71, 71, 
	71, 71, 71, 39, 74, 73, 73, 73, 
	39, 76, 53, 75, 75, 39, 77, 77, 
	78, 78, 78, 39, 79, 79, 80, 80, 
	80, 39, 81, 80, 80, 80, 80, 80, 
	39, 82, 73, 73, 73, 39, 84, 85, 
	83, 39, 87, 88, 86, 39, 89, 67, 
	39, 90, 88, 86, 39, 87, 91, 92, 
	88, 86, 39, 87, 86, 88, 93, 86, 
	93, 94, 86, 94, 86, 94, 86, 39, 
	87, 86, 88, 95, 86, 95, 96, 86, 
	96, 86, 96, 86, 39, 87, 86, 97, 
	88, 96, 86, 96, 86, 96, 86, 96, 
	86, 39, 99, 86, 86, 100, 98, 39, 
	87, 102, 103, 104, 101, 39, 55, 56, 
	87, 88, 86, 39, 90, 102, 103, 104, 
	101, 39, 84, 105, 106, 85, 83, 39, 
	84, 108, 107, 39, 87, 110, 109, 39, 
	111, 110, 109, 39, 87, 112, 113, 110, 
	109, 39, 87, 109, 110, 114, 109, 114, 
	115, 109, 115, 109, 115, 109, 39, 87, 
	109, 110, 116, 109, 116, 117, 109, 117, 
	109, 117, 109, 39, 87, 109, 118, 110, 
	117, 109, 117, 109, 117, 109, 117, 109, 
	39, 99, 109, 109, 120, 119, 39, 87, 
	122, 123, 124, 121, 39, 55, 56, 87, 
	110, 109, 39, 111, 122, 123, 124, 121, 
	39, 41, 126, 40, 125, 41, 127, 40, 
	125, 128, 40, 125, 129, 125, 130, 125, 
	131, 125, 132, 125, 135, 135, 134, 134, 
	134, 133, 136, 137, 137, 137, 137, 133, 
	138, 125, 139, 125, 140, 125, 141, 125, 
	142, 125, 143, 125, 144, 125, 145, 125, 
	146, 125, 147, 125, 148, 125, 149, 125, 
	150, 125, 153, 154, 152, 151, 156, 157, 
	155, 151, 158, 159, 151, 161, 161, 162, 
	162, 162, 160, 163, 163, 164, 164, 164, 
	160, 165, 164, 164, 164, 164, 164, 160, 
	166, 125, 153, 168, 167, 151, 156, 170, 
	169, 151, 171, 170, 169, 151, 156, 172, 
	173, 170, 169, 151, 156, 169, 170, 175, 
	169, 175, 176, 169, 176, 169, 176, 169, 
	174, 156, 169, 170, 177, 169, 177, 178, 
	169, 178, 169, 178, 169, 174, 156, 169, 
	179, 170, 178, 169, 178, 169, 178, 169, 
	178, 169, 174, 180, 170, 169, 151, 153, 
	181, 182, 168, 167, 151, 55, 56, 156, 
	170, 169, 151, 55, 56, 125, 183, 157, 
	155, 151, 156, 184, 185, 157, 155, 151, 
	156, 155, 157, 187, 155, 187, 188, 155, 
	188, 155, 188, 155, 186, 156, 155, 157, 
	189, 155, 189, 190, 155, 190, 155, 190, 
	155, 186, 156, 155, 191, 157, 190, 155, 
	190, 155, 190, 155, 190, 155, 186, 180, 
	157, 155, 151, 55, 56, 156, 157, 155, 
	151, 192, 192, 137, 137, 137, 133, 41, 
	194, 195, 40, 193, 41, 197, 40, 196, 
	41, 198, 40, 196, 41, 199, 40, 196, 
	41, 200, 40, 196, 201, 40, 196, 202, 
	196, 203, 196, 204, 196, 205, 196, 207, 
	207, 208, 208, 208, 206, 209, 209, 210, 
	210, 210, 206, 211, 210, 210, 210, 210, 
	210, 206, 212, 196, 213, 196, 214, 196, 
	215, 196, 216, 196, 217, 196, 218, 196, 
	219, 196, 220, 196, 221, 196, 222, 196, 
	223, 196, 224, 196, 227, 228, 226, 225, 
	230, 231, 229, 225, 232, 233, 225, 234, 
	234, 235, 235, 235, 206, 236, 236, 237, 
	237, 237, 206, 238, 237, 237, 237, 237, 
	237, 206, 239, 196, 227, 241, 240, 225, 
	230, 243, 242, 225, 244, 243, 242, 225, 
	230, 245, 246, 243, 242, 225, 230, 242, 
	243, 248, 242, 248, 249, 242, 249, 242, 
	249, 242, 247, 230, 242, 243, 250, 242, 
	250, 251, 242, 251, 242, 251, 242, 247, 
	230, 242, 252, 243, 251, 242, 251, 242, 
	251, 242, 251, 242, 247, 253, 243, 242, 
	225, 227, 254, 255, 241, 240, 225, 55, 
	56, 230, 243, 242, 225, 55, 56, 196, 
	256, 231, 229, 225, 230, 257, 258, 231, 
	229, 225, 230, 229, 231, 260, 229, 260, 
	261, 229, 261, 229, 261, 229, 259, 230, 
	229, 231, 262, 229, 262, 263, 229, 263, 
	229, 263, 229, 259, 230, 229, 264, 231, 
	263, 229, 263, 229, 263, 229, 263, 229, 
	259, 253, 231, 229, 225, 55, 56, 230, 
	231, 229, 225, 41, 266, 40, 265, 41, 
	267, 40, 265, 41, 268, 40, 265, 41, 
	269, 40, 265, 270, 40, 265, 271, 265, 
	272, 265, 273, 265, 274, 265, 276, 276, 
	277, 277, 277, 275, 278, 278, 279, 279, 
	279, 275, 280, 279, 279, 279, 279, 279, 
	275, 281, 265, 282, 265, 283, 265, 284, 
	265, 285, 265, 286, 265, 287, 265, 289, 
	289, 289, 289, 290, 288, 291, 288, 292, 
	265, 293, 265, 294, 265, 295, 265, 296, 
	265, 298, 298, 297, 299, 300, 300, 297, 
	301, 265, 302, 265, 303, 265, 304, 265, 
	305, 265, 306, 265, 307, 265, 308, 265, 
	309, 265, 310, 265, 311, 265, 312, 265, 
	313, 265, 316, 317, 315, 314, 319, 320, 
	318, 314, 321, 322, 314, 323, 323, 324, 
	324, 324, 275, 325, 325, 326, 326, 326, 
	275, 327, 326, 326, 326, 326, 326, 275, 
	328, 265, 316, 330, 329, 314, 319, 332, 
	331, 314, 333, 332, 331, 314, 319, 334, 
	335, 332, 331, 314, 319, 331, 332, 337, 
	331, 337, 338, 331, 338, 331, 338, 331, 
	336, 319, 331, 332, 339, 331, 339, 340, 
	331, 340, 331, 340, 331, 336, 319, 331, 
	341, 332, 340, 331, 340, 331, 340, 331, 
	340, 331, 336, 342, 332, 331, 314, 316, 
	343, 344, 330, 329, 314, 55, 56, 319, 
	332, 331, 314, 55, 56, 265, 345, 320, 
	318, 314, 319, 346, 347, 320, 318, 314, 
	319, 318, 320, 349, 318, 349, 350, 318, 
	350, 318, 350, 318, 348, 319, 318, 320, 
	351, 318, 351, 352, 318, 352, 318, 352, 
	318, 348, 319, 318, 353, 320, 352, 318, 
	352, 318, 352, 318, 352, 318, 348, 342, 
	320, 318, 314, 55, 56, 319, 320, 318, 
	314, 291, 354, 288, 41, 356, 40, 355, 
	41, 357, 40, 355, 41, 358, 40, 355, 
	359, 40, 355, 360, 355, 361, 355, 362, 
	355, 363, 355, 365, 365, 366, 366, 366, 
	364, 367, 367, 368, 368, 368, 364, 369, 
	368, 368, 368, 368, 368, 364, 370, 355, 
	371, 355, 372, 355, 373, 355, 374, 355, 
	375, 355, 376, 355, 378, 378, 378, 378, 
	379, 377, 380, 377, 381, 355, 382, 355, 
	383, 355, 384, 355, 385, 355, 387, 387, 
	386, 388, 389, 389, 386, 390, 355, 391, 
	355, 392, 355, 393, 355, 394, 355, 395, 
	355, 396, 355, 397, 355, 398, 355, 399, 
	355, 400, 355, 401, 355, 402, 355, 405, 
	406, 404, 403, 408, 409, 407, 403, 410, 
	411, 403, 412, 412, 413, 413, 413, 364, 
	414, 414, 415, 415, 415, 364, 416, 415, 
	415, 415, 415, 415, 364, 417, 355, 405, 
	419, 418, 403, 408, 421, 420, 403, 422, 
	421, 420, 403, 408, 423, 424, 421, 420, 
	403, 408, 420, 421, 426, 420, 426, 427, 
	420, 427, 420, 427, 420, 425, 408, 420, 
	421, 428, 420, 428, 429, 420, 429, 420, 
	429, 420, 425, 408, 420, 430, 421, 429, 
	420, 429, 420, 429, 420, 429, 420, 425, 
	431, 421, 420, 403, 405, 432, 433, 419, 
	418, 403, 55, 56, 408, 421, 420, 403, 
	55, 56, 355, 434, 409, 407, 403, 408, 
	435, 436, 409, 407, 403, 408, 407, 409, 
	438, 407, 438, 439, 407, 439, 407, 439, 
	407, 437, 408, 407, 409, 440, 407, 440, 
	441, 407, 441, 407, 441, 407, 437, 408, 
	407, 442, 409, 441, 407, 441, 407, 441, 
	407, 441, 407, 437, 431, 409, 407, 403, 
	55, 56, 408, 409, 407, 403, 380, 443, 
	377, 41, 445, 40, 444, 41, 446, 40, 
	444, 41, 447, 40, 444, 41, 448, 40, 
	444, 41, 449, 40, 444, 41, 450, 40, 
	444, 41, 451, 40, 444, 452, 40, 444, 
	453, 444, 455, 455, 456, 456, 456, 454, 
	457, 457, 458, 458, 458, 454, 459, 458, 
	458, 458, 458, 458, 454, 460, 460, 461, 
	461, 461, 454, 462, 462, 463, 463, 463, 
	454, 464, 465, 463, 463, 463, 463, 463, 
	454, 55, 56, 444, 41, 467, 40, 466, 
	41, 468, 40, 466, 41, 469, 40, 466, 
	41, 470, 40, 466, 41, 471, 40, 466, 
	472, 40, 466, 473, 466, 474, 466, 475, 
	466, 476, 466, 478, 478, 479, 479, 479, 
	477, 480, 480, 481, 481, 481, 477, 483, 
	481, 481, 481, 481, 481, 482, 485, 484, 
	486, 484, 487, 484, 488, 484, 489, 484, 
	490, 484, 491, 484, 492, 484, 493, 493, 
	493, 493, 484, 496, 495, 495, 495, 494, 
	498, 497, 499, 497, 500, 497, 501, 497, 
	502, 497, 503, 497, 504, 497, 505, 497, 
	506, 506, 506, 506, 497, 509, 508, 508, 
	508, 507, 511, 510, 512, 510, 513, 510, 
	514, 510, 515, 510, 516, 510, 517, 510, 
	518, 510, 519, 510, 520, 510, 521, 510, 
	522, 510, 523, 510, 525, 526, 524, 510, 
	528, 529, 527, 510, 530, 510, 55, 56, 
	466, 531, 529, 527, 510, 528, 532, 529, 
	527, 510, 55, 56, 528, 529, 527, 510, 
	41, 534, 40, 533, 41, 535, 40, 533, 
	41, 536, 40, 533, 41, 537, 40, 533, 
	41, 538, 40, 533, 41, 539, 40, 533, 
	41, 540, 40, 533, 541, 40, 533, 543, 
	543, 542, 542, 542, 542, 542, 542, 544, 
	542, 542, 542, 545, 542, 544, 546, 542, 
	547, 542, 548, 548, 542, 45, 549, 548, 
	41, 551, 40, 550, 41, 552, 40, 550, 
	41, 553, 40, 550, 41, 554, 40, 550, 
	41, 555, 40, 550, 556, 40, 550, 557, 
	550, 558, 550, 559, 550, 560, 550, 562, 
	562, 562, 562, 562, 562, 561, 564, 563, 
	565, 563, 563, 563, 563, 561, 564, 563, 
	563, 565, 563, 566, 563, 566, 567, 563, 
	567, 563, 567, 563, 561, 564, 563, 563, 
	565, 563, 568, 563, 568, 569, 563, 569, 
	563, 569, 563, 561, 564, 563, 563, 570, 
	565, 563, 569, 563, 569, 563, 569, 563, 
	569, 563, 561, 571, 573, 564, 571, 571, 
	565, 571, 571, 572, 561, 575, 565, 574, 
	574, 550, 576, 576, 577, 577, 577, 550, 
	578, 578, 579, 579, 579, 550, 580, 579, 
	579, 579, 579, 579, 550, 581, 571, 571, 
	571, 550, 583, 584, 582, 550, 586, 587, 
	585, 550, 588, 589, 550, 55, 56, 550, 
	590, 587, 585, 550, 586, 591, 592, 587, 
	585, 550, 586, 585, 587, 593, 585, 593, 
	594, 585, 594, 585, 594, 585, 550, 586, 
	585, 587, 595, 585, 595, 596, 585, 596, 
	585, 596, 585, 550, 586, 585, 597, 587, 
	596, 585, 596, 585, 596, 585, 596, 585, 
	550, 599, 585, 585, 600, 598, 550, 586, 
	602, 603, 604, 601, 550, 55, 56, 586, 
	587, 585, 550, 590, 602, 603, 604, 601, 
	550, 583, 605, 606, 584, 582, 550, 574, 
	563, 564, 574, 574, 565, 574, 574, 607, 
	561, 582, 609, 610, 582, 582, 611, 582, 
	612, 582, 608, 561, 585, 614, 615, 585, 
	585, 616, 585, 617, 585, 613, 561, 585, 
	614, 615, 613, 613, 616, 585, 617, 585, 
	613, 618, 613, 613, 618, 619, 585, 613, 
	619, 613, 561, 585, 614, 615, 613, 613, 
	616, 585, 617, 585, 613, 620, 613, 613, 
	620, 621, 585, 613, 621, 613, 561, 585, 
	614, 615, 613, 613, 622, 616, 585, 617, 
	585, 613, 613, 613, 621, 585, 613, 621, 
	613, 561, 598, 624, 615, 598, 598, 616, 
	598, 625, 598, 623, 561, 601, 614, 615, 
	601, 601, 616, 601, 627, 601, 626, 561, 
	601, 628, 615, 601, 601, 616, 601, 627, 
	601, 626, 561, 585, 628, 615, 585, 585, 
	616, 585, 617, 585, 613, 561, 41, 630, 
	40, 629, 41, 631, 40, 629, 41, 632, 
	40, 629, 41, 633, 40, 629, 41, 634, 
	40, 629, 41, 635, 40, 629, 41, 636, 
	40, 629, 41, 637, 40, 629, 41, 638, 
	40, 629, 639, 40, 629, 640, 629, 642, 
	642, 641, 641, 641, 641, 641, 641, 643, 
	641, 641, 641, 644, 641, 643, 645, 641, 
	646, 641, 647, 647, 641, 641, 648, 647, 
	55, 649, 648, 647, 48, 648, 647, 651, 
	650, 652, 650, 653, 650, 654, 650, 655, 
	650, 656, 650, 657, 650, 658, 650, 659, 
	650, 660, 650, 661, 650, 662, 650, 663, 
	650, 664, 650, 665, 650, 666, 650, 667, 
	650, 668, 650, 669, 650, 670, 650, 671, 
	650, 672, 650, 673, 650, 674, 650, 675, 
	650, 676, 650, 677, 650, 678, 650, 679, 
	650, 680, 650, 681, 650, 682, 650, 683, 
	650, 684, 650, 685, 650, 686, 650, 687, 
	688, 689, 650, 691, 690, 692, 690, 693, 
	690, 694, 690, 695, 690, 696, 690, 697, 
	690, 698, 690, 699, 700, 701, 702, 690, 
	704, 705, 705, 705, 706, 705, 706, 705, 
	706, 705, 703, 708, 708, 709, 707, 710, 
	707, 711, 710, 707, 713, 713, 712, 714, 
	716, 715, 712, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 717, 719, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 717, 722, 723, 724, 725, 725, 725, 
	725, 725, 726, 727, 725, 725, 725, 725, 
	725, 721, 728, 729, 721, 731, 731, 732, 
	734, 735, 733, 730, 736, 738, 737, 730, 
	739, 730, 740, 741, 741, 739, 730, 744, 
	743, 743, 745, 743, 745, 743, 745, 743, 
	742, 746, 746, 747, 746, 747, 746, 747, 
	746, 742, 748, 749, 747, 742, 751, 753, 
	754, 755, 756, 757, 758, 759, 760, 761, 
	762, 763, 752, 752, 752, 752, 750, 765, 
	766, 767, 764, 769, 769, 769, 768, 770, 
	771, 772, 771, 771, 771, 771, 768, 774, 
	775, 773, 770, 766, 767, 776, 777, 776, 
	773, 778, 778, 778, 703, 779, 781, 779, 
	780, 779, 780, 779, 780, 779, 703, 779, 
	779, 779, 780, 779, 780, 779, 780, 779, 
	703, 780, 781, 780, 780, 703, 782, 703, 
	784, 783, 785, 786, 773, 770, 766, 767, 
	776, 777, 776, 786, 773, 788, 788, 787, 
	770, 766, 767, 777, 788, 787, 765, 766, 
	767, 789, 790, 791, 789, 789, 789, 789, 
	750, 753, 754, 755, 756, 757, 758, 759, 
	760, 761, 762, 763, 752, 752, 752, 752, 
	750, 765, 766, 767, 789, 792, 790, 791, 
	789, 789, 789, 789, 750, 765, 766, 767, 
	789, 793, 790, 791, 789, 789, 789, 789, 
	750, 765, 766, 767, 789, 794, 790, 791, 
	789, 789, 789, 789, 750, 765, 766, 767, 
	789, 790, 791, 795, 789, 789, 789, 789, 
	750, 797, 797, 796, 765, 766, 767, 790, 
	797, 796, 765, 766, 767, 789, 790, 799, 
	789, 789, 789, 789, 798, 801, 800, 765, 
	766, 767, 790, 800, 765, 766, 767, 789, 
	790, 791, 802, 803, 804, 805, 806, 789, 
	789, 789, 789, 750, 789, 807, 789, 789, 
	789, 789, 750, 810, 810, 810, 810, 810, 
	810, 810, 810, 810, 810, 809, 808, 765, 
	766, 767, 790, 808, 765, 766, 767, 790, 
	810, 810, 810, 810, 810, 810, 810, 810, 
	810, 810, 808, 789, 811, 789, 789, 789, 
	789, 750, 813, 813, 814, 812, 814, 812, 
	765, 766, 767, 811, 790, 814, 812, 789, 
	815, 816, 817, 789, 789, 789, 789, 750, 
	819, 819, 820, 818, 820, 818, 765, 766, 
	767, 815, 790, 820, 818, 789, 821, 789, 
	789, 789, 789, 750, 823, 823, 824, 822, 
	824, 822, 765, 766, 767, 821, 790, 824, 
	822, 789, 825, 789, 789, 789, 789, 750, 
	827, 827, 828, 826, 828, 826, 765, 766, 
	767, 825, 790, 828, 826, 789, 829, 789, 
	789, 789, 789, 750, 831, 831, 832, 834, 
	835, 833, 830, 832, 834, 833, 830, 836, 
	830, 765, 766, 767, 829, 790, 837, 837, 
	836, 830, 838, 838, 839, 830, 839, 830, 
	765, 766, 767, 829, 790, 839, 830, 765, 
	766, 767, 829, 832, 790, 837, 837, 833, 
	830, 840, 830, 841, 830, 765, 766, 767, 
	829, 790, 830, 842, 830, 841, 830, 789, 
	843, 789, 789, 789, 789, 750, 845, 845, 
	846, 844, 846, 844, 765, 766, 767, 790, 
	846, 844, 765, 766, 767, 789, 790, 791, 
	847, 789, 789, 789, 789, 750, 789, 848, 
	789, 789, 789, 789, 750, 850, 850, 851, 
	853, 854, 852, 849, 851, 853, 852, 849, 
	855, 849, 765, 766, 767, 790, 856, 856, 
	855, 849, 857, 857, 858, 849, 858, 849, 
	765, 766, 767, 790, 858, 849, 765, 766, 
	767, 851, 790, 856, 856, 852, 849, 859, 
	849, 860, 849, 765, 766, 767, 790, 849, 
	861, 849, 860, 849, 765, 766, 767, 789, 
	790, 791, 862, 789, 789, 789, 789, 750, 
	765, 766, 767, 789, 790, 791, 863, 789, 
	789, 789, 789, 750, 765, 766, 767, 789, 
	790, 791, 864, 789, 789, 789, 789, 750, 
	765, 766, 767, 789, 790, 791, 865, 789, 
	789, 789, 789, 750, 789, 866, 789, 789, 
	789, 789, 750, 868, 868, 868, 867, 765, 
	766, 767, 790, 868, 868, 868, 867, 765, 
	766, 767, 789, 790, 791, 869, 870, 789, 
	789, 789, 789, 750, 765, 766, 767, 789, 
	790, 872, 789, 789, 789, 789, 871, 874, 
	873, 765, 766, 767, 790, 873, 789, 875, 
	789, 789, 789, 789, 750, 877, 877, 878, 
	876, 878, 876, 765, 766, 767, 790, 878, 
	876, 765, 766, 767, 789, 790, 791, 879, 
	789, 789, 789, 789, 750, 765, 766, 767, 
	789, 790, 791, 880, 789, 789, 789, 789, 
	750, 789, 881, 789, 789, 789, 789, 750, 
	883, 883, 884, 882, 884, 882, 765, 766, 
	767, 790, 884, 882, 765, 766, 767, 789, 
	885, 886, 790, 791, 789, 789, 789, 789, 
	750, 765, 766, 767, 789, 790, 888, 789, 
	789, 789, 789, 887, 890, 889, 765, 766, 
	767, 790, 889, 765, 766, 767, 789, 790, 
	892, 789, 789, 789, 789, 891, 894, 893, 
	765, 766, 767, 790, 893, 765, 766, 767, 
	789, 790, 791, 895, 789, 789, 789, 789, 
	750, 789, 896, 897, 789, 789, 789, 789, 
	750, 789, 898, 789, 789, 789, 789, 750, 
	900, 900, 901, 899, 901, 899, 765, 766, 
	767, 790, 901, 899, 903, 903, 904, 906, 
	907, 905, 902, 904, 906, 905, 902, 908, 
	902, 765, 766, 767, 790, 909, 909, 908, 
	902, 910, 910, 911, 902, 911, 902, 765, 
	766, 767, 790, 911, 902, 765, 766, 767, 
	904, 790, 909, 909, 905, 902, 912, 902, 
	913, 902, 765, 766, 767, 790, 902, 914, 
	902, 913, 902, 765, 766, 767, 789, 790, 
	791, 915, 789, 789, 789, 789, 750, 789, 
	916, 789, 789, 789, 789, 750, 918, 918, 
	919, 917, 919, 917, 765, 766, 767, 790, 
	919, 917, 765, 766, 767, 789, 790, 791, 
	920, 921, 789, 789, 789, 789, 750, 789, 
	922, 789, 789, 789, 789, 750, 924, 924, 
	925, 927, 928, 926, 923, 925, 927, 926, 
	923, 929, 923, 765, 766, 767, 790, 930, 
	930, 929, 923, 931, 931, 932, 923, 932, 
	923, 765, 766, 767, 790, 932, 923, 765, 
	766, 767, 925, 790, 930, 930, 926, 923, 
	933, 923, 934, 923, 765, 766, 767, 790, 
	923, 935, 923, 934, 923, 765, 766, 767, 
	789, 790, 791, 936, 789, 789, 789, 789, 
	750, 765, 766, 767, 789, 790, 791, 937, 
	789, 789, 789, 789, 750, 765, 766, 767, 
	789, 790, 791, 938, 789, 789, 789, 789, 
	750, 765, 766, 767, 789, 790, 791, 939, 
	789, 789, 789, 789, 750, 765, 766, 767, 
	789, 790, 791, 940, 789, 789, 789, 789, 
	750, 765, 766, 767, 789, 790, 942, 789, 
	789, 789, 789, 941, 944, 943, 765, 766, 
	767, 790, 943, 765, 766, 767, 789, 790, 
	791, 945, 789, 789, 789, 789, 750, 765, 
	766, 767, 789, 790, 791, 946, 789, 789, 
	789, 789, 750, 765, 766, 767, 789, 790, 
	791, 947, 789, 789, 789, 789, 750, 765, 
	766, 767, 789, 790, 791, 948, 789, 789, 
	789, 789, 750, 765, 766, 767, 789, 790, 
	791, 949, 789, 789, 789, 789, 750, 765, 
	766, 767, 789, 790, 791, 950, 789, 789, 
	789, 789, 750, 765, 766, 767, 789, 790, 
	791, 951, 789, 789, 789, 789, 750, 765, 
	766, 767, 789, 790, 791, 952, 789, 789, 
	789, 789, 750, 765, 766, 767, 789, 790, 
	954, 789, 789, 789, 789, 953, 956, 955, 
	765, 766, 767, 790, 955, 743, 743, 745, 
	743, 745, 743, 745, 743, 742, 748, 746, 
	746, 747, 746, 747, 746, 747, 746, 742, 
	957, 957, 958, 730, 958, 730, 740, 958, 
	730, 740, 736, 741, 741, 737, 730, 959, 
	730, 960, 730, 740, 730, 740, 739, 730, 
	961, 730, 960, 730, 722, 962, 724, 725, 
	725, 725, 725, 725, 726, 727, 725, 725, 
	725, 725, 725, 721, 963, 963, 963, 963, 
	963, 963, 963, 963, 963, 963, 721, 728, 
	729, 963, 963, 963, 963, 963, 963, 963, 
	963, 963, 963, 721, 965, 965, 964, 964, 
	964, 721, 966, 964, 964, 964, 964, 721, 
	728, 729, 966, 967, 967, 967, 967, 967, 
	968, 969, 967, 967, 967, 967, 967, 721, 
	971, 970, 970, 970, 721, 974, 972, 972, 
	972, 973, 972, 973, 972, 973, 972, 721, 
	972, 972, 972, 973, 972, 973, 972, 973, 
	972, 721, 974, 973, 973, 973, 721, 975, 
	975, 976, 721, 976, 721, 966, 976, 721, 
	977, 977, 977, 721, 978, 980, 978, 979, 
	978, 979, 978, 979, 978, 721, 978, 978, 
	978, 979, 978, 979, 978, 979, 978, 721, 
	979, 980, 979, 979, 721, 974, 721, 982, 
	981, 981, 981, 721, 985, 983, 983, 983, 
	984, 983, 984, 983, 984, 983, 721, 983, 
	983, 983, 984, 983, 984, 983, 984, 983, 
	721, 985, 984, 984, 984, 721, 986, 986, 
	987, 721, 987, 721, 966, 987, 721, 988, 
	988, 988, 721, 989, 991, 989, 990, 989, 
	990, 989, 990, 989, 721, 989, 989, 989, 
	990, 989, 990, 989, 990, 989, 721, 990, 
	991, 990, 990, 721, 985, 721, 993, 992, 
	992, 992, 721, 996, 994, 994, 994, 995, 
	994, 995, 994, 995, 994, 721, 994, 994, 
	994, 995, 994, 995, 994, 995, 994, 721, 
	996, 995, 995, 995, 721, 997, 997, 998, 
	721, 998, 721, 999, 998, 721, 1000, 1000, 
	1000, 721, 1001, 1003, 1001, 1002, 1001, 1002, 
	1001, 1002, 1001, 721, 1001, 1001, 1001, 1002, 
	1001, 1002, 1001, 1002, 1001, 721, 1002, 1003, 
	1002, 1002, 721, 996, 721, 1005, 1004, 1004, 
	1004, 721, 1008, 1006, 1006, 1006, 1007, 1006, 
	1007, 1006, 1007, 1006, 721, 1006, 1006, 1006, 
	1007, 1006, 1007, 1006, 1007, 1006, 721, 1008, 
	1007, 1007, 1007, 721, 1009, 1009, 1010, 721, 
	1010, 721, 999, 1010, 721, 1011, 1011, 1011, 
	721, 1012, 1014, 1012, 1013, 1012, 1013, 1012, 
	1013, 1012, 721, 1012, 1012, 1012, 1013, 1012, 
	1013, 1012, 1013, 1012, 721, 1013, 1014, 1013, 
	1013, 721, 1008, 721, 728, 963, 963, 963, 
	963, 963, 963, 963, 963, 963, 963, 721, 
	705, 705, 705, 706, 705, 706, 705, 706, 
	705, 703, 704, 706, 706, 706, 706, 703, 
	1015, 690, 1016, 0, 1018, 1019, 1017, 1021, 
	1022, 1020, 1025, 1024, 1024, 1024, 1023, 1027, 
	1026, 1026, 1026, 703, 1028, 1028, 0
};

static const short _vcf_v43_trans_targs[] = {
	0, 2, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 0, 15, 
	16, 17, 18, 19, 20, 21, 22, 755, 
	0, 23, 0, 24, 455, 0, 25, 74, 
	122, 240, 306, 322, 375, 390, 435, 0, 
	25, 26, 27, 30, 35, 28, 29, 27, 
	28, 31, 32, 33, 31, 32, 33, 28, 
	29, 34, 36, 42, 43, 37, 38, 39, 
	37, 38, 39, 32, 40, 41, 42, 43, 
	44, 45, 63, 45, 46, 47, 48, 47, 
	48, 49, 50, 51, 52, 53, 51, 52, 
	53, 46, 54, 55, 60, 56, 57, 56, 
	57, 58, 59, 62, 61, 59, 55, 60, 
	61, 55, 60, 64, 65, 64, 65, 66, 
	67, 72, 68, 69, 68, 69, 70, 71, 
	73, 71, 67, 72, 73, 0, 75, 76, 
	77, 78, 79, 80, 81, 0, 82, 121, 
	83, 82, 84, 85, 86, 87, 88, 89, 
	90, 91, 92, 93, 94, 95, 96, 0, 
	97, 98, 114, 97, 98, 114, 99, 113, 
	0, 100, 101, 100, 101, 102, 103, 104, 
	105, 104, 105, 106, 107, 112, 0, 108, 
	109, 108, 109, 110, 111, 107, 112, 115, 
	116, 120, 0, 117, 118, 117, 118, 119, 
	121, 0, 123, 173, 0, 124, 125, 126, 
	127, 128, 129, 130, 131, 132, 0, 133, 
	134, 133, 134, 135, 136, 137, 138, 139, 
	140, 141, 142, 143, 144, 145, 146, 147, 
	148, 0, 149, 150, 166, 149, 150, 166, 
	151, 165, 152, 153, 152, 153, 154, 155, 
	156, 157, 156, 157, 158, 159, 164, 0, 
	160, 161, 160, 161, 162, 163, 159, 164, 
	167, 168, 172, 0, 169, 170, 169, 170, 
	171, 0, 174, 175, 176, 177, 178, 179, 
	180, 181, 182, 0, 183, 184, 183, 184, 
	185, 186, 187, 188, 189, 190, 191, 192, 
	0, 193, 239, 194, 195, 196, 197, 198, 
	199, 0, 200, 201, 200, 202, 203, 204, 
	205, 206, 207, 208, 209, 210, 211, 212, 
	213, 214, 0, 215, 216, 232, 215, 216, 
	232, 217, 231, 218, 219, 218, 219, 220, 
	221, 222, 223, 222, 223, 224, 225, 230, 
	0, 226, 227, 226, 227, 228, 229, 225, 
	230, 233, 234, 238, 0, 235, 236, 235, 
	236, 237, 239, 0, 241, 242, 243, 244, 
	245, 246, 247, 248, 0, 249, 250, 249, 
	250, 251, 252, 253, 254, 255, 256, 257, 
	258, 0, 259, 305, 260, 261, 262, 263, 
	264, 265, 0, 266, 267, 266, 268, 269, 
	270, 271, 272, 273, 274, 275, 276, 277, 
	278, 279, 280, 0, 281, 282, 298, 281, 
	282, 298, 283, 297, 284, 285, 284, 285, 
	286, 287, 288, 289, 288, 289, 290, 291, 
	296, 0, 292, 293, 292, 293, 294, 295, 
	291, 296, 299, 300, 304, 0, 301, 302, 
	301, 302, 303, 305, 0, 307, 308, 309, 
	310, 311, 312, 313, 314, 315, 0, 316, 
	317, 316, 317, 318, 319, 320, 319, 320, 
	315, 321, 0, 323, 324, 325, 326, 327, 
	328, 329, 330, 331, 332, 0, 333, 334, 
	333, 334, 0, 335, 0, 336, 337, 338, 
	339, 340, 341, 342, 343, 344, 0, 344, 
	345, 0, 346, 347, 348, 349, 350, 351, 
	352, 353, 354, 0, 354, 355, 0, 356, 
	357, 358, 359, 360, 361, 362, 363, 364, 
	365, 366, 367, 368, 369, 370, 372, 369, 
	370, 372, 371, 373, 374, 0, 376, 377, 
	378, 379, 380, 381, 382, 383, 0, 384, 
	385, 386, 387, 388, 389, 389, 0, 391, 
	392, 393, 394, 395, 396, 397, 398, 399, 
	400, 0, 401, 401, 402, 414, 403, 404, 
	403, 404, 405, 406, 425, 426, 406, 407, 
	408, 409, 408, 409, 410, 411, 412, 413, 
	415, 412, 413, 415, 407, 414, 416, 417, 
	422, 418, 419, 418, 419, 420, 421, 424, 
	423, 421, 417, 422, 423, 417, 422, 425, 
	427, 401, 428, 422, 434, 427, 401, 428, 
	422, 434, 429, 430, 429, 430, 431, 432, 
	426, 433, 432, 433, 427, 0, 436, 437, 
	438, 439, 440, 441, 442, 443, 444, 445, 
	446, 0, 447, 448, 449, 450, 451, 452, 
	453, 454, 0, 456, 457, 458, 459, 460, 
	461, 462, 463, 464, 465, 466, 467, 468, 
	469, 470, 471, 472, 473, 474, 475, 476, 
	477, 478, 479, 480, 481, 482, 483, 484, 
	485, 486, 487, 488, 489, 490, 491, 492, 
	758, 754, 0, 493, 494, 495, 496, 497, 
	498, 499, 500, 499, 758, 754, 500, 0, 
	502, 752, 753, 0, 503, 504, 504, 505, 
	0, 506, 507, 506, 505, 0, 508, 509, 
	508, 0, 510, 751, 700, 702, 727, 739, 
	511, 697, 0, 512, 694, 690, 691, 695, 
	513, 690, 691, 514, 515, 687, 0, 516, 
	686, 517, 516, 517, 518, 685, 0, 519, 
	534, 536, 545, 584, 599, 606, 614, 620, 
	627, 646, 651, 674, 0, 520, 759, 529, 
	0, 521, 522, 521, 520, 0, 523, 531, 
	530, 532, 525, 526, 527, 528, 502, 0, 
	759, 523, 531, 0, 533, 534, 535, 540, 
	537, 538, 539, 542, 0, 541, 0, 543, 
	0, 544, 546, 550, 554, 566, 580, 547, 
	0, 548, 549, 551, 0, 552, 553, 555, 
	558, 562, 0, 556, 557, 559, 0, 560, 
	561, 563, 0, 564, 565, 567, 0, 568, 
	569, 574, 575, 578, 570, 571, 572, 573, 
	576, 577, 579, 581, 0, 582, 583, 585, 
	586, 0, 587, 588, 593, 594, 597, 589, 
	590, 591, 592, 595, 596, 598, 600, 601, 
	602, 603, 604, 0, 605, 607, 610, 0, 
	608, 0, 609, 611, 0, 612, 613, 615, 
	616, 617, 0, 618, 619, 621, 624, 0, 
	622, 0, 623, 0, 625, 0, 626, 628, 
	629, 633, 630, 0, 631, 632, 0, 634, 
	635, 640, 641, 644, 636, 637, 638, 639, 
	642, 643, 645, 647, 648, 0, 649, 650, 
	652, 666, 653, 0, 654, 655, 660, 661, 
	664, 656, 657, 658, 659, 662, 663, 665, 
	667, 668, 669, 670, 671, 0, 672, 0, 
	673, 675, 676, 677, 678, 679, 680, 681, 
	682, 0, 683, 0, 684, 688, 689, 692, 
	693, 696, 698, 699, 701, 700, 510, 702, 
	703, 715, 704, 710, 705, 706, 707, 708, 
	709, 711, 712, 713, 714, 716, 722, 717, 
	718, 719, 720, 721, 723, 724, 725, 726, 
	728, 734, 729, 730, 731, 732, 733, 698, 
	735, 736, 737, 738, 740, 746, 741, 742, 
	743, 744, 745, 747, 748, 749, 750, 758, 
	22, 756, 760, 756, 757, 761, 757, 0, 
	501, 524, 501, 524, 0
};

static const short _vcf_v43_trans_actions[] = {
	9, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 87, 1, 
	0, 0, 0, 0, 0, 3, 69, 69, 
	404, 0, 174, 0, 0, 494, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 11, 
	3, 39, 45, 0, 0, 166, 166, 3, 
	0, 45, 48, 45, 3, 5, 3, 78, 
	78, 54, 0, 1, 45, 45, 48, 45, 
	3, 5, 3, 0, 54, 3, 0, 3, 
	41, 45, 0, 3, 5, 1, 45, 0, 
	3, 41, 0, 45, 48, 45, 3, 5, 
	3, 0, 54, 3, 3, 45, 45, 3, 
	3, 75, 51, 5, 51, 3, 54, 54, 
	3, 45, 45, 45, 45, 3, 3, 54, 
	3, 3, 51, 51, 3, 3, 57, 51, 
	51, 3, 54, 54, 3, 90, 3, 0, 
	19, 0, 0, 0, 0, 210, 186, 72, 
	5, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 37, 270, 
	45, 48, 45, 3, 5, 3, 0, 0, 
	242, 1, 45, 0, 3, 5, 0, 45, 
	45, 3, 3, 54, 3, 3, 424, 45, 
	45, 3, 3, 60, 5, 45, 45, 54, 
	3, 3, 444, 51, 51, 3, 3, 54, 
	0, 214, 3, 3, 99, 3, 3, 3, 
	0, 25, 0, 0, 0, 0, 250, 72, 
	186, 0, 3, 5, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	37, 274, 45, 48, 45, 3, 5, 3, 
	0, 0, 1, 45, 0, 3, 5, 0, 
	45, 45, 3, 3, 54, 3, 3, 429, 
	45, 45, 3, 3, 60, 5, 45, 45, 
	54, 3, 3, 449, 51, 51, 3, 3, 
	54, 102, 3, 3, 3, 0, 27, 0, 
	0, 0, 0, 254, 72, 186, 0, 3, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	218, 190, 190, 5, 0, 0, 0, 0, 
	0, 226, 194, 5, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 37, 278, 45, 48, 45, 3, 5, 
	3, 0, 0, 1, 45, 0, 3, 5, 
	0, 45, 45, 3, 3, 54, 3, 3, 
	434, 45, 45, 3, 3, 60, 5, 45, 
	45, 54, 3, 3, 454, 51, 51, 3, 
	3, 54, 3, 105, 3, 3, 0, 29, 
	0, 0, 0, 0, 258, 72, 186, 0, 
	3, 5, 0, 0, 0, 0, 0, 0, 
	0, 222, 190, 190, 5, 0, 0, 0, 
	0, 0, 230, 194, 5, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 37, 282, 45, 48, 45, 3, 
	5, 3, 0, 0, 1, 45, 0, 3, 
	5, 0, 45, 45, 3, 3, 54, 3, 
	3, 439, 45, 45, 3, 3, 60, 5, 
	45, 45, 54, 3, 3, 459, 51, 51, 
	3, 3, 54, 3, 108, 3, 3, 3, 
	3, 3, 3, 0, 31, 0, 262, 1, 
	45, 0, 3, 5, 1, 45, 0, 3, 
	5, 5, 114, 3, 3, 3, 3, 0, 
	35, 0, 0, 0, 0, 266, 72, 186, 
	0, 3, 419, 5, 234, 0, 0, 0, 
	0, 0, 0, 0, 0, 198, 409, 3, 
	5, 238, 0, 0, 0, 0, 0, 0, 
	0, 0, 202, 414, 3, 5, 286, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 37, 45, 48, 45, 3, 
	5, 3, 0, 54, 3, 93, 3, 3, 
	3, 3, 3, 3, 0, 21, 290, 1, 
	0, 0, 0, 0, 3, 394, 96, 3, 
	3, 3, 3, 0, 23, 0, 0, 0, 
	0, 246, 186, 3, 54, 5, 51, 51, 
	3, 3, 54, 45, 51, 3, 3, 5, 
	1, 45, 0, 3, 5, 0, 45, 48, 
	45, 3, 5, 3, 0, 0, 54, 3, 
	3, 45, 45, 3, 3, 60, 51, 5, 
	51, 3, 54, 54, 3, 45, 45, 3, 
	51, 150, 154, 162, 51, 3, 54, 54, 
	60, 3, 51, 51, 3, 3, 54, 51, 
	54, 51, 3, 3, 54, 111, 3, 3, 
	3, 3, 3, 3, 3, 3, 0, 33, 
	0, 294, 1, 0, 0, 0, 0, 3, 
	54, 158, 117, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	81, 81, 15, 0, 0, 0, 0, 0, 
	0, 0, 45, 43, 206, 206, 3, 120, 
	170, 3, 3, 123, 1, 45, 3, 170, 
	126, 45, 170, 3, 5, 129, 45, 170, 
	3, 132, 45, 45, 45, 45, 45, 45, 
	170, 5, 135, 45, 45, 45, 45, 45, 
	3, 3, 3, 3, 170, 3, 138, 1, 
	45, 45, 0, 3, 170, 5, 298, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 141, 170, 399, 399, 
	144, 45, 170, 3, 5, 390, 45, 45, 
	3, 3, 45, 3, 3, 5, 84, 17, 
	0, 3, 3, 147, 3, 3, 5, 3, 
	3, 3, 3, 3, 302, 3, 489, 3, 
	386, 3, 3, 3, 3, 3, 3, 3, 
	306, 3, 3, 3, 310, 3, 3, 3, 
	3, 3, 314, 3, 3, 3, 318, 3, 
	3, 3, 322, 3, 3, 3, 326, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 330, 3, 3, 3, 
	3, 334, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 338, 3, 3, 3, 464, 
	3, 342, 3, 3, 346, 3, 3, 3, 
	3, 3, 350, 3, 3, 3, 3, 469, 
	3, 354, 3, 474, 3, 358, 3, 3, 
	3, 3, 3, 366, 3, 3, 362, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 370, 3, 3, 
	3, 3, 3, 374, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 479, 3, 378, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 484, 3, 382, 3, 3, 3, 3, 
	3, 3, 45, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	0, 0, 63, 7, 0, 66, 7, 182, 
	178, 13, 45, 0, 0
};

static const short _vcf_v43_eof_actions[] = {
	0, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 87, 87, 
	87, 87, 87, 87, 87, 87, 404, 174, 
	494, 11, 11, 11, 174, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 90, 90, 90, 90, 90, 90, 
	90, 210, 210, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	270, 270, 270, 242, 242, 242, 90, 270, 
	270, 270, 270, 424, 424, 424, 270, 270, 
	270, 90, 270, 270, 444, 444, 444, 270, 
	270, 210, 214, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 250, 250, 250, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 274, 274, 274, 250, 
	250, 250, 99, 274, 274, 274, 274, 429, 
	429, 429, 274, 274, 274, 99, 274, 274, 
	449, 449, 449, 274, 274, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 254, 254, 
	254, 102, 102, 102, 102, 102, 102, 102, 
	218, 218, 102, 102, 102, 102, 102, 226, 
	226, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 278, 278, 
	278, 254, 254, 254, 102, 278, 278, 278, 
	278, 434, 434, 434, 278, 278, 278, 102, 
	278, 278, 454, 454, 454, 278, 278, 218, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	258, 258, 258, 105, 105, 105, 105, 105, 
	105, 105, 222, 222, 105, 105, 105, 105, 
	105, 230, 230, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	282, 282, 282, 258, 258, 258, 105, 282, 
	282, 282, 282, 439, 439, 439, 282, 282, 
	282, 105, 282, 282, 459, 459, 459, 282, 
	282, 222, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 262, 262, 262, 262, 262, 
	262, 108, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 266, 266, 419, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	409, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 414, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 114, 286, 286, 286, 93, 
	93, 93, 93, 93, 93, 93, 93, 290, 
	290, 290, 290, 290, 290, 290, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	246, 246, 246, 246, 246, 246, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 120, 123, 123, 
	123, 126, 126, 129, 129, 132, 132, 135, 
	135, 135, 135, 138, 138, 138, 298, 141, 
	144, 144, 390, 390, 120, 120, 120, 120, 
	120, 17, 390, 390, 147, 147, 298, 298, 
	298, 298, 298, 298, 302, 302, 489, 386, 
	386, 298, 298, 306, 306, 306, 298, 310, 
	310, 310, 298, 314, 314, 314, 298, 318, 
	318, 318, 298, 322, 322, 322, 298, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 298, 330, 330, 330, 
	298, 298, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 298, 
	298, 298, 298, 298, 338, 338, 298, 464, 
	342, 342, 298, 346, 346, 346, 298, 298, 
	298, 350, 350, 350, 298, 469, 354, 354, 
	474, 358, 358, 298, 298, 298, 366, 366, 
	366, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 298, 298, 
	370, 370, 370, 298, 298, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 298, 298, 298, 298, 298, 479, 
	378, 378, 298, 298, 298, 298, 298, 298, 
	298, 298, 484, 382, 382, 138, 138, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	120, 120, 15, 9, 0, 0, 13, 0, 
	0, 0
};

static const int vcf_v43_start = 1;
static const int vcf_v43_first_final = 758;
static const int vcf_v43_error = 0;

static const int vcf_v43_en_main = 1;
static const int vcf_v43_en_main_meta_section = 28;
static const int vcf_v43_en_main_body_section = 759;
static const int vcf_v43_en_meta_section_skip = 756;
static const int vcf_v43_en_body_section_skip = 757;


#line 777 "src/vcf/vcf_v43.ragel"

}

namespace ebi
{
  namespace vcf
  {
    template <typename Configuration>
    ParserImpl_v43<Configuration>::ParserImpl_v43(std::shared_ptr<Source> const & source,
                                          std::shared_ptr<std::vector<Record>> const & records
    )
    : ParsingState{source, records}
    {
      
#line 1905 "inc/vcf/validator_detail_v43.hpp"
	{
	cs = vcf_v43_start;
	}

#line 792 "src/vcf/vcf_v43.ragel"

    }

    template <typename Configuration>
    void ParserImpl_v43<Configuration>::parse(std::vector<char> const & text)
    {
      char const * p = &text[0];
      char const * pe = &text[0] + text.size();
      char const * eof = nullptr;

      clear_records();
      parse_buffer(p, pe, eof);
    }

    template <typename Configuration>
    void ParserImpl_v43<Configuration>::parse(std::string const & text)
    {
      char const * p = text.data();
      char const * pe = text.data() + text.size();
      char const * eof = nullptr;

      clear_records();
      parse_buffer(p, pe, eof);
    }

    template <typename Configuration>
    void ParserImpl_v43<Configuration>::end()
    {
      char const * empty = "";
      clear_records();
      parse_buffer(empty, empty, empty);
    }

    template <typename Configuration>
    bool ParserImpl_v43<Configuration>::is_valid() const
    {
      return m_is_valid;
    }

    template <typename Configuration>
    void ParserImpl_v43<Configuration>::parse_buffer(char const * p, char const * pe, char const * eof)
    {
      
#line 1954 "inc/vcf/validator_detail_v43.hpp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _vcf_v43_trans_keys + _vcf_v43_key_offsets[cs];
	_trans = _vcf_v43_index_offsets[cs];

	_klen = _vcf_v43_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _vcf_v43_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _vcf_v43_indicies[_trans];
	cs = _vcf_v43_trans_targs[_trans];

	if ( _vcf_v43_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _vcf_v43_actions + _vcf_v43_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 31 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_token_begin(*this);
    }
	break;
	case 1:
#line 35 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_token_char(*this, *p);
    }
	break;
	case 2:
#line 39 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_token_end(*this);
    }
	break;
	case 3:
#line 43 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_newline(*this);
        ++n_lines;
        n_columns = 1;

        if (n_lines % 10000 == 0) {
            std::cout << "Lines read: " << n_lines << std::endl;
        }
    }
	break;
	case 4:
#line 53 "src/vcf/vcf_v43.ragel"
	{
        ++n_columns;
    }
	break;
	case 5:
#line 60 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_fileformat_section_error(*this);
        p--; {cs = 756; goto _again;}
    }
	break;
	case 6:
#line 65 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this);
        p--; {cs = 756; goto _again;}
    }
	break;
	case 7:
#line 70 "src/vcf/vcf_v43.ragel"
	{
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
    }
	break;
	case 8:
#line 78 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_header_section_error(*this);
        
        // If an error occurs in the header, meta_section_end won't be triggered and the meta and header optional validations must be run here
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
        
        p--; {cs = 757; goto _again;}
    }
	break;
	case 9:
#line 91 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this);
        p--; {cs = 757; goto _again;}
    }
	break;
	case 10:
#line 99 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_fileformat(*this);
    }
	break;
	case 11:
#line 103 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "ALT");
    }
	break;
	case 12:
#line 107 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "assembly");
    }
	break;
	case 13:
#line 111 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "contig");
    }
	break;
	case 14:
#line 115 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "FILTER");
    }
	break;
	case 15:
#line 119 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "FORMAT");
    }
	break;
	case 16:
#line 123 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "INFO");
    }
	break;
	case 17:
#line 127 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "PEDIGREE");
    }
	break;
	case 18:
#line 131 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "pedigreeDB");
    }
	break;
	case 19:
#line 135 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "SAMPLE");
    }
	break;
	case 20:
#line 139 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_token_end(*this, "ID");
    }
	break;
	case 21:
#line 143 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Number");
    }
	break;
	case 22:
#line 147 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Type");
    }
	break;
	case 23:
#line 151 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Description");
    }
	break;
	case 24:
#line 155 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Genomes");
    }
	break;
	case 25:
#line 159 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Mixture");
    }
	break;
	case 26:
#line 163 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this);
    }
	break;
	case 27:
#line 167 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_token_end(*this);
    }
	break;
	case 28:
#line 171 "src/vcf/vcf_v43.ragel"
	{
        try {
          ParsePolicy::handle_meta_line(*this);
        } catch (ParsingError ex) {
          ErrorPolicy::handle_meta_section_error(*this, ex.what());
        }
    }
	break;
	case 29:
#line 179 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_sample_name(*this);
    }
	break;
	case 30:
#line 183 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_header_line(*this);
    }
	break;
	case 31:
#line 189 "src/vcf/vcf_v43.ragel"
	{
        ParsePolicy::handle_column_end(*this, n_columns);
    }
	break;
	case 32:
#line 193 "src/vcf/vcf_v43.ragel"
	{
        try {
          // Handle all columns and build record
          ParsePolicy::handle_body_line(*this);
          // Check warnings (non-blocking errors but potential mistakes anyway, only makes sense if the last record parsed was correct)
          OptionalPolicy::optional_check_body_entry(*this, ParsingState::records->back());
        } catch (ParsingError ex) {
          ErrorPolicy::handle_body_section_error(*this, ex.what());
        } catch (ParsingWarning ex) {
          ErrorPolicy::handle_body_section_warning(*this, ex.what());
        }
    }
	break;
	case 33:
#line 210 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_fileformat_section_error(*this,
            "The fileformat declaration is not 'fileformat=VCFv4.3'");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 34:
#line 217 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in ALT metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 35:
#line 222 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "ALT metadata ID is not prefixed by DEL/INS/DUP/INV/CNV and suffixed by ':' and a text sequence");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 36:
#line 228 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in assembly metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 37:
#line 234 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in contig metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 38:
#line 240 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in FILTER metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 39:
#line 246 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in FORMAT metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 40:
#line 251 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "FORMAT metadata Number is not a number, A, R, G or dot");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 41:
#line 262 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in INFO metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 42:
#line 267 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "INFO metadata Number is not a number, A, R, G or dot");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 43:
#line 272 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "INFO metadata Type is not a Integer, Float, Flag, Character or String");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 44:
#line 278 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in PEDIGREE metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 45:
#line 284 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in pedigreeDB metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 46:
#line 290 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in SAMPLE metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 47:
#line 295 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "SAMPLE metadata Genomes is not a valid string (maybe it contains quotes?)");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 48:
#line 300 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "SAMPLE metadata Mixture is not a valid string (maybe it contains quotes?)");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 49:
#line 306 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata ID contains a character different from alphanumeric, dot, underscore and dash");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 50:
#line 311 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata description string is not valid");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 51:
#line 316 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata URL is not valid");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 52:
#line 322 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_header_section_error(*this, "The header line does not start with the mandatory columns: CHROM, POS, ID, REF, ALT, QUAL, FILTER and INFO");
        
        // If an error occurs in the header, meta_section_end won't be triggered and the meta and header optional validations must be run here
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
        
        p--; {cs = 757; goto _again;}
    }
	break;
	case 53:
#line 338 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Chromosome is not a string without colons or whitespaces, optionally wrapped with angle brackets (<>)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 54:
#line 344 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Position is not a positive number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 55:
#line 350 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "ID is not a single dot or a list of strings without semicolons or whitespaces");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 56:
#line 356 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Reference is not a string of bases");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 57:
#line 362 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Alternate is not a single dot or a comma-separated list of bases");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 58:
#line 368 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Quality is not a single dot or a positive number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 59:
#line 374 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Filter is not a single dot or a semicolon-separated list of strings");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 60:
#line 380 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info is not a single dot or a semicolon-separated list of key-value pairs");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 61:
#line 385 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info key is not a sequence of alphanumeric and/or punctuation characters");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 62:
#line 390 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info field value is not a comma-separated list of valid strings (maybe it contains whitespaces?)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 63:
#line 395 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AA value is not a single dot or a string of bases");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 64:
#line 400 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AC value is not a comma-separated list of numbers");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 65:
#line 405 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AD value is not a comma-separated list of numbers");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 66:
#line 410 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info ADF value is not a comma-separated list of numbers");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 67:
#line 415 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info ADR value is not a comma-separated list of numbers");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 68:
#line 420 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AF value is not a comma-separated list of numbers");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 69:
#line 425 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AN value is not an integer number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 70:
#line 430 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info BQ value is not a number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 71:
#line 435 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info CIGAR value is not an alphanumeric string");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 72:
#line 440 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info DB is not a flag (with 1/0/no value)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 73:
#line 445 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info DP value is not an integer number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 74:
#line 450 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info END value is not an integer number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 75:
#line 455 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info H2 is not a flag (with 1/0/no value)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 76:
#line 460 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info H3 is not a flag (with 1/0/no value)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 77:
#line 465 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info MQ value is not a number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 78:
#line 470 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info MQ0 value is not an integer number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 79:
#line 475 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info NS value is not an integer number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 80:
#line 480 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info SB value is not a number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 81:
#line 485 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info SOMATIC is not a flag (with 1/0/no value)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 82:
#line 490 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info VALIDATED is not a flag (with 1/0/no value)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 83:
#line 495 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info 1000G is not a flag (with 1/0/no value)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 84:
#line 501 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Format is not a colon-separated list of alphanumeric strings");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 85:
#line 507 "src/vcf/vcf_v43.ragel"
	{
        std::ostringstream message_stream;
        message_stream << "Sample #" << (n_columns - 9) << " is not a valid string";
        ErrorPolicy::handle_body_section_error(*this, message_stream.str());
        p--; {cs = 757; goto _again;}
    }
	break;
	case 86:
#line 514 "src/vcf/vcf_v43.ragel"
	{
        std::ostringstream message_stream;
        message_stream << "Sample #" << (n_columns - 9) << " does not start with a valid genotype";
        ErrorPolicy::handle_body_section_error(*this, message_stream.str());
        p--; {cs = 757; goto _again;}
    }
	break;
	case 87:
#line 769 "src/vcf/vcf_v43.ragel"
	{ {cs = 28; goto _again;} }
	break;
	case 88:
#line 770 "src/vcf/vcf_v43.ragel"
	{ {cs = 759; goto _again;} }
	break;
#line 2660 "inc/vcf/validator_detail_v43.hpp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _vcf_v43_actions + _vcf_v43_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 5:
#line 60 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_fileformat_section_error(*this);
        p--; {cs = 756; goto _again;}
    }
	break;
	case 6:
#line 65 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this);
        p--; {cs = 756; goto _again;}
    }
	break;
	case 7:
#line 70 "src/vcf/vcf_v43.ragel"
	{
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
    }
	break;
	case 8:
#line 78 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_header_section_error(*this);
        
        // If an error occurs in the header, meta_section_end won't be triggered and the meta and header optional validations must be run here
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
        
        p--; {cs = 757; goto _again;}
    }
	break;
	case 9:
#line 91 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this);
        p--; {cs = 757; goto _again;}
    }
	break;
	case 33:
#line 210 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_fileformat_section_error(*this,
            "The fileformat declaration is not 'fileformat=VCFv4.3'");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 34:
#line 217 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in ALT metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 35:
#line 222 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "ALT metadata ID is not prefixed by DEL/INS/DUP/INV/CNV and suffixed by ':' and a text sequence");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 36:
#line 228 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in assembly metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 37:
#line 234 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in contig metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 38:
#line 240 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in FILTER metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 39:
#line 246 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in FORMAT metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 40:
#line 251 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "FORMAT metadata Number is not a number, A, R, G or dot");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 41:
#line 262 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in INFO metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 42:
#line 267 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "INFO metadata Number is not a number, A, R, G or dot");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 43:
#line 272 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "INFO metadata Type is not a Integer, Float, Flag, Character or String");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 44:
#line 278 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in PEDIGREE metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 45:
#line 284 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in pedigreeDB metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 46:
#line 290 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in SAMPLE metadata");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 47:
#line 295 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "SAMPLE metadata Genomes is not a valid string (maybe it contains quotes?)");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 48:
#line 300 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "SAMPLE metadata Mixture is not a valid string (maybe it contains quotes?)");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 49:
#line 306 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata ID contains a character different from alphanumeric, dot, underscore and dash");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 50:
#line 311 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata description string is not valid");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 51:
#line 316 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata URL is not valid");
        p--; {cs = 756; goto _again;}
    }
	break;
	case 52:
#line 322 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_header_section_error(*this, "The header line does not start with the mandatory columns: CHROM, POS, ID, REF, ALT, QUAL, FILTER and INFO");
        
        // If an error occurs in the header, meta_section_end won't be triggered and the meta and header optional validations must be run here
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
        
        p--; {cs = 757; goto _again;}
    }
	break;
	case 53:
#line 338 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Chromosome is not a string without colons or whitespaces, optionally wrapped with angle brackets (<>)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 54:
#line 344 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Position is not a positive number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 55:
#line 350 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "ID is not a single dot or a list of strings without semicolons or whitespaces");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 56:
#line 356 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Reference is not a string of bases");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 57:
#line 362 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Alternate is not a single dot or a comma-separated list of bases");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 58:
#line 368 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Quality is not a single dot or a positive number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 59:
#line 374 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Filter is not a single dot or a semicolon-separated list of strings");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 60:
#line 380 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info is not a single dot or a semicolon-separated list of key-value pairs");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 61:
#line 385 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info key is not a sequence of alphanumeric and/or punctuation characters");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 62:
#line 390 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info field value is not a comma-separated list of valid strings (maybe it contains whitespaces?)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 63:
#line 395 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AA value is not a single dot or a string of bases");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 64:
#line 400 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AC value is not a comma-separated list of numbers");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 65:
#line 405 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AD value is not a comma-separated list of numbers");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 66:
#line 410 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info ADF value is not a comma-separated list of numbers");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 67:
#line 415 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info ADR value is not a comma-separated list of numbers");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 68:
#line 420 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AF value is not a comma-separated list of numbers");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 69:
#line 425 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AN value is not an integer number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 70:
#line 430 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info BQ value is not a number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 71:
#line 435 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info CIGAR value is not an alphanumeric string");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 72:
#line 440 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info DB is not a flag (with 1/0/no value)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 73:
#line 445 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info DP value is not an integer number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 74:
#line 450 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info END value is not an integer number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 75:
#line 455 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info H2 is not a flag (with 1/0/no value)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 76:
#line 460 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info H3 is not a flag (with 1/0/no value)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 77:
#line 465 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info MQ value is not a number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 78:
#line 470 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info MQ0 value is not an integer number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 79:
#line 475 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info NS value is not an integer number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 80:
#line 480 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info SB value is not a number");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 81:
#line 485 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info SOMATIC is not a flag (with 1/0/no value)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 82:
#line 490 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info VALIDATED is not a flag (with 1/0/no value)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 83:
#line 495 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info 1000G is not a flag (with 1/0/no value)");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 84:
#line 501 "src/vcf/vcf_v43.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Format is not a colon-separated list of alphanumeric strings");
        p--; {cs = 757; goto _again;}
    }
	break;
	case 85:
#line 507 "src/vcf/vcf_v43.ragel"
	{
        std::ostringstream message_stream;
        message_stream << "Sample #" << (n_columns - 9) << " is not a valid string";
        ErrorPolicy::handle_body_section_error(*this, message_stream.str());
        p--; {cs = 757; goto _again;}
    }
	break;
	case 86:
#line 514 "src/vcf/vcf_v43.ragel"
	{
        std::ostringstream message_stream;
        message_stream << "Sample #" << (n_columns - 9) << " does not start with a valid genotype";
        ErrorPolicy::handle_body_section_error(*this, message_stream.str());
        p--; {cs = 757; goto _again;}
    }
	break;
#line 3113 "inc/vcf/validator_detail_v43.hpp"
		}
	}
	}

	_out: {}
	}

#line 836 "src/vcf/vcf_v43.ragel"

    }
    
  }
}
