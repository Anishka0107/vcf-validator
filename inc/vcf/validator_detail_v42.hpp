
#line 1 "src/vcf/vcf_v42.ragel"
/**
 * Copyright 2014-2015 EMBL - European Bioinformatics Institute
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <cstdio>

#include "vcf/validator.hpp"


#line 742 "src/vcf/vcf_v42.ragel"


namespace
{
  
#line 31 "inc/vcf/validator_detail_v42.hpp"
static const char _vcf_v42_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 23, 1, 26, 1, 27, 1, 
	29, 2, 0, 1, 2, 0, 2, 2, 
	1, 0, 2, 1, 2, 2, 1, 27, 
	2, 2, 1, 2, 3, 84, 2, 3, 
	85, 2, 10, 3, 2, 20, 0, 2, 
	27, 1, 2, 28, 3, 2, 30, 3, 
	2, 31, 4, 2, 33, 5, 2, 34, 
	6, 2, 36, 6, 2, 37, 6, 2, 
	38, 6, 2, 39, 6, 2, 41, 6, 
	2, 44, 6, 2, 45, 6, 2, 46, 
	6, 2, 52, 8, 2, 53, 9, 2, 
	54, 9, 2, 55, 9, 2, 56, 9, 
	2, 57, 9, 2, 58, 9, 2, 59, 
	9, 2, 81, 9, 2, 82, 9, 3, 
	2, 28, 3, 3, 2, 31, 4, 3, 
	6, 52, 8, 3, 7, 0, 1, 3, 
	8, 53, 9, 3, 20, 0, 1, 3, 
	21, 0, 1, 3, 22, 0, 1, 3, 
	24, 0, 1, 3, 25, 0, 1, 3, 
	29, 30, 3, 3, 35, 34, 6, 3, 
	38, 39, 6, 3, 40, 39, 6, 3, 
	42, 41, 6, 3, 43, 39, 6, 3, 
	43, 41, 6, 3, 47, 46, 6, 3, 
	48, 46, 6, 3, 49, 34, 6, 3, 
	49, 37, 6, 3, 49, 38, 6, 3, 
	49, 39, 6, 3, 49, 41, 6, 3, 
	49, 44, 6, 3, 49, 46, 6, 3, 
	50, 34, 6, 3, 50, 38, 6, 3, 
	50, 39, 6, 3, 50, 41, 6, 3, 
	50, 46, 6, 3, 51, 36, 6, 3, 
	51, 45, 6, 3, 61, 60, 9, 3, 
	62, 60, 9, 3, 63, 60, 9, 3, 
	64, 60, 9, 3, 65, 60, 9, 3, 
	66, 60, 9, 3, 67, 60, 9, 3, 
	68, 60, 9, 3, 69, 60, 9, 3, 
	70, 60, 9, 3, 71, 60, 9, 3, 
	72, 60, 9, 3, 73, 60, 9, 3, 
	74, 60, 9, 3, 75, 60, 9, 3, 
	76, 60, 9, 3, 77, 60, 9, 3, 
	78, 60, 9, 3, 79, 60, 9, 3, 
	80, 60, 9, 3, 83, 82, 9, 4, 
	2, 31, 32, 3, 4, 5, 6, 52, 
	8, 4, 47, 48, 46, 6, 4, 48, 
	50, 46, 6, 4, 49, 47, 46, 6, 
	4, 49, 50, 34, 6, 4, 49, 50, 
	38, 6, 4, 49, 50, 39, 6, 4, 
	49, 50, 41, 6, 4, 50, 49, 34, 
	6, 4, 50, 49, 38, 6, 4, 50, 
	49, 39, 6, 4, 50, 49, 41, 6, 
	4, 69, 61, 60, 9, 4, 72, 61, 
	60, 9, 4, 73, 61, 60, 9, 4, 
	78, 61, 60, 9, 4, 79, 61, 60, 
	9, 4, 80, 61, 60, 9, 10, 34, 
	38, 39, 41, 36, 37, 46, 44, 45, 
	6
};

static const short _vcf_v42_key_offsets[] = {
	0, 0, 1, 2, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 20, 21, 22, 
	24, 36, 39, 43, 46, 47, 51, 55, 
	56, 60, 65, 75, 79, 83, 84, 88, 
	93, 98, 107, 117, 124, 130, 139, 148, 
	158, 165, 169, 173, 175, 179, 185, 205, 
	225, 244, 250, 256, 261, 267, 273, 277, 
	281, 285, 291, 311, 331, 350, 356, 362, 
	367, 373, 377, 381, 384, 385, 386, 387, 
	388, 396, 404, 405, 406, 407, 408, 409, 
	410, 411, 412, 413, 414, 415, 416, 417, 
	421, 425, 427, 436, 445, 455, 456, 460, 
	464, 468, 474, 494, 514, 533, 537, 543, 
	548, 549, 553, 559, 579, 599, 618, 622, 
	627, 635, 640, 644, 648, 652, 656, 659, 
	660, 661, 662, 663, 672, 681, 691, 692, 
	693, 694, 695, 696, 697, 698, 699, 700, 
	701, 702, 703, 704, 708, 712, 714, 723, 
	732, 742, 743, 747, 751, 755, 761, 781, 
	801, 820, 824, 830, 835, 836, 840, 846, 
	866, 886, 905, 909, 914, 918, 922, 926, 
	930, 933, 934, 935, 936, 937, 946, 955, 
	965, 966, 967, 968, 969, 970, 971, 972, 
	978, 979, 980, 981, 982, 983, 984, 988, 
	993, 994, 995, 996, 997, 998, 999, 1000, 
	1001, 1002, 1003, 1004, 1005, 1006, 1010, 1014, 
	1016, 1025, 1034, 1044, 1045, 1049, 1053, 1057, 
	1063, 1083, 1103, 1122, 1126, 1132, 1137, 1138, 
	1142, 1148, 1168, 1188, 1207, 1211, 1216, 1219, 
	1223, 1227, 1231, 1234, 1235, 1236, 1237, 1238, 
	1247, 1256, 1266, 1267, 1268, 1269, 1270, 1271, 
	1272, 1273, 1279, 1280, 1281, 1282, 1283, 1284, 
	1285, 1289, 1294, 1295, 1296, 1297, 1298, 1299, 
	1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 
	1311, 1315, 1317, 1326, 1335, 1345, 1346, 1350, 
	1354, 1358, 1364, 1384, 1404, 1423, 1427, 1433, 
	1438, 1439, 1443, 1449, 1469, 1489, 1508, 1512, 
	1517, 1520, 1524, 1528, 1532, 1536, 1540, 1544, 
	1548, 1551, 1552, 1561, 1570, 1580, 1589, 1598, 
	1609, 1610, 1614, 1618, 1622, 1626, 1630, 1633, 
	1634, 1635, 1636, 1637, 1646, 1655, 1665, 1666, 
	1667, 1668, 1669, 1670, 1671, 1672, 1673, 1681, 
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 
	1696, 1704, 1711, 1712, 1713, 1714, 1715, 1716, 
	1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 
	1728, 1732, 1733, 1734, 1738, 1743, 1748, 1752, 
	1756, 1760, 1764, 1768, 1772, 1776, 1779, 1783, 
	1788, 1793, 1794, 1795, 1799, 1800, 1804, 1808, 
	1812, 1816, 1820, 1823, 1824, 1825, 1826, 1827, 
	1833, 1850, 1868, 1875, 1884, 1893, 1903, 1910, 
	1916, 1917, 1921, 1925, 1927, 1931, 1937, 1957, 
	1977, 1996, 2002, 2008, 2013, 2019, 2025, 2029, 
	2033, 2037, 2041, 2045, 2049, 2053, 2057, 2061, 
	2064, 2065, 2069, 2074, 2079, 2080, 2081, 2085, 
	2087, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 
	2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 
	2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 
	2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 
	2120, 2121, 2122, 2123, 2124, 2125, 2127, 2128, 
	2129, 2130, 2131, 2132, 2133, 2134, 2136, 2140, 
	2157, 2161, 2163, 2166, 2170, 2174, 2184, 2195, 
	2210, 2212, 2219, 2223, 2225, 2230, 2246, 2261, 
	2265, 2293, 2309, 2315, 2320, 2330, 2333, 2338, 
	2344, 2360, 2376, 2382, 2383, 2386, 2393, 2397, 
	2402, 2429, 2436, 2443, 2450, 2457, 2461, 2466, 
	2472, 2474, 2477, 2487, 2492, 2504, 2507, 2520, 
	2525, 2529, 2531, 2537, 2542, 2549, 2553, 2555, 
	2563, 2567, 2569, 2575, 2584, 2585, 2586, 2590, 
	2591, 2592, 2597, 2601, 2603, 2608, 2615, 2620, 
	2627, 2631, 2633, 2640, 2644, 2646, 2651, 2659, 
	2660, 2661, 2664, 2665, 2666, 2673, 2680, 2687, 
	2694, 2699, 2705, 2714, 2722, 2728, 2730, 2733, 
	2738, 2742, 2744, 2749, 2756, 2763, 2768, 2772, 
	2774, 2779, 2787, 2793, 2795, 2798, 2804, 2806, 
	2809, 2816, 2822, 2827, 2831, 2833, 2838, 2845, 
	2849, 2851, 2858, 2862, 2864, 2869, 2877, 2878, 
	2879, 2882, 2883, 2884, 2891, 2896, 2900, 2902, 
	2907, 2915, 2920, 2927, 2931, 2933, 2940, 2944, 
	2946, 2951, 2959, 2960, 2961, 2964, 2965, 2966, 
	2973, 2980, 2987, 2994, 3001, 3007, 3009, 3012, 
	3019, 3026, 3033, 3040, 3047, 3054, 3061, 3068, 
	3074, 3076, 3079, 3097, 3112, 3128, 3132, 3134, 
	3137, 3143, 3144, 3145, 3146, 3149, 3150, 3151, 
	3166, 3176, 3188, 3196, 3204, 3219, 3226, 3243, 
	3259, 3265, 3269, 3271, 3274, 3280, 3296, 3312, 
	3318, 3319, 3326, 3343, 3359, 3365, 3369, 3371, 
	3374, 3380, 3396, 3412, 3418, 3419, 3426, 3443, 
	3459, 3465, 3469, 3471, 3474, 3480, 3496, 3512, 
	3518, 3519, 3526, 3543, 3559, 3565, 3569, 3571, 
	3574, 3580, 3596, 3612, 3618, 3619, 3630, 3646, 
	3653, 3654, 3655, 3662, 3669, 3669
};

static const char _vcf_v42_trans_keys[] = {
	35, 35, 102, 105, 108, 101, 102, 111, 
	114, 109, 97, 116, 61, 86, 67, 70, 
	118, 52, 46, 50, 10, 35, 35, 67, 
	65, 70, 73, 80, 83, 97, 99, 112, 
	32, 60, 62, 126, 61, 32, 126, 34, 
	60, 32, 126, 10, 32, 126, 35, 34, 
	92, 32, 126, 34, 92, 32, 126, 10, 
	34, 92, 32, 126, 10, 34, 92, 32, 
	126, 34, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 34, 92, 32, 126, 34, 
	92, 32, 126, 62, 34, 92, 32, 126, 
	34, 62, 92, 32, 126, 10, 34, 92, 
	32, 126, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 61, 95, 45, 46, 48, 
	57, 65, 90, 97, 122, 34, 32, 43, 
	45, 61, 63, 126, 44, 62, 32, 33, 
	35, 126, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 61, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 34, 32, 
	43, 45, 61, 63, 126, 34, 92, 32, 
	126, 34, 92, 32, 126, 44, 62, 34, 
	92, 32, 126, 34, 44, 62, 92, 32, 
	126, 34, 47, 92, 95, 32, 44, 45, 
	46, 48, 57, 58, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 34, 47, 92, 
	95, 32, 44, 45, 46, 48, 57, 58, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 34, 47, 61, 92, 95, 32, 44, 
	45, 57, 58, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 34, 44, 62, 92, 
	32, 126, 34, 44, 62, 92, 32, 126, 
	10, 34, 92, 32, 126, 34, 44, 62, 
	92, 32, 126, 34, 44, 62, 92, 32, 
	126, 34, 92, 32, 126, 34, 92, 32, 
	126, 34, 92, 32, 126, 34, 44, 62, 
	92, 32, 126, 34, 47, 92, 95, 32, 
	44, 45, 46, 48, 57, 58, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 34, 
	47, 92, 95, 32, 44, 45, 46, 48, 
	57, 58, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 34, 47, 61, 92, 95, 
	32, 44, 45, 57, 58, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 34, 44, 
	62, 92, 32, 126, 34, 44, 62, 92, 
	32, 126, 10, 34, 92, 32, 126, 34, 
	44, 62, 92, 32, 126, 61, 76, 32, 
	126, 61, 84, 32, 126, 61, 32, 126, 
	60, 73, 68, 61, 58, 95, 48, 57, 
	65, 90, 97, 122, 44, 95, 48, 58, 
	65, 90, 97, 122, 68, 101, 115, 99, 
	114, 105, 112, 116, 105, 111, 110, 61, 
	34, 34, 92, 32, 126, 34, 92, 32, 
	126, 44, 62, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 95, 45, 46, 48, 
	57, 65, 90, 97, 122, 61, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 34, 
	34, 92, 32, 126, 34, 92, 32, 126, 
	34, 92, 32, 126, 34, 44, 62, 92, 
	32, 126, 34, 47, 92, 95, 32, 44, 
	45, 46, 48, 57, 58, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 34, 47, 
	92, 95, 32, 44, 45, 46, 48, 57, 
	58, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 34, 47, 61, 92, 95, 32, 
	44, 45, 57, 58, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 34, 92, 32, 
	126, 34, 44, 62, 92, 32, 126, 10, 
	34, 92, 32, 126, 10, 34, 92, 32, 
	126, 34, 44, 62, 92, 32, 126, 34, 
	47, 92, 95, 32, 44, 45, 46, 48, 
	57, 58, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 34, 47, 92, 95, 32, 
	44, 45, 46, 48, 57, 58, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 34, 
	47, 61, 92, 95, 32, 44, 45, 57, 
	58, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 34, 92, 32, 126, 10, 34, 
	92, 32, 126, 58, 95, 48, 57, 65, 
	90, 97, 122, 61, 73, 79, 32, 126, 
	61, 76, 32, 126, 61, 84, 32, 126, 
	61, 69, 32, 126, 61, 82, 32, 126, 
	61, 32, 126, 60, 73, 68, 61, 95, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 44, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 68, 101, 115, 99, 114, 
	105, 112, 116, 105, 111, 110, 61, 34, 
	34, 92, 32, 126, 34, 92, 32, 126, 
	44, 62, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 61, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 34, 34, 
	92, 32, 126, 34, 92, 32, 126, 34, 
	92, 32, 126, 34, 44, 62, 92, 32, 
	126, 34, 47, 92, 95, 32, 44, 45, 
	46, 48, 57, 58, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 34, 47, 92, 
	95, 32, 44, 45, 46, 48, 57, 58, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 34, 47, 61, 92, 95, 32, 44, 
	45, 57, 58, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 34, 92, 32, 126, 
	34, 44, 62, 92, 32, 126, 10, 34, 
	92, 32, 126, 10, 34, 92, 32, 126, 
	34, 44, 62, 92, 32, 126, 34, 47, 
	92, 95, 32, 44, 45, 46, 48, 57, 
	58, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 34, 47, 92, 95, 32, 44, 
	45, 46, 48, 57, 58, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 34, 47, 
	61, 92, 95, 32, 44, 45, 57, 58, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 34, 92, 32, 126, 10, 34, 92, 
	32, 126, 61, 82, 32, 126, 61, 77, 
	32, 126, 61, 65, 32, 126, 61, 84, 
	32, 126, 61, 32, 126, 60, 73, 68, 
	61, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 44, 95, 45, 46, 48, 
	57, 65, 90, 97, 122, 78, 117, 109, 
	98, 101, 114, 61, 46, 65, 71, 82, 
	48, 57, 44, 84, 121, 112, 101, 61, 
	65, 90, 97, 122, 44, 65, 90, 97, 
	122, 68, 101, 115, 99, 114, 105, 112, 
	116, 105, 111, 110, 61, 34, 34, 92, 
	32, 126, 34, 92, 32, 126, 44, 62, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 61, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 34, 34, 92, 32, 
	126, 34, 92, 32, 126, 34, 92, 32, 
	126, 34, 44, 62, 92, 32, 126, 34, 
	47, 92, 95, 32, 44, 45, 46, 48, 
	57, 58, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 34, 47, 92, 95, 32, 
	44, 45, 46, 48, 57, 58, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 34, 
	47, 61, 92, 95, 32, 44, 45, 57, 
	58, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 34, 92, 32, 126, 34, 44, 
	62, 92, 32, 126, 10, 34, 92, 32, 
	126, 10, 34, 92, 32, 126, 34, 44, 
	62, 92, 32, 126, 34, 47, 92, 95, 
	32, 44, 45, 46, 48, 57, 58, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	34, 47, 92, 95, 32, 44, 45, 46, 
	48, 57, 58, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 34, 47, 61, 92, 
	95, 32, 44, 45, 57, 58, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 34, 
	92, 32, 126, 10, 34, 92, 32, 126, 
	44, 48, 57, 61, 78, 32, 126, 61, 
	70, 32, 126, 61, 79, 32, 126, 61, 
	32, 126, 60, 73, 68, 61, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 95, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	44, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 78, 117, 109, 98, 101, 114, 
	61, 46, 65, 71, 82, 48, 57, 44, 
	84, 121, 112, 101, 61, 65, 90, 97, 
	122, 44, 65, 90, 97, 122, 68, 101, 
	115, 99, 114, 105, 112, 116, 105, 111, 
	110, 61, 34, 34, 92, 32, 126, 34, 
	92, 32, 126, 44, 62, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 61, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 34, 34, 92, 32, 126, 34, 92, 
	32, 126, 34, 92, 32, 126, 34, 44, 
	62, 92, 32, 126, 34, 47, 92, 95, 
	32, 44, 45, 46, 48, 57, 58, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	34, 47, 92, 95, 32, 44, 45, 46, 
	48, 57, 58, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 34, 47, 61, 92, 
	95, 32, 44, 45, 57, 58, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 34, 
	92, 32, 126, 34, 44, 62, 92, 32, 
	126, 10, 34, 92, 32, 126, 10, 34, 
	92, 32, 126, 34, 44, 62, 92, 32, 
	126, 34, 47, 92, 95, 32, 44, 45, 
	46, 48, 57, 58, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 34, 47, 92, 
	95, 32, 44, 45, 46, 48, 57, 58, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 34, 47, 61, 92, 95, 32, 44, 
	45, 57, 58, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 34, 92, 32, 126, 
	10, 34, 92, 32, 126, 44, 48, 57, 
	61, 69, 32, 126, 61, 68, 32, 126, 
	61, 73, 32, 126, 61, 71, 32, 126, 
	61, 82, 32, 126, 61, 69, 32, 126, 
	61, 69, 32, 126, 61, 32, 126, 60, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 61, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 95, 45, 46, 48, 
	57, 65, 90, 97, 122, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 44, 62, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 10, 61, 65, 32, 126, 61, 77, 
	32, 126, 61, 80, 32, 126, 61, 76, 
	32, 126, 61, 69, 32, 126, 61, 32, 
	126, 60, 73, 68, 61, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 44, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 71, 101, 110, 111, 109, 101, 115, 
	61, 32, 33, 35, 43, 45, 61, 63, 
	126, 44, 32, 33, 35, 61, 63, 126, 
	77, 105, 120, 116, 117, 114, 101, 61, 
	32, 33, 35, 43, 45, 61, 63, 126, 
	44, 32, 33, 35, 61, 63, 126, 68, 
	101, 115, 99, 114, 105, 112, 116, 105, 
	111, 110, 61, 34, 34, 92, 32, 126, 
	34, 92, 32, 126, 62, 10, 34, 92, 
	32, 126, 34, 62, 92, 32, 126, 10, 
	34, 92, 32, 126, 61, 115, 32, 126, 
	61, 115, 32, 126, 61, 101, 32, 126, 
	61, 109, 32, 126, 61, 98, 32, 126, 
	61, 108, 32, 126, 61, 121, 32, 126, 
	61, 32, 126, 65, 90, 97, 122, 10, 
	35, 47, 58, 63, 10, 35, 47, 58, 
	63, 47, 47, 65, 90, 97, 122, 10, 
	61, 111, 32, 126, 61, 110, 32, 126, 
	61, 116, 32, 126, 61, 105, 32, 126, 
	61, 103, 32, 126, 61, 32, 126, 60, 
	73, 68, 61, 48, 57, 65, 90, 97, 
	122, 44, 59, 62, 33, 47, 48, 57, 
	61, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 59, 61, 33, 43, 45, 47, 
	48, 57, 63, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 44, 59, 62, 33, 
	57, 61, 126, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 95, 45, 46, 48, 
	57, 65, 90, 97, 122, 61, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 34, 
	32, 43, 45, 61, 63, 126, 44, 62, 
	32, 33, 35, 126, 10, 34, 92, 32, 
	126, 34, 92, 32, 126, 44, 62, 34, 
	92, 32, 126, 34, 44, 62, 92, 32, 
	126, 34, 47, 92, 95, 32, 44, 45, 
	46, 48, 57, 58, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 34, 47, 92, 
	95, 32, 44, 45, 46, 48, 57, 58, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 34, 47, 61, 92, 95, 32, 44, 
	45, 57, 58, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 34, 44, 62, 92, 
	32, 126, 34, 44, 62, 92, 32, 126, 
	10, 34, 92, 32, 126, 34, 44, 62, 
	92, 32, 126, 34, 44, 62, 92, 32, 
	126, 61, 101, 32, 126, 61, 100, 32, 
	126, 61, 105, 32, 126, 61, 103, 32, 
	126, 61, 114, 32, 126, 61, 101, 32, 
	126, 61, 101, 32, 126, 61, 68, 32, 
	126, 61, 66, 32, 126, 61, 32, 126, 
	60, 65, 90, 97, 122, 10, 35, 47, 
	58, 63, 10, 35, 47, 58, 63, 47, 
	47, 65, 90, 97, 122, 10, 62, 10, 
	62, 72, 82, 79, 77, 9, 80, 79, 
	83, 9, 73, 68, 9, 82, 69, 70, 
	9, 65, 76, 84, 9, 81, 85, 65, 
	76, 9, 70, 73, 76, 84, 69, 82, 
	9, 73, 78, 70, 79, 9, 10, 70, 
	79, 82, 77, 65, 84, 9, 32, 126, 
	9, 10, 32, 126, 9, 59, 61, 33, 
	47, 48, 57, 63, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 43, 45, 48, 
	57, 48, 57, 9, 48, 57, 33, 58, 
	60, 126, 9, 59, 33, 126, 65, 67, 
	71, 78, 84, 97, 99, 103, 110, 116, 
	9, 65, 67, 71, 78, 84, 97, 99, 
	103, 110, 116, 42, 46, 60, 65, 67, 
	71, 78, 84, 91, 93, 97, 99, 103, 
	110, 116, 9, 44, 43, 45, 46, 73, 
	78, 48, 57, 46, 73, 48, 57, 48, 
	57, 9, 69, 101, 48, 57, 46, 58, 
	33, 47, 48, 57, 60, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 58, 33, 
	47, 48, 57, 60, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 9, 59, 33, 
	126, 46, 49, 58, 60, 65, 66, 67, 
	68, 69, 72, 77, 78, 83, 86, 33, 
	47, 48, 57, 62, 64, 70, 90, 91, 
	96, 97, 122, 123, 126, 58, 60, 33, 
	47, 48, 57, 62, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 9, 10, 59, 
	61, 33, 126, 95, 65, 90, 97, 122, 
	9, 46, 58, 95, 48, 57, 65, 90, 
	97, 122, 46, 48, 57, 9, 10, 47, 
	58, 124, 48, 57, 65, 90, 97, 122, 
	59, 62, 33, 47, 48, 57, 61, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	59, 61, 33, 47, 48, 57, 63, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	59, 62, 33, 57, 61, 126, 9, 46, 
	48, 57, 9, 10, 47, 58, 124, 48, 
	57, 33, 57, 59, 126, 9, 10, 58, 
	33, 126, 49, 58, 60, 65, 66, 67, 
	68, 69, 72, 77, 78, 83, 86, 33, 
	47, 48, 57, 62, 64, 70, 90, 91, 
	96, 97, 122, 123, 126, 9, 10, 48, 
	59, 61, 33, 126, 9, 10, 48, 59, 
	61, 33, 126, 9, 10, 48, 59, 61, 
	33, 126, 9, 10, 59, 61, 71, 33, 
	126, 33, 58, 60, 126, 9, 10, 59, 
	33, 126, 9, 10, 59, 61, 33, 126, 
	48, 49, 9, 10, 59, 9, 10, 59, 
	61, 65, 67, 70, 78, 33, 126, 61, 
	33, 58, 60, 126, 65, 67, 71, 78, 
	84, 97, 99, 103, 110, 116, 45, 46, 
	9, 10, 59, 9, 10, 59, 65, 67, 
	71, 78, 84, 97, 99, 103, 110, 116, 
	61, 33, 58, 60, 126, 43, 45, 48, 
	57, 48, 57, 9, 10, 44, 59, 48, 
	57, 61, 33, 58, 60, 126, 43, 45, 
	46, 73, 78, 48, 57, 46, 73, 48, 
	57, 48, 57, 9, 10, 44, 59, 69, 
	101, 48, 57, 43, 45, 48, 57, 48, 
	57, 9, 10, 44, 59, 48, 57, 9, 
	10, 44, 46, 59, 69, 101, 48, 57, 
	110, 102, 9, 10, 44, 59, 97, 78, 
	61, 33, 58, 60, 126, 43, 45, 48, 
	57, 48, 57, 9, 10, 59, 48, 57, 
	9, 10, 59, 61, 81, 33, 126, 61, 
	33, 58, 60, 126, 43, 45, 46, 73, 
	78, 48, 57, 46, 73, 48, 57, 48, 
	57, 9, 10, 59, 69, 101, 48, 57, 
	43, 45, 48, 57, 48, 57, 9, 10, 
	59, 48, 57, 9, 10, 46, 59, 69, 
	101, 48, 57, 110, 102, 9, 10, 59, 
	97, 78, 9, 10, 59, 61, 73, 33, 
	126, 9, 10, 59, 61, 71, 33, 126, 
	9, 10, 59, 61, 65, 33, 126, 9, 
	10, 59, 61, 82, 33, 126, 61, 33, 
	58, 60, 126, 48, 57, 65, 90, 97, 
	122, 9, 10, 59, 48, 57, 65, 90, 
	97, 122, 9, 10, 59, 61, 66, 80, 
	33, 126, 9, 10, 59, 61, 33, 126, 
	48, 49, 9, 10, 59, 61, 33, 58, 
	60, 126, 43, 45, 48, 57, 48, 57, 
	9, 10, 59, 48, 57, 9, 10, 59, 
	61, 78, 33, 126, 9, 10, 59, 61, 
	68, 33, 126, 61, 33, 58, 60, 126, 
	43, 45, 48, 57, 48, 57, 9, 10, 
	59, 48, 57, 9, 10, 50, 51, 59, 
	61, 33, 126, 9, 10, 59, 61, 33, 
	126, 48, 49, 9, 10, 59, 9, 10, 
	59, 61, 33, 126, 48, 49, 9, 10, 
	59, 9, 10, 59, 61, 81, 33, 126, 
	48, 61, 33, 58, 60, 126, 61, 33, 
	58, 60, 126, 43, 45, 48, 57, 48, 
	57, 9, 10, 59, 48, 57, 43, 45, 
	46, 73, 78, 48, 57, 46, 73, 48, 
	57, 48, 57, 9, 10, 59, 69, 101, 
	48, 57, 43, 45, 48, 57, 48, 57, 
	9, 10, 59, 48, 57, 9, 10, 46, 
	59, 69, 101, 48, 57, 110, 102, 9, 
	10, 59, 97, 78, 9, 10, 59, 61, 
	83, 33, 126, 61, 33, 58, 60, 126, 
	43, 45, 48, 57, 48, 57, 9, 10, 
	59, 48, 57, 9, 10, 59, 61, 66, 
	79, 33, 126, 61, 33, 58, 60, 126, 
	43, 45, 46, 73, 78, 48, 57, 46, 
	73, 48, 57, 48, 57, 9, 10, 59, 
	69, 101, 48, 57, 43, 45, 48, 57, 
	48, 57, 9, 10, 59, 48, 57, 9, 
	10, 46, 59, 69, 101, 48, 57, 110, 
	102, 9, 10, 59, 97, 78, 9, 10, 
	59, 61, 77, 33, 126, 9, 10, 59, 
	61, 65, 33, 126, 9, 10, 59, 61, 
	84, 33, 126, 9, 10, 59, 61, 73, 
	33, 126, 9, 10, 59, 61, 67, 33, 
	126, 9, 10, 59, 61, 33, 126, 48, 
	49, 9, 10, 59, 9, 10, 59, 61, 
	65, 33, 126, 9, 10, 59, 61, 76, 
	33, 126, 9, 10, 59, 61, 73, 33, 
	126, 9, 10, 59, 61, 68, 33, 126, 
	9, 10, 59, 61, 65, 33, 126, 9, 
	10, 59, 61, 84, 33, 126, 9, 10, 
	59, 61, 69, 33, 126, 9, 10, 59, 
	61, 68, 33, 126, 9, 10, 59, 61, 
	33, 126, 48, 49, 9, 10, 59, 9, 
	10, 58, 60, 33, 47, 48, 57, 62, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 58, 33, 47, 48, 57, 60, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	9, 58, 33, 47, 48, 57, 60, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	43, 45, 48, 57, 48, 57, 9, 48, 
	57, 9, 46, 69, 101, 48, 57, 110, 
	102, 9, 9, 48, 57, 97, 78, 42, 
	46, 60, 65, 67, 71, 78, 84, 91, 
	93, 97, 99, 103, 110, 116, 65, 67, 
	71, 78, 84, 97, 99, 103, 110, 116, 
	9, 44, 65, 67, 71, 78, 84, 97, 
	99, 103, 110, 116, 58, 95, 48, 57, 
	65, 90, 97, 122, 62, 95, 48, 58, 
	65, 90, 97, 122, 9, 44, 46, 65, 
	67, 71, 78, 84, 91, 93, 97, 99, 
	103, 110, 116, 60, 48, 57, 65, 90, 
	97, 122, 58, 59, 61, 33, 47, 48, 
	57, 63, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 59, 61, 33, 47, 48, 
	57, 63, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 58, 61, 33, 59, 63, 
	126, 43, 45, 48, 57, 48, 57, 91, 
	48, 57, 48, 57, 65, 90, 97, 122, 
	59, 62, 33, 47, 48, 57, 61, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	59, 61, 33, 47, 48, 57, 63, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	59, 62, 33, 57, 61, 126, 58, 60, 
	48, 57, 65, 90, 97, 122, 58, 59, 
	61, 33, 47, 48, 57, 63, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 59, 
	61, 33, 47, 48, 57, 63, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 58, 
	61, 33, 59, 63, 126, 43, 45, 48, 
	57, 48, 57, 93, 48, 57, 48, 57, 
	65, 90, 97, 122, 59, 62, 33, 47, 
	48, 57, 61, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 59, 61, 33, 47, 
	48, 57, 63, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 59, 62, 33, 57, 
	61, 126, 58, 60, 48, 57, 65, 90, 
	97, 122, 58, 59, 61, 33, 47, 48, 
	57, 63, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 59, 61, 33, 47, 48, 
	57, 63, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 58, 61, 33, 59, 63, 
	126, 43, 45, 48, 57, 48, 57, 91, 
	48, 57, 48, 57, 65, 90, 97, 122, 
	59, 62, 33, 47, 48, 57, 61, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	59, 61, 33, 47, 48, 57, 63, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	59, 62, 33, 57, 61, 126, 58, 60, 
	48, 57, 65, 90, 97, 122, 58, 59, 
	61, 33, 47, 48, 57, 63, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 59, 
	61, 33, 47, 48, 57, 63, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 58, 
	61, 33, 59, 63, 126, 43, 45, 48, 
	57, 48, 57, 93, 48, 57, 48, 57, 
	65, 90, 97, 122, 59, 62, 33, 47, 
	48, 57, 61, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 59, 61, 33, 47, 
	48, 57, 63, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 59, 62, 33, 57, 
	61, 126, 58, 9, 65, 67, 71, 78, 
	84, 97, 99, 103, 110, 116, 59, 61, 
	33, 47, 48, 57, 63, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 9, 59, 
	61, 33, 57, 63, 126, 10, 10, 60, 
	48, 57, 65, 90, 97, 122, 60, 48, 
	57, 65, 90, 97, 122, 0
};

static const char _vcf_v42_single_lengths[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	8, 1, 2, 1, 1, 2, 2, 1, 
	2, 3, 2, 2, 2, 1, 2, 3, 
	3, 1, 2, 1, 2, 1, 1, 2, 
	1, 2, 2, 2, 2, 4, 4, 4, 
	5, 4, 4, 3, 4, 4, 2, 2, 
	2, 4, 4, 4, 5, 4, 4, 3, 
	4, 2, 2, 1, 1, 1, 1, 1, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 1, 1, 2, 1, 2, 2, 
	2, 4, 4, 4, 5, 2, 4, 3, 
	1, 2, 4, 4, 4, 5, 2, 3, 
	2, 3, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 2, 2, 1, 1, 
	2, 1, 2, 2, 2, 4, 4, 4, 
	5, 2, 4, 3, 1, 2, 4, 4, 
	4, 5, 2, 3, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 4, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 2, 
	1, 1, 2, 1, 2, 2, 2, 4, 
	4, 4, 5, 2, 4, 3, 1, 2, 
	4, 4, 4, 5, 2, 3, 1, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 4, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 1, 1, 2, 1, 2, 2, 
	2, 4, 4, 4, 5, 2, 4, 3, 
	1, 2, 4, 4, 4, 5, 2, 3, 
	1, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 2, 1, 1, 3, 
	1, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 1, 1, 2, 3, 3, 2, 2, 
	2, 2, 2, 2, 2, 1, 0, 5, 
	5, 1, 1, 0, 1, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 0, 
	3, 2, 3, 1, 1, 2, 1, 2, 
	1, 2, 2, 2, 2, 4, 4, 4, 
	5, 4, 4, 3, 4, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 5, 5, 1, 1, 0, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 0, 2, 3, 
	2, 0, 1, 0, 2, 10, 11, 15, 
	2, 5, 2, 0, 3, 2, 1, 2, 
	14, 2, 4, 1, 4, 1, 5, 0, 
	2, 2, 2, 1, 1, 5, 0, 3, 
	13, 5, 5, 5, 5, 0, 3, 4, 
	0, 3, 8, 1, 10, 3, 13, 1, 
	2, 0, 4, 1, 5, 2, 0, 6, 
	2, 0, 4, 7, 1, 1, 4, 1, 
	1, 1, 2, 0, 3, 5, 1, 5, 
	2, 0, 5, 2, 0, 3, 6, 1, 
	1, 3, 1, 1, 5, 5, 5, 5, 
	1, 0, 3, 6, 4, 0, 3, 1, 
	2, 0, 3, 5, 5, 1, 2, 0, 
	3, 6, 4, 0, 3, 4, 0, 3, 
	5, 2, 1, 2, 0, 3, 5, 2, 
	0, 5, 2, 0, 3, 6, 1, 1, 
	3, 1, 1, 5, 1, 2, 0, 3, 
	6, 1, 5, 2, 0, 5, 2, 0, 
	3, 6, 1, 1, 3, 1, 1, 5, 
	5, 5, 5, 5, 4, 0, 3, 5, 
	5, 5, 5, 5, 5, 5, 5, 4, 
	0, 3, 4, 1, 2, 2, 0, 1, 
	4, 1, 1, 1, 1, 1, 1, 15, 
	10, 12, 2, 2, 15, 1, 3, 2, 
	2, 2, 0, 1, 0, 2, 2, 2, 
	1, 1, 3, 2, 2, 2, 0, 1, 
	0, 2, 2, 2, 1, 1, 3, 2, 
	2, 2, 0, 1, 0, 2, 2, 2, 
	1, 1, 3, 2, 2, 2, 0, 1, 
	0, 2, 2, 2, 1, 11, 2, 3, 
	1, 1, 1, 1, 0, 0
};

static const char _vcf_v42_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	2, 1, 1, 1, 0, 1, 1, 0, 
	1, 1, 4, 1, 1, 0, 1, 1, 
	1, 4, 4, 3, 2, 4, 4, 4, 
	3, 1, 1, 0, 1, 1, 8, 8, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 8, 8, 7, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	3, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 4, 4, 4, 0, 1, 1, 
	1, 1, 8, 8, 7, 1, 1, 1, 
	0, 1, 1, 8, 8, 7, 1, 1, 
	3, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 4, 4, 4, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 4, 4, 
	4, 0, 1, 1, 1, 1, 8, 8, 
	7, 1, 1, 1, 0, 1, 1, 8, 
	8, 7, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 4, 4, 4, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 2, 2, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	4, 4, 4, 0, 1, 1, 1, 1, 
	8, 8, 7, 1, 1, 1, 0, 1, 
	1, 8, 8, 7, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 4, 
	4, 4, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	2, 2, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 4, 4, 4, 0, 1, 1, 
	1, 1, 8, 8, 7, 1, 1, 1, 
	0, 1, 1, 8, 8, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 4, 4, 4, 4, 4, 4, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 4, 4, 4, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	4, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 0, 
	0, 0, 0, 2, 0, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 3, 
	7, 8, 2, 4, 4, 4, 3, 2, 
	0, 1, 1, 0, 1, 1, 8, 8, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 2, 0, 0, 0, 0, 2, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 7, 
	1, 1, 1, 2, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 7, 7, 1, 
	7, 7, 1, 2, 3, 1, 0, 3, 
	7, 7, 2, 0, 1, 1, 2, 1, 
	7, 1, 1, 1, 1, 2, 1, 1, 
	1, 0, 1, 2, 1, 0, 0, 2, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 2, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	2, 3, 3, 1, 1, 1, 0, 2, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 0, 1, 1, 0, 
	1, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 7, 7, 7, 1, 1, 1, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 3, 3, 0, 3, 7, 7, 
	2, 1, 1, 1, 3, 7, 7, 2, 
	0, 3, 7, 7, 2, 1, 1, 1, 
	3, 7, 7, 2, 0, 3, 7, 7, 
	2, 1, 1, 1, 3, 7, 7, 2, 
	0, 3, 7, 7, 2, 1, 1, 1, 
	3, 7, 7, 2, 0, 0, 7, 2, 
	0, 0, 3, 3, 0, 0
};

static const short _vcf_v42_index_offsets[] = {
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 22, 24, 26, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	47, 58, 61, 65, 68, 70, 74, 78, 
	80, 84, 89, 96, 100, 104, 106, 110, 
	115, 120, 126, 133, 138, 143, 149, 155, 
	162, 167, 171, 175, 178, 182, 188, 201, 
	214, 227, 233, 239, 244, 250, 256, 260, 
	264, 268, 274, 287, 300, 313, 319, 325, 
	330, 336, 340, 344, 347, 349, 351, 353, 
	355, 361, 367, 369, 371, 373, 375, 377, 
	379, 381, 383, 385, 387, 389, 391, 393, 
	397, 401, 404, 410, 416, 423, 425, 429, 
	433, 437, 443, 456, 469, 482, 486, 492, 
	497, 499, 503, 509, 522, 535, 548, 552, 
	557, 563, 568, 572, 576, 580, 584, 587, 
	589, 591, 593, 595, 601, 607, 614, 616, 
	618, 620, 622, 624, 626, 628, 630, 632, 
	634, 636, 638, 640, 644, 648, 651, 657, 
	663, 670, 672, 676, 680, 684, 690, 703, 
	716, 729, 733, 739, 744, 746, 750, 756, 
	769, 782, 795, 799, 804, 808, 812, 816, 
	820, 823, 825, 827, 829, 831, 837, 843, 
	850, 852, 854, 856, 858, 860, 862, 864, 
	870, 872, 874, 876, 878, 880, 882, 885, 
	889, 891, 893, 895, 897, 899, 901, 903, 
	905, 907, 909, 911, 913, 915, 919, 923, 
	926, 932, 938, 945, 947, 951, 955, 959, 
	965, 978, 991, 1004, 1008, 1014, 1019, 1021, 
	1025, 1031, 1044, 1057, 1070, 1074, 1079, 1082, 
	1086, 1090, 1094, 1097, 1099, 1101, 1103, 1105, 
	1111, 1117, 1124, 1126, 1128, 1130, 1132, 1134, 
	1136, 1138, 1144, 1146, 1148, 1150, 1152, 1154, 
	1156, 1159, 1163, 1165, 1167, 1169, 1171, 1173, 
	1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 
	1193, 1197, 1200, 1206, 1212, 1219, 1221, 1225, 
	1229, 1233, 1239, 1252, 1265, 1278, 1282, 1288, 
	1293, 1295, 1299, 1305, 1318, 1331, 1344, 1348, 
	1353, 1356, 1360, 1364, 1368, 1372, 1376, 1380, 
	1384, 1387, 1389, 1395, 1401, 1408, 1414, 1420, 
	1428, 1430, 1434, 1438, 1442, 1446, 1450, 1453, 
	1455, 1457, 1459, 1461, 1467, 1473, 1480, 1482, 
	1484, 1486, 1488, 1490, 1492, 1494, 1496, 1501, 
	1506, 1508, 1510, 1512, 1514, 1516, 1518, 1520, 
	1522, 1527, 1532, 1534, 1536, 1538, 1540, 1542, 
	1544, 1546, 1548, 1550, 1552, 1554, 1556, 1558, 
	1562, 1566, 1568, 1570, 1574, 1579, 1584, 1588, 
	1592, 1596, 1600, 1604, 1608, 1612, 1615, 1618, 
	1624, 1630, 1632, 1634, 1637, 1639, 1643, 1647, 
	1651, 1655, 1659, 1662, 1664, 1666, 1668, 1670, 
	1674, 1685, 1696, 1702, 1708, 1714, 1721, 1726, 
	1731, 1733, 1737, 1741, 1744, 1748, 1754, 1767, 
	1780, 1793, 1799, 1805, 1810, 1816, 1822, 1826, 
	1830, 1834, 1838, 1842, 1846, 1850, 1854, 1858, 
	1861, 1863, 1866, 1872, 1878, 1880, 1882, 1885, 
	1888, 1891, 1893, 1895, 1897, 1899, 1901, 1903, 
	1905, 1907, 1909, 1911, 1913, 1915, 1917, 1919, 
	1921, 1923, 1925, 1927, 1929, 1931, 1933, 1935, 
	1937, 1939, 1941, 1943, 1945, 1947, 1949, 1951, 
	1953, 1955, 1957, 1959, 1961, 1963, 1966, 1968, 
	1970, 1972, 1974, 1976, 1978, 1980, 1982, 1986, 
	1997, 2001, 2003, 2006, 2009, 2013, 2024, 2036, 
	2052, 2055, 2062, 2066, 2068, 2073, 2083, 2092, 
	2096, 2118, 2128, 2134, 2138, 2146, 2149, 2155, 
	2159, 2169, 2179, 2184, 2186, 2189, 2196, 2199, 
	2204, 2225, 2232, 2239, 2246, 2253, 2256, 2261, 
	2267, 2269, 2273, 2283, 2287, 2299, 2303, 2317, 
	2321, 2325, 2327, 2333, 2337, 2344, 2348, 2350, 
	2358, 2362, 2364, 2370, 2379, 2381, 2383, 2388, 
	2390, 2392, 2396, 2400, 2402, 2407, 2414, 2418, 
	2425, 2429, 2431, 2438, 2442, 2444, 2449, 2457, 
	2459, 2461, 2465, 2467, 2469, 2476, 2483, 2490, 
	2497, 2501, 2505, 2512, 2520, 2526, 2528, 2532, 
	2536, 2540, 2542, 2547, 2554, 2561, 2565, 2569, 
	2571, 2576, 2584, 2590, 2592, 2596, 2602, 2604, 
	2608, 2615, 2620, 2624, 2628, 2630, 2635, 2642, 
	2646, 2648, 2655, 2659, 2661, 2666, 2674, 2676, 
	2678, 2682, 2684, 2686, 2693, 2697, 2701, 2703, 
	2708, 2716, 2720, 2727, 2731, 2733, 2740, 2744, 
	2746, 2751, 2759, 2761, 2763, 2767, 2769, 2771, 
	2778, 2785, 2792, 2799, 2806, 2812, 2814, 2818, 
	2825, 2832, 2839, 2846, 2853, 2860, 2867, 2874, 
	2880, 2882, 2886, 2898, 2907, 2917, 2921, 2923, 
	2926, 2932, 2934, 2936, 2938, 2941, 2943, 2945, 
	2961, 2972, 2985, 2991, 2997, 3013, 3018, 3029, 
	3039, 3044, 3048, 3050, 3053, 3057, 3067, 3077, 
	3082, 3084, 3089, 3100, 3110, 3115, 3119, 3121, 
	3124, 3128, 3138, 3148, 3153, 3155, 3160, 3171, 
	3181, 3186, 3190, 3192, 3195, 3199, 3209, 3219, 
	3224, 3226, 3231, 3242, 3252, 3257, 3261, 3263, 
	3266, 3270, 3280, 3290, 3295, 3297, 3309, 3319, 
	3325, 3327, 3329, 3334, 3339, 3340
};

static const short _vcf_v42_indicies[] = {
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 11, 0, 12, 0, 
	13, 0, 15, 14, 16, 14, 17, 14, 
	18, 14, 19, 14, 20, 14, 21, 14, 
	22, 14, 24, 23, 26, 27, 25, 30, 
	31, 32, 33, 34, 35, 36, 37, 29, 
	29, 28, 40, 39, 38, 42, 43, 41, 
	38, 44, 45, 38, 24, 25, 47, 48, 
	46, 38, 50, 51, 49, 38, 52, 38, 
	53, 51, 49, 38, 52, 50, 51, 49, 
	38, 54, 55, 55, 56, 56, 56, 38, 
	58, 59, 57, 38, 61, 62, 60, 38, 
	63, 38, 64, 62, 60, 38, 61, 65, 
	62, 60, 38, 52, 61, 62, 60, 38, 
	66, 66, 67, 67, 67, 38, 68, 67, 
	67, 67, 67, 67, 38, 70, 69, 69, 
	69, 38, 72, 50, 71, 71, 38, 73, 
	73, 74, 74, 74, 38, 75, 75, 76, 
	76, 76, 38, 77, 76, 76, 76, 76, 
	76, 38, 78, 69, 69, 69, 38, 80, 
	81, 79, 38, 83, 84, 82, 38, 85, 
	63, 38, 86, 84, 82, 38, 83, 87, 
	88, 84, 82, 38, 83, 82, 84, 89, 
	82, 89, 90, 82, 90, 82, 90, 82, 
	38, 83, 82, 84, 91, 82, 91, 92, 
	82, 92, 82, 92, 82, 38, 83, 82, 
	93, 84, 92, 82, 92, 82, 92, 82, 
	92, 82, 38, 95, 82, 82, 96, 94, 
	38, 83, 98, 99, 100, 97, 38, 52, 
	83, 84, 82, 38, 86, 98, 99, 100, 
	97, 38, 80, 101, 102, 81, 79, 38, 
	80, 104, 103, 38, 83, 106, 105, 38, 
	107, 106, 105, 38, 83, 108, 109, 106, 
	105, 38, 83, 105, 106, 110, 105, 110, 
	111, 105, 111, 105, 111, 105, 38, 83, 
	105, 106, 112, 105, 112, 113, 105, 113, 
	105, 113, 105, 38, 83, 105, 114, 106, 
	113, 105, 113, 105, 113, 105, 113, 105, 
	38, 95, 105, 105, 116, 115, 38, 83, 
	118, 119, 120, 117, 38, 52, 83, 106, 
	105, 38, 107, 118, 119, 120, 117, 38, 
	40, 122, 39, 121, 40, 123, 39, 121, 
	124, 39, 121, 125, 121, 126, 121, 127, 
	121, 128, 121, 131, 131, 130, 130, 130, 
	129, 132, 133, 133, 133, 133, 129, 134, 
	121, 135, 121, 136, 121, 137, 121, 138, 
	121, 139, 121, 140, 121, 141, 121, 142, 
	121, 143, 121, 144, 121, 145, 121, 146, 
	121, 149, 150, 148, 147, 152, 153, 151, 
	147, 154, 155, 147, 157, 157, 158, 158, 
	158, 156, 159, 159, 160, 160, 160, 156, 
	161, 160, 160, 160, 160, 160, 156, 162, 
	121, 149, 164, 163, 147, 152, 166, 165, 
	147, 167, 166, 165, 147, 152, 168, 169, 
	166, 165, 147, 152, 165, 166, 171, 165, 
	171, 172, 165, 172, 165, 172, 165, 170, 
	152, 165, 166, 173, 165, 173, 174, 165, 
	174, 165, 174, 165, 170, 152, 165, 175, 
	166, 174, 165, 174, 165, 174, 165, 174, 
	165, 170, 176, 166, 165, 147, 149, 177, 
	178, 164, 163, 147, 52, 152, 166, 165, 
	147, 52, 121, 179, 153, 151, 147, 152, 
	180, 181, 153, 151, 147, 152, 151, 153, 
	183, 151, 183, 184, 151, 184, 151, 184, 
	151, 182, 152, 151, 153, 185, 151, 185, 
	186, 151, 186, 151, 186, 151, 182, 152, 
	151, 187, 153, 186, 151, 186, 151, 186, 
	151, 186, 151, 182, 176, 153, 151, 147, 
	52, 152, 153, 151, 147, 188, 188, 133, 
	133, 133, 129, 40, 190, 191, 39, 189, 
	40, 193, 39, 192, 40, 194, 39, 192, 
	40, 195, 39, 192, 40, 196, 39, 192, 
	197, 39, 192, 198, 192, 199, 192, 200, 
	192, 201, 192, 203, 203, 204, 204, 204, 
	202, 205, 205, 206, 206, 206, 202, 207, 
	206, 206, 206, 206, 206, 202, 208, 192, 
	209, 192, 210, 192, 211, 192, 212, 192, 
	213, 192, 214, 192, 215, 192, 216, 192, 
	217, 192, 218, 192, 219, 192, 220, 192, 
	223, 224, 222, 221, 226, 227, 225, 221, 
	228, 229, 221, 230, 230, 231, 231, 231, 
	202, 232, 232, 233, 233, 233, 202, 234, 
	233, 233, 233, 233, 233, 202, 235, 192, 
	223, 237, 236, 221, 226, 239, 238, 221, 
	240, 239, 238, 221, 226, 241, 242, 239, 
	238, 221, 226, 238, 239, 244, 238, 244, 
	245, 238, 245, 238, 245, 238, 243, 226, 
	238, 239, 246, 238, 246, 247, 238, 247, 
	238, 247, 238, 243, 226, 238, 248, 239, 
	247, 238, 247, 238, 247, 238, 247, 238, 
	243, 249, 239, 238, 221, 223, 250, 251, 
	237, 236, 221, 52, 226, 239, 238, 221, 
	52, 192, 252, 227, 225, 221, 226, 253, 
	254, 227, 225, 221, 226, 225, 227, 256, 
	225, 256, 257, 225, 257, 225, 257, 225, 
	255, 226, 225, 227, 258, 225, 258, 259, 
	225, 259, 225, 259, 225, 255, 226, 225, 
	260, 227, 259, 225, 259, 225, 259, 225, 
	259, 225, 255, 249, 227, 225, 221, 52, 
	226, 227, 225, 221, 40, 262, 39, 261, 
	40, 263, 39, 261, 40, 264, 39, 261, 
	40, 265, 39, 261, 266, 39, 261, 267, 
	261, 268, 261, 269, 261, 270, 261, 272, 
	272, 273, 273, 273, 271, 274, 274, 275, 
	275, 275, 271, 276, 275, 275, 275, 275, 
	275, 271, 277, 261, 278, 261, 279, 261, 
	280, 261, 281, 261, 282, 261, 283, 261, 
	285, 285, 285, 285, 286, 284, 287, 284, 
	288, 261, 289, 261, 290, 261, 291, 261, 
	292, 261, 294, 294, 293, 295, 296, 296, 
	293, 297, 261, 298, 261, 299, 261, 300, 
	261, 301, 261, 302, 261, 303, 261, 304, 
	261, 305, 261, 306, 261, 307, 261, 308, 
	261, 309, 261, 312, 313, 311, 310, 315, 
	316, 314, 310, 317, 318, 310, 319, 319, 
	320, 320, 320, 271, 321, 321, 322, 322, 
	322, 271, 323, 322, 322, 322, 322, 322, 
	271, 324, 261, 312, 326, 325, 310, 315, 
	328, 327, 310, 329, 328, 327, 310, 315, 
	330, 331, 328, 327, 310, 315, 327, 328, 
	333, 327, 333, 334, 327, 334, 327, 334, 
	327, 332, 315, 327, 328, 335, 327, 335, 
	336, 327, 336, 327, 336, 327, 332, 315, 
	327, 337, 328, 336, 327, 336, 327, 336, 
	327, 336, 327, 332, 338, 328, 327, 310, 
	312, 339, 340, 326, 325, 310, 52, 315, 
	328, 327, 310, 52, 261, 341, 316, 314, 
	310, 315, 342, 343, 316, 314, 310, 315, 
	314, 316, 345, 314, 345, 346, 314, 346, 
	314, 346, 314, 344, 315, 314, 316, 347, 
	314, 347, 348, 314, 348, 314, 348, 314, 
	344, 315, 314, 349, 316, 348, 314, 348, 
	314, 348, 314, 348, 314, 344, 338, 316, 
	314, 310, 52, 315, 316, 314, 310, 287, 
	350, 284, 40, 352, 39, 351, 40, 353, 
	39, 351, 40, 354, 39, 351, 355, 39, 
	351, 356, 351, 357, 351, 358, 351, 359, 
	351, 361, 361, 362, 362, 362, 360, 363, 
	363, 364, 364, 364, 360, 365, 364, 364, 
	364, 364, 364, 360, 366, 351, 367, 351, 
	368, 351, 369, 351, 370, 351, 371, 351, 
	372, 351, 374, 374, 374, 374, 375, 373, 
	376, 373, 377, 351, 378, 351, 379, 351, 
	380, 351, 381, 351, 383, 383, 382, 384, 
	385, 385, 382, 386, 351, 387, 351, 388, 
	351, 389, 351, 390, 351, 391, 351, 392, 
	351, 393, 351, 394, 351, 395, 351, 396, 
	351, 397, 351, 398, 351, 401, 402, 400, 
	399, 404, 405, 403, 399, 406, 407, 399, 
	408, 408, 409, 409, 409, 360, 410, 410, 
	411, 411, 411, 360, 412, 411, 411, 411, 
	411, 411, 360, 413, 351, 401, 415, 414, 
	399, 404, 417, 416, 399, 418, 417, 416, 
	399, 404, 419, 420, 417, 416, 399, 404, 
	416, 417, 422, 416, 422, 423, 416, 423, 
	416, 423, 416, 421, 404, 416, 417, 424, 
	416, 424, 425, 416, 425, 416, 425, 416, 
	421, 404, 416, 426, 417, 425, 416, 425, 
	416, 425, 416, 425, 416, 421, 427, 417, 
	416, 399, 401, 428, 429, 415, 414, 399, 
	52, 404, 417, 416, 399, 52, 351, 430, 
	405, 403, 399, 404, 431, 432, 405, 403, 
	399, 404, 403, 405, 434, 403, 434, 435, 
	403, 435, 403, 435, 403, 433, 404, 403, 
	405, 436, 403, 436, 437, 403, 437, 403, 
	437, 403, 433, 404, 403, 438, 405, 437, 
	403, 437, 403, 437, 403, 437, 403, 433, 
	427, 405, 403, 399, 52, 404, 405, 403, 
	399, 376, 439, 373, 40, 441, 39, 440, 
	40, 442, 39, 440, 40, 443, 39, 440, 
	40, 444, 39, 440, 40, 445, 39, 440, 
	40, 446, 39, 440, 40, 447, 39, 440, 
	448, 39, 440, 449, 440, 451, 451, 452, 
	452, 452, 450, 453, 453, 454, 454, 454, 
	450, 455, 454, 454, 454, 454, 454, 450, 
	456, 456, 457, 457, 457, 450, 458, 458, 
	459, 459, 459, 450, 460, 461, 459, 459, 
	459, 459, 459, 450, 52, 440, 40, 463, 
	39, 462, 40, 464, 39, 462, 40, 465, 
	39, 462, 40, 466, 39, 462, 40, 467, 
	39, 462, 468, 39, 462, 469, 462, 470, 
	462, 471, 462, 472, 462, 474, 474, 475, 
	475, 475, 473, 476, 476, 477, 477, 477, 
	473, 479, 477, 477, 477, 477, 477, 478, 
	481, 480, 482, 480, 483, 480, 484, 480, 
	485, 480, 486, 480, 487, 480, 488, 480, 
	489, 489, 489, 489, 480, 492, 491, 491, 
	491, 490, 494, 493, 495, 493, 496, 493, 
	497, 493, 498, 493, 499, 493, 500, 493, 
	501, 493, 502, 502, 502, 502, 493, 505, 
	504, 504, 504, 503, 507, 506, 508, 506, 
	509, 506, 510, 506, 511, 506, 512, 506, 
	513, 506, 514, 506, 515, 506, 516, 506, 
	517, 506, 518, 506, 519, 506, 521, 522, 
	520, 506, 524, 525, 523, 506, 526, 506, 
	52, 462, 527, 525, 523, 506, 524, 528, 
	525, 523, 506, 52, 524, 525, 523, 506, 
	40, 530, 39, 529, 40, 531, 39, 529, 
	40, 532, 39, 529, 40, 533, 39, 529, 
	40, 534, 39, 529, 40, 535, 39, 529, 
	40, 536, 39, 529, 537, 39, 529, 539, 
	539, 538, 538, 538, 538, 538, 538, 540, 
	538, 538, 538, 541, 538, 540, 542, 538, 
	543, 538, 544, 544, 538, 44, 544, 40, 
	546, 39, 545, 40, 547, 39, 545, 40, 
	548, 39, 545, 40, 549, 39, 545, 40, 
	550, 39, 545, 551, 39, 545, 552, 545, 
	553, 545, 554, 545, 555, 545, 557, 557, 
	557, 556, 559, 558, 561, 558, 560, 558, 
	560, 558, 560, 558, 556, 558, 558, 558, 
	558, 560, 558, 560, 558, 560, 558, 556, 
	559, 560, 561, 560, 560, 556, 562, 562, 
	563, 563, 563, 545, 564, 564, 565, 565, 
	565, 545, 566, 565, 565, 565, 565, 565, 
	545, 568, 567, 567, 567, 545, 559, 561, 
	569, 569, 545, 52, 545, 571, 572, 570, 
	545, 574, 575, 573, 545, 576, 577, 545, 
	578, 575, 573, 545, 574, 579, 580, 575, 
	573, 545, 574, 573, 575, 581, 573, 581, 
	582, 573, 582, 573, 582, 573, 545, 574, 
	573, 575, 583, 573, 583, 584, 573, 584, 
	573, 584, 573, 545, 574, 573, 585, 575, 
	584, 573, 584, 573, 584, 573, 584, 573, 
	545, 587, 573, 573, 588, 586, 545, 574, 
	590, 591, 592, 589, 545, 52, 574, 575, 
	573, 545, 578, 590, 591, 592, 589, 545, 
	571, 593, 594, 572, 570, 545, 40, 596, 
	39, 595, 40, 597, 39, 595, 40, 598, 
	39, 595, 40, 599, 39, 595, 40, 600, 
	39, 595, 40, 601, 39, 595, 40, 602, 
	39, 595, 40, 603, 39, 595, 40, 604, 
	39, 595, 605, 39, 595, 606, 595, 608, 
	608, 607, 607, 607, 607, 607, 607, 609, 
	607, 607, 607, 610, 607, 609, 611, 607, 
	612, 607, 613, 613, 607, 607, 614, 613, 
	52, 614, 613, 616, 615, 617, 615, 618, 
	615, 619, 615, 620, 615, 621, 615, 622, 
	615, 623, 615, 624, 615, 625, 615, 626, 
	615, 627, 615, 628, 615, 629, 615, 630, 
	615, 631, 615, 632, 615, 633, 615, 634, 
	615, 635, 615, 636, 615, 637, 615, 638, 
	615, 639, 615, 640, 615, 641, 615, 642, 
	615, 643, 615, 644, 615, 645, 615, 646, 
	615, 647, 615, 648, 615, 649, 615, 650, 
	615, 651, 615, 652, 653, 615, 655, 654, 
	656, 654, 657, 654, 658, 654, 659, 654, 
	660, 654, 661, 654, 662, 654, 663, 664, 
	665, 654, 667, 668, 668, 668, 669, 668, 
	669, 668, 669, 668, 666, 671, 671, 672, 
	670, 673, 670, 674, 673, 670, 676, 676, 
	675, 677, 679, 678, 675, 681, 681, 681, 
	681, 681, 681, 681, 681, 681, 681, 680, 
	682, 683, 683, 683, 683, 683, 683, 683, 
	683, 683, 683, 680, 685, 686, 687, 688, 
	688, 688, 688, 688, 689, 690, 688, 688, 
	688, 688, 688, 684, 691, 692, 684, 694, 
	694, 695, 697, 698, 696, 693, 699, 701, 
	700, 693, 702, 693, 703, 704, 704, 702, 
	693, 707, 706, 706, 708, 706, 708, 706, 
	708, 706, 705, 709, 709, 710, 709, 710, 
	709, 710, 709, 705, 711, 712, 710, 705, 
	715, 717, 714, 714, 718, 719, 720, 721, 
	722, 723, 724, 725, 726, 727, 714, 716, 
	714, 716, 714, 716, 714, 713, 728, 728, 
	728, 729, 728, 729, 728, 729, 728, 713, 
	730, 731, 732, 733, 729, 713, 735, 735, 
	735, 734, 736, 737, 738, 737, 737, 737, 
	737, 734, 740, 741, 739, 736, 731, 742, 
	743, 742, 739, 744, 744, 744, 666, 745, 
	747, 745, 746, 745, 746, 745, 746, 745, 
	666, 745, 745, 745, 746, 745, 746, 745, 
	746, 745, 666, 746, 747, 746, 746, 666, 
	748, 666, 749, 750, 739, 736, 731, 742, 
	743, 742, 750, 739, 752, 752, 751, 736, 
	731, 743, 752, 751, 717, 714, 714, 718, 
	719, 720, 721, 722, 723, 724, 725, 726, 
	727, 714, 716, 714, 716, 714, 716, 714, 
	713, 730, 731, 753, 732, 733, 729, 713, 
	730, 731, 754, 732, 733, 729, 713, 730, 
	731, 755, 732, 733, 729, 713, 730, 731, 
	732, 733, 756, 729, 713, 758, 758, 757, 
	730, 731, 732, 758, 757, 730, 731, 732, 
	760, 729, 759, 762, 761, 730, 731, 732, 
	761, 730, 731, 732, 733, 763, 764, 765, 
	766, 729, 713, 767, 729, 729, 713, 770, 
	770, 770, 770, 770, 770, 770, 770, 770, 
	770, 769, 768, 730, 731, 732, 768, 730, 
	731, 732, 770, 770, 770, 770, 770, 770, 
	770, 770, 770, 770, 768, 771, 729, 729, 
	713, 773, 773, 774, 772, 774, 772, 730, 
	731, 771, 732, 774, 772, 775, 729, 729, 
	713, 777, 777, 778, 780, 781, 779, 776, 
	778, 780, 779, 776, 782, 776, 730, 731, 
	775, 732, 783, 783, 782, 776, 784, 784, 
	785, 776, 785, 776, 730, 731, 775, 732, 
	785, 776, 730, 731, 775, 778, 732, 783, 
	783, 779, 776, 786, 776, 787, 776, 730, 
	731, 775, 732, 776, 788, 776, 787, 776, 
	789, 729, 729, 713, 791, 791, 792, 790, 
	792, 790, 730, 731, 732, 792, 790, 730, 
	731, 732, 733, 793, 729, 713, 794, 729, 
	729, 713, 796, 796, 797, 799, 800, 798, 
	795, 797, 799, 798, 795, 801, 795, 730, 
	731, 732, 802, 802, 801, 795, 803, 803, 
	804, 795, 804, 795, 730, 731, 732, 804, 
	795, 730, 731, 797, 732, 802, 802, 798, 
	795, 805, 795, 806, 795, 730, 731, 732, 
	795, 807, 795, 806, 795, 730, 731, 732, 
	733, 808, 729, 713, 730, 731, 732, 733, 
	809, 729, 713, 730, 731, 732, 733, 810, 
	729, 713, 730, 731, 732, 733, 811, 729, 
	713, 812, 729, 729, 713, 814, 814, 814, 
	813, 730, 731, 732, 814, 814, 814, 813, 
	730, 731, 732, 733, 815, 816, 729, 713, 
	730, 731, 732, 818, 729, 817, 820, 819, 
	730, 731, 732, 819, 821, 729, 729, 713, 
	823, 823, 824, 822, 824, 822, 730, 731, 
	732, 824, 822, 730, 731, 732, 733, 825, 
	729, 713, 730, 731, 732, 733, 826, 729, 
	713, 827, 729, 729, 713, 829, 829, 830, 
	828, 830, 828, 730, 731, 732, 830, 828, 
	730, 731, 831, 832, 732, 733, 729, 713, 
	730, 731, 732, 834, 729, 833, 836, 835, 
	730, 731, 732, 835, 730, 731, 732, 838, 
	729, 837, 840, 839, 730, 731, 732, 839, 
	730, 731, 732, 733, 841, 729, 713, 842, 
	843, 729, 729, 713, 844, 729, 729, 713, 
	846, 846, 847, 845, 847, 845, 730, 731, 
	732, 847, 845, 849, 849, 850, 852, 853, 
	851, 848, 850, 852, 851, 848, 854, 848, 
	730, 731, 732, 855, 855, 854, 848, 856, 
	856, 857, 848, 857, 848, 730, 731, 732, 
	857, 848, 730, 731, 850, 732, 855, 855, 
	851, 848, 858, 848, 859, 848, 730, 731, 
	732, 848, 860, 848, 859, 848, 730, 731, 
	732, 733, 861, 729, 713, 862, 729, 729, 
	713, 864, 864, 865, 863, 865, 863, 730, 
	731, 732, 865, 863, 730, 731, 732, 733, 
	866, 867, 729, 713, 868, 729, 729, 713, 
	870, 870, 871, 873, 874, 872, 869, 871, 
	873, 872, 869, 875, 869, 730, 731, 732, 
	876, 876, 875, 869, 877, 877, 878, 869, 
	878, 869, 730, 731, 732, 878, 869, 730, 
	731, 871, 732, 876, 876, 872, 869, 879, 
	869, 880, 869, 730, 731, 732, 869, 881, 
	869, 880, 869, 730, 731, 732, 733, 882, 
	729, 713, 730, 731, 732, 733, 883, 729, 
	713, 730, 731, 732, 733, 884, 729, 713, 
	730, 731, 732, 733, 885, 729, 713, 730, 
	731, 732, 733, 886, 729, 713, 730, 731, 
	732, 888, 729, 887, 890, 889, 730, 731, 
	732, 889, 730, 731, 732, 733, 891, 729, 
	713, 730, 731, 732, 733, 892, 729, 713, 
	730, 731, 732, 733, 893, 729, 713, 730, 
	731, 732, 733, 894, 729, 713, 730, 731, 
	732, 733, 895, 729, 713, 730, 731, 732, 
	733, 896, 729, 713, 730, 731, 732, 733, 
	897, 729, 713, 730, 731, 732, 733, 898, 
	729, 713, 730, 731, 732, 900, 729, 899, 
	902, 901, 730, 731, 732, 901, 730, 731, 
	728, 728, 728, 729, 728, 729, 728, 729, 
	728, 713, 706, 706, 708, 706, 708, 706, 
	708, 706, 705, 711, 709, 709, 710, 709, 
	710, 709, 710, 709, 705, 903, 903, 904, 
	693, 904, 693, 703, 904, 693, 703, 699, 
	704, 704, 700, 693, 905, 693, 906, 693, 
	703, 693, 703, 702, 693, 907, 693, 906, 
	693, 685, 908, 687, 688, 688, 688, 688, 
	688, 689, 690, 688, 688, 688, 688, 688, 
	684, 909, 909, 909, 909, 909, 909, 909, 
	909, 909, 909, 684, 691, 692, 909, 909, 
	909, 909, 909, 909, 909, 909, 909, 909, 
	684, 911, 911, 910, 910, 910, 684, 912, 
	910, 910, 910, 910, 684, 691, 692, 912, 
	913, 913, 913, 913, 913, 914, 915, 913, 
	913, 913, 913, 913, 684, 917, 916, 916, 
	916, 684, 920, 918, 918, 918, 919, 918, 
	919, 918, 919, 918, 684, 918, 918, 918, 
	919, 918, 919, 918, 919, 918, 684, 920, 
	919, 919, 919, 684, 921, 921, 922, 684, 
	922, 684, 912, 922, 684, 923, 923, 923, 
	684, 924, 926, 924, 925, 924, 925, 924, 
	925, 924, 684, 924, 924, 924, 925, 924, 
	925, 924, 925, 924, 684, 925, 926, 925, 
	925, 684, 920, 684, 928, 927, 927, 927, 
	684, 931, 929, 929, 929, 930, 929, 930, 
	929, 930, 929, 684, 929, 929, 929, 930, 
	929, 930, 929, 930, 929, 684, 931, 930, 
	930, 930, 684, 932, 932, 933, 684, 933, 
	684, 912, 933, 684, 934, 934, 934, 684, 
	935, 937, 935, 936, 935, 936, 935, 936, 
	935, 684, 935, 935, 935, 936, 935, 936, 
	935, 936, 935, 684, 936, 937, 936, 936, 
	684, 931, 684, 939, 938, 938, 938, 684, 
	942, 940, 940, 940, 941, 940, 941, 940, 
	941, 940, 684, 940, 940, 940, 941, 940, 
	941, 940, 941, 940, 684, 942, 941, 941, 
	941, 684, 943, 943, 944, 684, 944, 684, 
	945, 944, 684, 946, 946, 946, 684, 947, 
	949, 947, 948, 947, 948, 947, 948, 947, 
	684, 947, 947, 947, 948, 947, 948, 947, 
	948, 947, 684, 948, 949, 948, 948, 684, 
	942, 684, 951, 950, 950, 950, 684, 954, 
	952, 952, 952, 953, 952, 953, 952, 953, 
	952, 684, 952, 952, 952, 953, 952, 953, 
	952, 953, 952, 684, 954, 953, 953, 953, 
	684, 955, 955, 956, 684, 956, 684, 945, 
	956, 684, 957, 957, 957, 684, 958, 960, 
	958, 959, 958, 959, 958, 959, 958, 684, 
	958, 958, 958, 959, 958, 959, 958, 959, 
	958, 684, 959, 960, 959, 959, 684, 954, 
	684, 691, 909, 909, 909, 909, 909, 909, 
	909, 909, 909, 909, 684, 668, 668, 668, 
	669, 668, 669, 668, 669, 668, 666, 667, 
	669, 669, 669, 669, 666, 962, 961, 964, 
	963, 967, 966, 966, 966, 965, 969, 968, 
	968, 968, 666, 970, 970, 0
};

static const short _vcf_v42_trans_targs[] = {
	0, 2, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 0, 15, 
	16, 17, 18, 19, 20, 21, 22, 0, 
	23, 0, 24, 441, 0, 25, 73, 121, 
	239, 305, 321, 374, 389, 422, 0, 25, 
	26, 27, 29, 34, 28, 27, 30, 31, 
	32, 30, 31, 32, 28, 33, 35, 41, 
	42, 36, 37, 38, 36, 37, 38, 31, 
	39, 40, 41, 42, 43, 44, 62, 44, 
	45, 46, 47, 46, 47, 48, 49, 50, 
	51, 52, 50, 51, 52, 45, 53, 54, 
	59, 55, 56, 55, 56, 57, 58, 61, 
	60, 58, 54, 59, 60, 54, 59, 63, 
	64, 63, 64, 65, 66, 71, 67, 68, 
	67, 68, 69, 70, 72, 70, 66, 71, 
	72, 0, 74, 75, 76, 77, 78, 79, 
	80, 0, 81, 120, 82, 81, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	93, 94, 95, 0, 96, 97, 113, 96, 
	97, 113, 98, 112, 0, 99, 100, 99, 
	100, 101, 102, 103, 104, 103, 104, 105, 
	106, 111, 0, 107, 108, 107, 108, 109, 
	110, 106, 111, 114, 115, 119, 0, 116, 
	117, 116, 117, 118, 120, 0, 122, 172, 
	0, 123, 124, 125, 126, 127, 128, 129, 
	130, 131, 0, 132, 133, 132, 133, 134, 
	135, 136, 137, 138, 139, 140, 141, 142, 
	143, 144, 145, 146, 147, 0, 148, 149, 
	165, 148, 149, 165, 150, 164, 151, 152, 
	151, 152, 153, 154, 155, 156, 155, 156, 
	157, 158, 163, 0, 159, 160, 159, 160, 
	161, 162, 158, 163, 166, 167, 171, 0, 
	168, 169, 168, 169, 170, 0, 173, 174, 
	175, 176, 177, 178, 179, 180, 181, 0, 
	182, 183, 182, 183, 184, 185, 186, 187, 
	188, 189, 190, 191, 0, 192, 238, 193, 
	194, 195, 196, 197, 198, 0, 199, 200, 
	199, 201, 202, 203, 204, 205, 206, 207, 
	208, 209, 210, 211, 212, 213, 0, 214, 
	215, 231, 214, 215, 231, 216, 230, 217, 
	218, 217, 218, 219, 220, 221, 222, 221, 
	222, 223, 224, 229, 0, 225, 226, 225, 
	226, 227, 228, 224, 229, 232, 233, 237, 
	0, 234, 235, 234, 235, 236, 238, 0, 
	240, 241, 242, 243, 244, 245, 246, 247, 
	0, 248, 249, 248, 249, 250, 251, 252, 
	253, 254, 255, 256, 257, 0, 258, 304, 
	259, 260, 261, 262, 263, 264, 0, 265, 
	266, 265, 267, 268, 269, 270, 271, 272, 
	273, 274, 275, 276, 277, 278, 279, 0, 
	280, 281, 297, 280, 281, 297, 282, 296, 
	283, 284, 283, 284, 285, 286, 287, 288, 
	287, 288, 289, 290, 295, 0, 291, 292, 
	291, 292, 293, 294, 290, 295, 298, 299, 
	303, 0, 300, 301, 300, 301, 302, 304, 
	0, 306, 307, 308, 309, 310, 311, 312, 
	313, 314, 0, 315, 316, 315, 316, 317, 
	318, 319, 318, 319, 314, 320, 0, 322, 
	323, 324, 325, 326, 327, 328, 329, 330, 
	331, 0, 332, 333, 332, 333, 0, 334, 
	0, 335, 336, 337, 338, 339, 340, 341, 
	342, 343, 0, 343, 344, 0, 345, 346, 
	347, 348, 349, 350, 351, 352, 353, 0, 
	353, 354, 0, 355, 356, 357, 358, 359, 
	360, 361, 362, 363, 364, 365, 366, 367, 
	368, 369, 371, 368, 369, 371, 370, 372, 
	373, 0, 375, 376, 377, 378, 379, 380, 
	381, 382, 0, 383, 384, 385, 386, 387, 
	388, 0, 390, 391, 392, 393, 394, 395, 
	396, 397, 398, 399, 0, 400, 401, 403, 
	402, 408, 404, 405, 404, 405, 406, 407, 
	409, 407, 410, 411, 412, 410, 411, 412, 
	403, 408, 413, 414, 419, 415, 416, 415, 
	416, 417, 418, 421, 420, 418, 414, 419, 
	420, 414, 419, 0, 423, 424, 425, 426, 
	427, 428, 429, 430, 431, 432, 433, 0, 
	434, 435, 436, 437, 438, 439, 440, 0, 
	442, 443, 444, 445, 446, 447, 448, 449, 
	450, 451, 452, 453, 454, 455, 456, 457, 
	458, 459, 460, 461, 462, 463, 464, 465, 
	466, 467, 468, 469, 470, 471, 472, 473, 
	474, 475, 476, 477, 478, 730, 0, 479, 
	480, 481, 482, 483, 484, 485, 486, 485, 
	730, 486, 0, 488, 726, 727, 0, 489, 
	490, 490, 491, 0, 492, 493, 492, 491, 
	0, 494, 495, 494, 0, 496, 725, 674, 
	676, 701, 713, 497, 671, 0, 498, 668, 
	664, 665, 669, 499, 664, 665, 500, 501, 
	661, 0, 502, 660, 503, 502, 503, 504, 
	659, 0, 505, 658, 506, 521, 530, 557, 
	572, 579, 587, 593, 600, 619, 624, 647, 
	505, 506, 507, 731, 520, 525, 0, 508, 
	509, 508, 507, 0, 510, 517, 516, 518, 
	512, 513, 514, 515, 488, 510, 517, 0, 
	519, 522, 523, 524, 527, 0, 526, 0, 
	528, 0, 529, 531, 535, 539, 553, 532, 
	0, 533, 534, 536, 0, 537, 538, 540, 
	0, 541, 542, 547, 548, 551, 543, 544, 
	545, 546, 549, 550, 552, 554, 0, 555, 
	556, 558, 559, 0, 560, 561, 566, 567, 
	570, 562, 563, 564, 565, 568, 569, 571, 
	573, 574, 575, 576, 577, 0, 578, 580, 
	583, 0, 581, 0, 582, 584, 0, 585, 
	586, 588, 589, 590, 0, 591, 592, 594, 
	597, 0, 595, 0, 596, 0, 598, 0, 
	599, 601, 602, 606, 603, 0, 604, 605, 
	0, 607, 608, 613, 614, 617, 609, 610, 
	611, 612, 615, 616, 618, 620, 621, 0, 
	622, 623, 625, 639, 626, 0, 627, 628, 
	633, 634, 637, 629, 630, 631, 632, 635, 
	636, 638, 640, 641, 642, 643, 644, 0, 
	645, 0, 646, 648, 649, 650, 651, 652, 
	653, 654, 655, 0, 656, 0, 657, 662, 
	663, 666, 667, 670, 672, 673, 675, 674, 
	496, 676, 677, 689, 678, 684, 679, 680, 
	681, 682, 683, 685, 686, 687, 688, 690, 
	696, 691, 692, 693, 694, 695, 697, 698, 
	699, 700, 702, 708, 703, 704, 705, 706, 
	707, 672, 709, 710, 711, 712, 714, 720, 
	715, 716, 717, 718, 719, 721, 722, 723, 
	724, 728, 732, 729, 733, 0, 487, 511, 
	487, 511, 0
};

static const short _vcf_v42_trans_actions[] = {
	7, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 83, 1, 
	0, 0, 0, 0, 0, 3, 65, 364, 
	0, 151, 0, 0, 454, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 9, 3, 
	35, 41, 0, 0, 143, 3, 41, 44, 
	41, 3, 5, 3, 74, 50, 0, 1, 
	41, 41, 44, 41, 3, 5, 3, 0, 
	50, 3, 0, 3, 37, 41, 0, 3, 
	5, 1, 41, 0, 3, 37, 0, 41, 
	44, 41, 3, 5, 3, 0, 50, 3, 
	3, 41, 41, 3, 3, 71, 47, 5, 
	47, 3, 50, 50, 3, 41, 41, 41, 
	41, 3, 3, 50, 3, 3, 47, 47, 
	3, 3, 53, 47, 47, 3, 50, 50, 
	3, 86, 3, 0, 15, 0, 0, 0, 
	0, 187, 163, 68, 5, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 33, 247, 41, 44, 41, 3, 
	5, 3, 0, 0, 219, 1, 41, 0, 
	3, 5, 0, 41, 41, 3, 3, 50, 
	3, 3, 384, 41, 41, 3, 3, 56, 
	5, 41, 41, 50, 3, 3, 404, 47, 
	47, 3, 3, 50, 0, 191, 3, 3, 
	95, 3, 3, 3, 0, 21, 0, 0, 
	0, 0, 227, 68, 163, 0, 3, 5, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 33, 251, 41, 44, 
	41, 3, 5, 3, 0, 0, 1, 41, 
	0, 3, 5, 0, 41, 41, 3, 3, 
	50, 3, 3, 389, 41, 41, 3, 3, 
	56, 5, 41, 41, 50, 3, 3, 409, 
	47, 47, 3, 3, 50, 98, 3, 3, 
	3, 0, 23, 0, 0, 0, 0, 231, 
	68, 163, 0, 3, 5, 0, 0, 0, 
	0, 0, 0, 0, 195, 167, 167, 5, 
	0, 0, 0, 0, 0, 203, 171, 5, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 33, 255, 41, 
	44, 41, 3, 5, 3, 0, 0, 1, 
	41, 0, 3, 5, 0, 41, 41, 3, 
	3, 50, 3, 3, 394, 41, 41, 3, 
	3, 56, 5, 41, 41, 50, 3, 3, 
	414, 47, 47, 3, 3, 50, 3, 101, 
	3, 3, 0, 25, 0, 0, 0, 0, 
	235, 68, 163, 0, 3, 5, 0, 0, 
	0, 0, 0, 0, 0, 199, 167, 167, 
	5, 0, 0, 0, 0, 0, 207, 171, 
	5, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 33, 259, 
	41, 44, 41, 3, 5, 3, 0, 0, 
	1, 41, 0, 3, 5, 0, 41, 41, 
	3, 3, 50, 3, 3, 399, 41, 41, 
	3, 3, 56, 5, 41, 41, 50, 3, 
	3, 419, 47, 47, 3, 3, 50, 3, 
	104, 3, 3, 3, 3, 3, 3, 0, 
	27, 0, 239, 1, 41, 0, 3, 5, 
	1, 41, 0, 3, 5, 5, 110, 3, 
	3, 3, 3, 0, 31, 0, 0, 0, 
	0, 243, 68, 163, 0, 3, 379, 5, 
	211, 0, 0, 0, 0, 0, 0, 0, 
	0, 175, 369, 3, 5, 215, 0, 0, 
	0, 0, 0, 0, 0, 0, 179, 374, 
	3, 5, 263, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 33, 
	41, 44, 41, 3, 5, 3, 0, 50, 
	3, 89, 3, 3, 3, 3, 3, 3, 
	0, 17, 267, 1, 0, 0, 0, 0, 
	3, 92, 3, 3, 3, 3, 0, 19, 
	0, 0, 0, 0, 223, 163, 3, 5, 
	3, 5, 1, 41, 0, 3, 5, 41, 
	0, 3, 41, 44, 41, 3, 5, 3, 
	0, 0, 50, 3, 3, 41, 41, 3, 
	3, 56, 47, 5, 47, 3, 50, 50, 
	3, 41, 41, 107, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 29, 0, 271, 
	1, 0, 0, 0, 0, 3, 50, 113, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 77, 13, 0, 
	0, 0, 0, 0, 0, 0, 41, 39, 
	183, 3, 116, 147, 3, 3, 119, 1, 
	41, 3, 147, 122, 41, 147, 3, 5, 
	125, 41, 147, 3, 128, 41, 41, 41, 
	41, 41, 41, 147, 5, 131, 41, 41, 
	41, 41, 41, 3, 3, 3, 3, 147, 
	3, 134, 1, 41, 41, 0, 3, 147, 
	5, 275, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	3, 3, 147, 359, 5, 3, 137, 41, 
	147, 3, 5, 355, 41, 41, 3, 3, 
	41, 3, 3, 5, 80, 3, 3, 140, 
	3, 3, 3, 3, 3, 279, 3, 449, 
	3, 351, 3, 3, 3, 3, 3, 3, 
	283, 3, 3, 3, 287, 3, 3, 3, 
	291, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 295, 3, 
	3, 3, 3, 299, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 303, 3, 3, 
	3, 424, 3, 307, 3, 3, 311, 3, 
	3, 3, 3, 3, 315, 3, 3, 3, 
	3, 429, 3, 319, 3, 434, 3, 323, 
	3, 3, 3, 3, 3, 331, 3, 3, 
	327, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 335, 
	3, 3, 3, 3, 3, 339, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 439, 
	3, 343, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 444, 3, 347, 3, 3, 
	3, 3, 3, 3, 41, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 59, 0, 62, 159, 155, 11, 
	41, 0, 0
};

static const short _vcf_v42_eof_actions[] = {
	0, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 83, 83, 
	83, 83, 83, 83, 83, 83, 364, 151, 
	454, 9, 9, 9, 151, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 86, 86, 86, 86, 86, 86, 86, 
	187, 187, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 247, 
	247, 247, 219, 219, 219, 86, 247, 247, 
	247, 247, 384, 384, 384, 247, 247, 247, 
	86, 247, 247, 404, 404, 404, 247, 247, 
	187, 191, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 227, 227, 227, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 251, 251, 251, 227, 227, 
	227, 95, 251, 251, 251, 251, 389, 389, 
	389, 251, 251, 251, 95, 251, 251, 409, 
	409, 409, 251, 251, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 231, 231, 231, 
	98, 98, 98, 98, 98, 98, 98, 195, 
	195, 98, 98, 98, 98, 98, 203, 203, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 255, 255, 255, 
	231, 231, 231, 98, 255, 255, 255, 255, 
	394, 394, 394, 255, 255, 255, 98, 255, 
	255, 414, 414, 414, 255, 255, 195, 101, 
	101, 101, 101, 101, 101, 101, 101, 235, 
	235, 235, 101, 101, 101, 101, 101, 101, 
	101, 199, 199, 101, 101, 101, 101, 101, 
	207, 207, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 259, 
	259, 259, 235, 235, 235, 101, 259, 259, 
	259, 259, 399, 399, 399, 259, 259, 259, 
	101, 259, 259, 419, 419, 419, 259, 259, 
	199, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 239, 239, 239, 239, 239, 239, 
	104, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 243, 243, 379, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 369, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 374, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 110, 263, 263, 263, 89, 89, 
	89, 89, 89, 89, 89, 89, 267, 267, 
	267, 267, 267, 267, 267, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 223, 
	223, 223, 223, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 271, 271, 271, 271, 271, 271, 271, 
	271, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 116, 
	119, 119, 119, 122, 122, 125, 125, 128, 
	128, 131, 131, 131, 131, 134, 134, 134, 
	275, 275, 275, 137, 137, 355, 355, 116, 
	116, 116, 116, 116, 355, 355, 140, 140, 
	275, 275, 275, 275, 275, 279, 279, 449, 
	351, 351, 275, 275, 283, 283, 283, 275, 
	287, 287, 287, 275, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 275, 295, 295, 295, 275, 275, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 275, 275, 275, 275, 
	275, 303, 303, 275, 424, 307, 307, 275, 
	311, 311, 311, 275, 275, 275, 315, 315, 
	315, 275, 429, 319, 319, 434, 323, 323, 
	275, 275, 275, 331, 331, 331, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 327, 275, 275, 335, 335, 335, 
	275, 275, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 275, 
	275, 275, 275, 275, 439, 343, 343, 275, 
	275, 275, 275, 275, 275, 275, 275, 444, 
	347, 347, 275, 134, 134, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 116, 116, 
	0, 0, 11, 0, 0, 0
};

static const int vcf_v42_start = 1;
static const int vcf_v42_first_final = 730;
static const int vcf_v42_error = 0;

static const int vcf_v42_en_main = 1;
static const int vcf_v42_en_main_meta_section = 28;
static const int vcf_v42_en_main_body_section = 731;
static const int vcf_v42_en_meta_section_skip = 728;
static const int vcf_v42_en_body_section_skip = 729;


#line 748 "src/vcf/vcf_v42.ragel"

}

namespace ebi
{
  namespace vcf
  {
    template <typename Configuration>
    ParserImpl_v42<Configuration>::ParserImpl_v42(std::shared_ptr<Source> const & source,
                                          std::shared_ptr<std::vector<Record>> const & records
    )
    : ParsingState{source, records}
    {
      
#line 1728 "inc/vcf/validator_detail_v42.hpp"
	{
	cs = vcf_v42_start;
	}

#line 763 "src/vcf/vcf_v42.ragel"

    }

    template <typename Configuration>
    void ParserImpl_v42<Configuration>::parse(std::vector<char> const & text)
    {
      char const * p = &text[0];
      char const * pe = &text[0] + text.size();
      char const * eof = nullptr;

      clear_records();
      parse_buffer(p, pe, eof);
    }

    template <typename Configuration>
    void ParserImpl_v42<Configuration>::parse(std::string const & text)
    {
      char const * p = text.data();
      char const * pe = text.data() + text.size();
      char const * eof = nullptr;

      clear_records();
      parse_buffer(p, pe, eof);
    }

    template <typename Configuration>
    void ParserImpl_v42<Configuration>::end()
    {
      char const * empty = "";
      clear_records();
      parse_buffer(empty, empty, empty);
    }

    template <typename Configuration>
    bool ParserImpl<Configuration>::is_valid() const
    {
      return m_is_valid;
    }

    template <typename Configuration>
    void ParserImpl_v42<Configuration>::parse_buffer(char const * p, char const * pe, char const * eof)
    {
      
#line 1777 "inc/vcf/validator_detail_v42.hpp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _vcf_v42_trans_keys + _vcf_v42_key_offsets[cs];
	_trans = _vcf_v42_index_offsets[cs];

	_klen = _vcf_v42_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _vcf_v42_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _vcf_v42_indicies[_trans];
	cs = _vcf_v42_trans_targs[_trans];

	if ( _vcf_v42_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _vcf_v42_actions + _vcf_v42_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 31 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_token_begin(*this);
    }
	break;
	case 1:
#line 35 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_token_char(*this, *p);
    }
	break;
	case 2:
#line 39 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_token_end(*this);
    }
	break;
	case 3:
#line 43 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_newline(*this);
        ++n_lines;
        n_columns = 1;

        if (n_lines % 10000 == 0) {
            std::cout << "Lines read: " << n_lines << std::endl;
        }
    }
	break;
	case 4:
#line 53 "src/vcf/vcf_v42.ragel"
	{
        ++n_columns;
    }
	break;
	case 5:
#line 60 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_fileformat_section_error(*this);
        p--; {cs = 728; goto _again;}
    }
	break;
	case 6:
#line 65 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this);
        p--; {cs = 728; goto _again;}
    }
	break;
	case 7:
#line 70 "src/vcf/vcf_v42.ragel"
	{
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
    }
	break;
	case 8:
#line 78 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_header_section_error(*this);
        
        // If an error occurs in the header, meta_section_end won't be triggered and the meta and header optional validations must be run here
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
        
        p--; {cs = 729; goto _again;}
    }
	break;
	case 9:
#line 91 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this);
        p--; {cs = 729; goto _again;}
    }
	break;
	case 10:
#line 99 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_fileformat(*this);
    }
	break;
	case 11:
#line 103 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "ALT");
    }
	break;
	case 12:
#line 107 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "assembly");
    }
	break;
	case 13:
#line 111 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "contig");
    }
	break;
	case 14:
#line 115 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "FILTER");
    }
	break;
	case 15:
#line 119 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "FORMAT");
    }
	break;
	case 16:
#line 123 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "INFO");
    }
	break;
	case 17:
#line 127 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "PEDIGREE");
    }
	break;
	case 18:
#line 131 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "pedigreeDB");
    }
	break;
	case 19:
#line 135 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "SAMPLE");
    }
	break;
	case 20:
#line 139 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_token_end(*this, "ID");
    }
	break;
	case 21:
#line 143 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Number");
    }
	break;
	case 22:
#line 147 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Type");
    }
	break;
	case 23:
#line 151 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Description");
    }
	break;
	case 24:
#line 155 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Genomes");
    }
	break;
	case 25:
#line 159 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Mixture");
    }
	break;
	case 26:
#line 163 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this);
    }
	break;
	case 27:
#line 167 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_token_end(*this);
    }
	break;
	case 28:
#line 171 "src/vcf/vcf_v42.ragel"
	{
        try {
          ParsePolicy::handle_meta_line(*this);
        } catch (ParsingError ex) {
          ErrorPolicy::handle_meta_section_error(*this, ex.what());
        }
    }
	break;
	case 29:
#line 179 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_sample_name(*this);
    }
	break;
	case 30:
#line 183 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_header_line(*this);
    }
	break;
	case 31:
#line 189 "src/vcf/vcf_v42.ragel"
	{
        ParsePolicy::handle_column_end(*this, n_columns);
    }
	break;
	case 32:
#line 193 "src/vcf/vcf_v42.ragel"
	{
        try {
          // Handle all columns and build record
          ParsePolicy::handle_body_line(*this);
          // Check warnings (non-blocking errors but potential mistakes anyway, only makes sense if the last record parsed was correct)
          OptionalPolicy::optional_check_body_entry(*this, ParsingState::records->back());
        } catch (ParsingError ex) {
          ErrorPolicy::handle_body_section_error(*this, ex.what());
        } catch (ParsingWarning ex) {
          ErrorPolicy::handle_body_section_warning(*this, ex.what());
        }
    }
	break;
	case 33:
#line 210 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_fileformat_section_error(*this,
            "The fileformat declaration is not 'fileformat=VCFv4.2'");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 34:
#line 217 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in ALT metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 35:
#line 222 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "ALT metadata ID is not prefixed by DEL/INS/DUP/INV/CNV and suffixed by ':' and a text sequence");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 36:
#line 228 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in assembly metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 37:
#line 234 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in contig metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 38:
#line 240 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in FILTER metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 39:
#line 246 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in FORMAT metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 40:
#line 251 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "FORMAT metadata Number is not a number, A, R, G or dot");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 41:
#line 262 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in INFO metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 42:
#line 267 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "INFO metadata Number is not a number, A, R, G or dot");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 43:
#line 272 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "INFO metadata Type is not a Integer, Float, Flag, Character or String");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 44:
#line 278 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in PEDIGREE metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 45:
#line 284 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in pedigreeDB metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 46:
#line 290 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in SAMPLE metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 47:
#line 295 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "SAMPLE metadata Genomes is not a valid string (maybe it contains quotes?)");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 48:
#line 300 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "SAMPLE metadata Mixture is not a valid string (maybe it contains quotes?)");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 49:
#line 306 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata ID contains a character different from alphanumeric, dot, underscore and dash");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 50:
#line 311 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata description string is not valid");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 51:
#line 316 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata URL is not valid");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 52:
#line 322 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_header_section_error(*this, "The header line does not start with the mandatory columns: CHROM, POS, ID, REF, ALT, QUAL, FILTER and INFO");
        
        // If an error occurs in the header, meta_section_end won't be triggered and the meta and header optional validations must be run here
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
        
        p--; {cs = 729; goto _again;}
    }
	break;
	case 53:
#line 338 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Chromosome is not a string without colons or whitespaces, optionally wrapped with angle brackets (<>)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 54:
#line 344 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Position is not a positive number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 55:
#line 350 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "ID is not a single dot or a list of strings without semicolons or whitespaces");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 56:
#line 356 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Reference is not a string of bases");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 57:
#line 362 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Alternate is not a single dot or a comma-separated list of bases");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 58:
#line 368 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Quality is not a single dot or a positive number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 59:
#line 374 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Filter is not a single dot or a semicolon-separated list of strings");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 60:
#line 380 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info is not a single dot or a semicolon-separated list of key-value pairs");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 61:
#line 385 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info key is not a sequence of alphanumeric and/or punctuation characters");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 62:
#line 390 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info field value is not a comma-separated list of valid strings (maybe it contains whitespaces?)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 63:
#line 395 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AA value is not a single dot or a string of bases");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 64:
#line 400 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AC value is not a comma-separated list of numbers");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 65:
#line 405 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AF value is not a comma-separated list of numbers");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 66:
#line 410 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AN value is not an integer number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 67:
#line 415 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info BQ value is not a number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 68:
#line 420 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info CIGAR value is not an alphanumeric string");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 69:
#line 425 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info DB is not a flag (with 1/0/no value)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 70:
#line 430 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info DP value is not an integer number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 71:
#line 435 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info END value is not an integer number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 72:
#line 440 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info H2 is not a flag (with 1/0/no value)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 73:
#line 445 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info H3 is not a flag (with 1/0/no value)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 74:
#line 450 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info MQ value is not a number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 75:
#line 455 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info MQ0 value is not an integer number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 76:
#line 460 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info NS value is not an integer number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 77:
#line 465 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info SB value is not a number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 78:
#line 470 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info SOMATIC is not a flag (with 1/0/no value)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 79:
#line 475 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info VALIDATED is not a flag (with 1/0/no value)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 80:
#line 480 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info 1000G is not a flag (with 1/0/no value)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 81:
#line 486 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Format is not a colon-separated list of alphanumeric strings");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 82:
#line 492 "src/vcf/vcf_v42.ragel"
	{
        std::ostringstream message_stream;
        message_stream << "Sample #" << (n_columns - 9) << " is not a valid string";
        ErrorPolicy::handle_body_section_error(*this, message_stream.str());
        p--; {cs = 729; goto _again;}
    }
	break;
	case 83:
#line 499 "src/vcf/vcf_v42.ragel"
	{
        std::ostringstream message_stream;
        message_stream << "Sample #" << (n_columns - 9) << " does not start with a valid genotype";
        ErrorPolicy::handle_body_section_error(*this, message_stream.str());
        p--; {cs = 729; goto _again;}
    }
	break;
	case 84:
#line 740 "src/vcf/vcf_v42.ragel"
	{ {cs = 28; goto _again;} }
	break;
	case 85:
#line 741 "src/vcf/vcf_v42.ragel"
	{ {cs = 731; goto _again;} }
	break;
#line 2462 "inc/vcf/validator_detail_v42.hpp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _vcf_v42_actions + _vcf_v42_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 5:
#line 60 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_fileformat_section_error(*this);
        p--; {cs = 728; goto _again;}
    }
	break;
	case 6:
#line 65 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this);
        p--; {cs = 728; goto _again;}
    }
	break;
	case 7:
#line 70 "src/vcf/vcf_v42.ragel"
	{
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
    }
	break;
	case 8:
#line 78 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_header_section_error(*this);
        
        // If an error occurs in the header, meta_section_end won't be triggered and the meta and header optional validations must be run here
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
        
        p--; {cs = 729; goto _again;}
    }
	break;
	case 9:
#line 91 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this);
        p--; {cs = 729; goto _again;}
    }
	break;
	case 33:
#line 210 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_fileformat_section_error(*this,
            "The fileformat declaration is not 'fileformat=VCFv4.2'");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 34:
#line 217 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in ALT metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 35:
#line 222 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "ALT metadata ID is not prefixed by DEL/INS/DUP/INV/CNV and suffixed by ':' and a text sequence");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 36:
#line 228 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in assembly metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 37:
#line 234 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in contig metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 38:
#line 240 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in FILTER metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 39:
#line 246 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in FORMAT metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 40:
#line 251 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "FORMAT metadata Number is not a number, A, R, G or dot");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 41:
#line 262 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in INFO metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 42:
#line 267 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "INFO metadata Number is not a number, A, R, G or dot");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 43:
#line 272 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "INFO metadata Type is not a Integer, Float, Flag, Character or String");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 44:
#line 278 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in PEDIGREE metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 45:
#line 284 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in pedigreeDB metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 46:
#line 290 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in SAMPLE metadata");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 47:
#line 295 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "SAMPLE metadata Genomes is not a valid string (maybe it contains quotes?)");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 48:
#line 300 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "SAMPLE metadata Mixture is not a valid string (maybe it contains quotes?)");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 49:
#line 306 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata ID contains a character different from alphanumeric, dot, underscore and dash");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 50:
#line 311 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata description string is not valid");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 51:
#line 316 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata URL is not valid");
        p--; {cs = 728; goto _again;}
    }
	break;
	case 52:
#line 322 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_header_section_error(*this, "The header line does not start with the mandatory columns: CHROM, POS, ID, REF, ALT, QUAL, FILTER and INFO");
        
        // If an error occurs in the header, meta_section_end won't be triggered and the meta and header optional validations must be run here
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
        
        p--; {cs = 729; goto _again;}
    }
	break;
	case 53:
#line 338 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Chromosome is not a string without colons or whitespaces, optionally wrapped with angle brackets (<>)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 54:
#line 344 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Position is not a positive number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 55:
#line 350 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "ID is not a single dot or a list of strings without semicolons or whitespaces");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 56:
#line 356 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Reference is not a string of bases");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 57:
#line 362 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Alternate is not a single dot or a comma-separated list of bases");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 58:
#line 368 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Quality is not a single dot or a positive number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 59:
#line 374 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Filter is not a single dot or a semicolon-separated list of strings");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 60:
#line 380 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info is not a single dot or a semicolon-separated list of key-value pairs");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 61:
#line 385 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info key is not a sequence of alphanumeric and/or punctuation characters");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 62:
#line 390 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info field value is not a comma-separated list of valid strings (maybe it contains whitespaces?)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 63:
#line 395 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AA value is not a single dot or a string of bases");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 64:
#line 400 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AC value is not a comma-separated list of numbers");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 65:
#line 405 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AF value is not a comma-separated list of numbers");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 66:
#line 410 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AN value is not an integer number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 67:
#line 415 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info BQ value is not a number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 68:
#line 420 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info CIGAR value is not an alphanumeric string");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 69:
#line 425 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info DB is not a flag (with 1/0/no value)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 70:
#line 430 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info DP value is not an integer number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 71:
#line 435 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info END value is not an integer number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 72:
#line 440 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info H2 is not a flag (with 1/0/no value)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 73:
#line 445 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info H3 is not a flag (with 1/0/no value)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 74:
#line 450 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info MQ value is not a number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 75:
#line 455 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info MQ0 value is not an integer number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 76:
#line 460 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info NS value is not an integer number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 77:
#line 465 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info SB value is not a number");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 78:
#line 470 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info SOMATIC is not a flag (with 1/0/no value)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 79:
#line 475 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info VALIDATED is not a flag (with 1/0/no value)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 80:
#line 480 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info 1000G is not a flag (with 1/0/no value)");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 81:
#line 486 "src/vcf/vcf_v42.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Format is not a colon-separated list of alphanumeric strings");
        p--; {cs = 729; goto _again;}
    }
	break;
	case 82:
#line 492 "src/vcf/vcf_v42.ragel"
	{
        std::ostringstream message_stream;
        message_stream << "Sample #" << (n_columns - 9) << " is not a valid string";
        ErrorPolicy::handle_body_section_error(*this, message_stream.str());
        p--; {cs = 729; goto _again;}
    }
	break;
	case 83:
#line 499 "src/vcf/vcf_v42.ragel"
	{
        std::ostringstream message_stream;
        message_stream << "Sample #" << (n_columns - 9) << " does not start with a valid genotype";
        ErrorPolicy::handle_body_section_error(*this, message_stream.str());
        p--; {cs = 729; goto _again;}
    }
	break;
#line 2894 "inc/vcf/validator_detail_v42.hpp"
		}
	}
	}

	_out: {}
	}

#line 807 "src/vcf/vcf_v42.ragel"

    }
    
  }
}
