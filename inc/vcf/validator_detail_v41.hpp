
#line 1 "src/vcf/vcf_v41.ragel"
/**
 * Copyright 2014-2015 EMBL - European Bioinformatics Institute
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <cstdio>

#include "vcf/validator.hpp"


#line 750 "src/vcf/vcf_v41.ragel"


namespace
{
  
#line 31 "inc/vcf/validator_detail_v41.hpp"
static const char _vcf_v41_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 23, 1, 26, 1, 27, 1, 
	29, 2, 0, 1, 2, 0, 2, 2, 
	1, 0, 2, 1, 2, 2, 1, 27, 
	2, 2, 1, 2, 3, 84, 2, 3, 
	85, 2, 10, 3, 2, 20, 0, 2, 
	27, 1, 2, 28, 3, 2, 30, 3, 
	2, 31, 4, 2, 33, 5, 2, 34, 
	6, 2, 36, 6, 2, 37, 6, 2, 
	38, 6, 2, 39, 6, 2, 41, 6, 
	2, 44, 6, 2, 45, 6, 2, 46, 
	6, 2, 52, 8, 2, 53, 9, 2, 
	54, 9, 2, 55, 9, 2, 56, 9, 
	2, 57, 9, 2, 58, 9, 2, 59, 
	9, 2, 81, 9, 2, 82, 9, 3, 
	2, 28, 3, 3, 2, 31, 4, 3, 
	6, 52, 8, 3, 7, 0, 1, 3, 
	8, 53, 9, 3, 20, 0, 1, 3, 
	21, 0, 1, 3, 22, 0, 1, 3, 
	24, 0, 1, 3, 25, 0, 1, 3, 
	29, 30, 3, 3, 35, 34, 6, 3, 
	38, 39, 6, 3, 40, 39, 6, 3, 
	42, 41, 6, 3, 43, 39, 6, 3, 
	43, 41, 6, 3, 47, 46, 6, 3, 
	48, 46, 6, 3, 49, 37, 6, 3, 
	49, 38, 6, 3, 49, 39, 6, 3, 
	49, 41, 6, 3, 49, 44, 6, 3, 
	49, 46, 6, 3, 50, 34, 6, 3, 
	50, 38, 6, 3, 50, 39, 6, 3, 
	50, 41, 6, 3, 50, 46, 6, 3, 
	51, 36, 6, 3, 51, 45, 6, 3, 
	61, 60, 9, 3, 62, 60, 9, 3, 
	63, 60, 9, 3, 64, 60, 9, 3, 
	65, 60, 9, 3, 66, 60, 9, 3, 
	67, 60, 9, 3, 68, 60, 9, 3, 
	69, 60, 9, 3, 70, 60, 9, 3, 
	71, 60, 9, 3, 72, 60, 9, 3, 
	73, 60, 9, 3, 74, 60, 9, 3, 
	75, 60, 9, 3, 76, 60, 9, 3, 
	77, 60, 9, 3, 78, 60, 9, 3, 
	79, 60, 9, 3, 80, 60, 9, 3, 
	83, 82, 9, 4, 2, 31, 32, 3, 
	4, 5, 6, 52, 8, 4, 47, 48, 
	46, 6, 4, 48, 50, 46, 6, 4, 
	49, 47, 46, 6, 4, 69, 61, 60, 
	9, 4, 72, 61, 60, 9, 4, 73, 
	61, 60, 9, 4, 78, 61, 60, 9, 
	4, 79, 61, 60, 9, 4, 80, 61, 
	60, 9, 10, 34, 38, 39, 41, 36, 
	37, 46, 44, 45, 6
};

static const short _vcf_v41_key_offsets[] = {
	0, 0, 1, 2, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 20, 21, 22, 
	24, 36, 39, 43, 46, 47, 51, 55, 
	56, 60, 65, 75, 79, 83, 84, 88, 
	93, 98, 107, 117, 124, 130, 139, 148, 
	158, 165, 169, 173, 175, 179, 185, 205, 
	225, 244, 250, 256, 261, 267, 273, 277, 
	281, 285, 291, 311, 331, 350, 356, 362, 
	367, 373, 377, 381, 384, 385, 386, 387, 
	388, 396, 404, 405, 406, 407, 408, 409, 
	410, 411, 412, 413, 414, 415, 416, 417, 
	421, 425, 426, 427, 431, 436, 441, 449, 
	454, 458, 462, 466, 470, 473, 474, 475, 
	476, 477, 486, 495, 505, 506, 507, 508, 
	509, 510, 511, 512, 513, 514, 515, 516, 
	517, 518, 522, 526, 527, 528, 532, 537, 
	542, 546, 550, 554, 558, 561, 562, 563, 
	564, 565, 574, 583, 593, 594, 595, 596, 
	597, 598, 599, 600, 605, 606, 607, 608, 
	609, 610, 611, 615, 620, 621, 622, 623, 
	624, 625, 626, 627, 628, 629, 630, 631, 
	632, 633, 637, 641, 642, 643, 647, 652, 
	657, 660, 664, 668, 672, 675, 676, 677, 
	678, 679, 688, 697, 707, 708, 709, 710, 
	711, 712, 713, 714, 719, 720, 721, 722, 
	723, 724, 725, 729, 734, 735, 736, 737, 
	738, 739, 740, 741, 742, 743, 744, 745, 
	746, 747, 751, 755, 756, 757, 761, 766, 
	771, 774, 778, 782, 786, 790, 794, 798, 
	802, 805, 806, 815, 824, 834, 843, 852, 
	863, 864, 868, 872, 876, 880, 884, 887, 
	888, 889, 890, 891, 900, 909, 919, 920, 
	921, 922, 923, 924, 925, 926, 927, 935, 
	942, 943, 944, 945, 946, 947, 948, 949, 
	950, 958, 965, 966, 967, 968, 969, 970, 
	971, 972, 973, 974, 975, 976, 977, 978, 
	982, 986, 987, 988, 992, 997, 1002, 1006, 
	1010, 1014, 1018, 1022, 1026, 1030, 1033, 1037, 
	1042, 1047, 1048, 1049, 1053, 1054, 1058, 1062, 
	1066, 1070, 1074, 1077, 1078, 1079, 1080, 1081, 
	1087, 1104, 1122, 1129, 1138, 1147, 1157, 1164, 
	1170, 1171, 1175, 1179, 1181, 1185, 1191, 1211, 
	1231, 1250, 1256, 1262, 1267, 1273, 1279, 1283, 
	1287, 1291, 1295, 1299, 1303, 1307, 1311, 1315, 
	1318, 1319, 1323, 1328, 1333, 1334, 1335, 1339, 
	1341, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 
	1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 
	1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 
	1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 
	1374, 1375, 1376, 1377, 1378, 1379, 1381, 1382, 
	1383, 1384, 1385, 1386, 1387, 1388, 1390, 1394, 
	1411, 1415, 1417, 1420, 1424, 1428, 1438, 1449, 
	1464, 1466, 1473, 1477, 1479, 1484, 1500, 1515, 
	1519, 1547, 1563, 1569, 1574, 1584, 1587, 1592, 
	1598, 1614, 1630, 1636, 1637, 1640, 1647, 1651, 
	1656, 1683, 1690, 1697, 1704, 1711, 1715, 1720, 
	1726, 1728, 1731, 1741, 1746, 1758, 1761, 1774, 
	1779, 1783, 1785, 1791, 1796, 1803, 1807, 1809, 
	1817, 1821, 1823, 1829, 1838, 1839, 1840, 1844, 
	1845, 1846, 1851, 1855, 1857, 1862, 1869, 1874, 
	1881, 1885, 1887, 1894, 1898, 1900, 1905, 1913, 
	1914, 1915, 1918, 1919, 1920, 1927, 1934, 1941, 
	1948, 1953, 1959, 1968, 1976, 1982, 1984, 1987, 
	1992, 1996, 1998, 2003, 2010, 2017, 2022, 2026, 
	2028, 2033, 2041, 2047, 2049, 2052, 2058, 2060, 
	2063, 2070, 2076, 2081, 2085, 2087, 2092, 2099, 
	2103, 2105, 2112, 2116, 2118, 2123, 2131, 2132, 
	2133, 2136, 2137, 2138, 2145, 2150, 2154, 2156, 
	2161, 2169, 2174, 2181, 2185, 2187, 2194, 2198, 
	2200, 2205, 2213, 2214, 2215, 2218, 2219, 2220, 
	2227, 2234, 2241, 2248, 2255, 2261, 2263, 2266, 
	2273, 2280, 2287, 2294, 2301, 2308, 2315, 2322, 
	2328, 2330, 2333, 2351, 2366, 2382, 2386, 2388, 
	2391, 2397, 2398, 2399, 2400, 2403, 2404, 2405, 
	2420, 2430, 2442, 2450, 2458, 2473, 2480, 2497, 
	2513, 2519, 2523, 2525, 2528, 2534, 2550, 2566, 
	2572, 2573, 2580, 2597, 2613, 2619, 2623, 2625, 
	2628, 2634, 2650, 2666, 2672, 2673, 2680, 2697, 
	2713, 2719, 2723, 2725, 2728, 2734, 2750, 2766, 
	2772, 2773, 2780, 2797, 2813, 2819, 2823, 2825, 
	2828, 2834, 2850, 2866, 2872, 2873, 2884, 2900, 
	2907, 2908, 2909, 2916, 2923, 2923
};

static const char _vcf_v41_trans_keys[] = {
	35, 35, 102, 105, 108, 101, 102, 111, 
	114, 109, 97, 116, 61, 86, 67, 70, 
	118, 52, 46, 49, 10, 35, 35, 67, 
	65, 70, 73, 80, 83, 97, 99, 112, 
	32, 60, 62, 126, 61, 32, 126, 34, 
	60, 32, 126, 10, 32, 126, 35, 34, 
	92, 32, 126, 34, 92, 32, 126, 10, 
	34, 92, 32, 126, 10, 34, 92, 32, 
	126, 34, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 34, 92, 32, 126, 34, 
	92, 32, 126, 62, 34, 92, 32, 126, 
	34, 62, 92, 32, 126, 10, 34, 92, 
	32, 126, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 61, 95, 45, 46, 48, 
	57, 65, 90, 97, 122, 34, 32, 43, 
	45, 61, 63, 126, 44, 62, 32, 33, 
	35, 126, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 61, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 34, 32, 
	43, 45, 61, 63, 126, 34, 92, 32, 
	126, 34, 92, 32, 126, 44, 62, 34, 
	92, 32, 126, 34, 44, 62, 92, 32, 
	126, 34, 47, 92, 95, 32, 44, 45, 
	46, 48, 57, 58, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 34, 47, 92, 
	95, 32, 44, 45, 46, 48, 57, 58, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 34, 47, 61, 92, 95, 32, 44, 
	45, 57, 58, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 34, 44, 62, 92, 
	32, 126, 34, 44, 62, 92, 32, 126, 
	10, 34, 92, 32, 126, 34, 44, 62, 
	92, 32, 126, 34, 44, 62, 92, 32, 
	126, 34, 92, 32, 126, 34, 92, 32, 
	126, 34, 92, 32, 126, 34, 44, 62, 
	92, 32, 126, 34, 47, 92, 95, 32, 
	44, 45, 46, 48, 57, 58, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 34, 
	47, 92, 95, 32, 44, 45, 46, 48, 
	57, 58, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 34, 47, 61, 92, 95, 
	32, 44, 45, 57, 58, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 34, 44, 
	62, 92, 32, 126, 34, 44, 62, 92, 
	32, 126, 10, 34, 92, 32, 126, 34, 
	44, 62, 92, 32, 126, 61, 76, 32, 
	126, 61, 84, 32, 126, 61, 32, 126, 
	60, 73, 68, 61, 58, 95, 48, 57, 
	65, 90, 97, 122, 44, 95, 48, 58, 
	65, 90, 97, 122, 68, 101, 115, 99, 
	114, 105, 112, 116, 105, 111, 110, 61, 
	34, 34, 92, 32, 126, 34, 92, 32, 
	126, 62, 10, 34, 92, 32, 126, 34, 
	62, 92, 32, 126, 10, 34, 92, 32, 
	126, 58, 95, 48, 57, 65, 90, 97, 
	122, 61, 73, 79, 32, 126, 61, 76, 
	32, 126, 61, 84, 32, 126, 61, 69, 
	32, 126, 61, 82, 32, 126, 61, 32, 
	126, 60, 73, 68, 61, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 44, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 68, 101, 115, 99, 114, 105, 112, 
	116, 105, 111, 110, 61, 34, 34, 92, 
	32, 126, 34, 92, 32, 126, 62, 10, 
	34, 92, 32, 126, 34, 62, 92, 32, 
	126, 10, 34, 92, 32, 126, 61, 82, 
	32, 126, 61, 77, 32, 126, 61, 65, 
	32, 126, 61, 84, 32, 126, 61, 32, 
	126, 60, 73, 68, 61, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 44, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 78, 117, 109, 98, 101, 114, 61, 
	46, 65, 71, 48, 57, 44, 84, 121, 
	112, 101, 61, 65, 90, 97, 122, 44, 
	65, 90, 97, 122, 68, 101, 115, 99, 
	114, 105, 112, 116, 105, 111, 110, 61, 
	34, 34, 92, 32, 126, 34, 92, 32, 
	126, 62, 10, 34, 92, 32, 126, 34, 
	62, 92, 32, 126, 10, 34, 92, 32, 
	126, 44, 48, 57, 61, 78, 32, 126, 
	61, 70, 32, 126, 61, 79, 32, 126, 
	61, 32, 126, 60, 73, 68, 61, 95, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 44, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 78, 117, 109, 98, 101, 
	114, 61, 46, 65, 71, 48, 57, 44, 
	84, 121, 112, 101, 61, 65, 90, 97, 
	122, 44, 65, 90, 97, 122, 68, 101, 
	115, 99, 114, 105, 112, 116, 105, 111, 
	110, 61, 34, 34, 92, 32, 126, 34, 
	92, 32, 126, 62, 10, 34, 92, 32, 
	126, 34, 62, 92, 32, 126, 10, 34, 
	92, 32, 126, 44, 48, 57, 61, 69, 
	32, 126, 61, 68, 32, 126, 61, 73, 
	32, 126, 61, 71, 32, 126, 61, 82, 
	32, 126, 61, 69, 32, 126, 61, 69, 
	32, 126, 61, 32, 126, 60, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 95, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	61, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 44, 62, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 10, 
	61, 65, 32, 126, 61, 77, 32, 126, 
	61, 80, 32, 126, 61, 76, 32, 126, 
	61, 69, 32, 126, 61, 32, 126, 60, 
	73, 68, 61, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 95, 45, 46, 48, 
	57, 65, 90, 97, 122, 44, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 71, 
	101, 110, 111, 109, 101, 115, 61, 32, 
	33, 35, 43, 45, 61, 63, 126, 44, 
	32, 33, 35, 61, 63, 126, 77, 105, 
	120, 116, 117, 114, 101, 61, 32, 33, 
	35, 43, 45, 61, 63, 126, 44, 32, 
	33, 35, 61, 63, 126, 68, 101, 115, 
	99, 114, 105, 112, 116, 105, 111, 110, 
	61, 34, 34, 92, 32, 126, 34, 92, 
	32, 126, 62, 10, 34, 92, 32, 126, 
	34, 62, 92, 32, 126, 10, 34, 92, 
	32, 126, 61, 115, 32, 126, 61, 115, 
	32, 126, 61, 101, 32, 126, 61, 109, 
	32, 126, 61, 98, 32, 126, 61, 108, 
	32, 126, 61, 121, 32, 126, 61, 32, 
	126, 65, 90, 97, 122, 10, 35, 47, 
	58, 63, 10, 35, 47, 58, 63, 47, 
	47, 65, 90, 97, 122, 10, 61, 111, 
	32, 126, 61, 110, 32, 126, 61, 116, 
	32, 126, 61, 105, 32, 126, 61, 103, 
	32, 126, 61, 32, 126, 60, 73, 68, 
	61, 48, 57, 65, 90, 97, 122, 44, 
	59, 62, 33, 47, 48, 57, 61, 64, 
	65, 90, 91, 96, 97, 122, 123, 126, 
	59, 61, 33, 43, 45, 47, 48, 57, 
	63, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 44, 59, 62, 33, 57, 61, 
	126, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 95, 45, 46, 48, 57, 65, 
	90, 97, 122, 61, 95, 45, 46, 48, 
	57, 65, 90, 97, 122, 34, 32, 43, 
	45, 61, 63, 126, 44, 62, 32, 33, 
	35, 126, 10, 34, 92, 32, 126, 34, 
	92, 32, 126, 44, 62, 34, 92, 32, 
	126, 34, 44, 62, 92, 32, 126, 34, 
	47, 92, 95, 32, 44, 45, 46, 48, 
	57, 58, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 34, 47, 92, 95, 32, 
	44, 45, 46, 48, 57, 58, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 34, 
	47, 61, 92, 95, 32, 44, 45, 57, 
	58, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 34, 44, 62, 92, 32, 126, 
	34, 44, 62, 92, 32, 126, 10, 34, 
	92, 32, 126, 34, 44, 62, 92, 32, 
	126, 34, 44, 62, 92, 32, 126, 61, 
	101, 32, 126, 61, 100, 32, 126, 61, 
	105, 32, 126, 61, 103, 32, 126, 61, 
	114, 32, 126, 61, 101, 32, 126, 61, 
	101, 32, 126, 61, 68, 32, 126, 61, 
	66, 32, 126, 61, 32, 126, 60, 65, 
	90, 97, 122, 10, 35, 47, 58, 63, 
	10, 35, 47, 58, 63, 47, 47, 65, 
	90, 97, 122, 10, 62, 10, 62, 72, 
	82, 79, 77, 9, 80, 79, 83, 9, 
	73, 68, 9, 82, 69, 70, 9, 65, 
	76, 84, 9, 81, 85, 65, 76, 9, 
	70, 73, 76, 84, 69, 82, 9, 73, 
	78, 70, 79, 9, 10, 70, 79, 82, 
	77, 65, 84, 9, 32, 126, 9, 10, 
	32, 126, 9, 59, 61, 33, 47, 48, 
	57, 63, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 43, 45, 48, 57, 48, 
	57, 9, 48, 57, 33, 58, 60, 126, 
	9, 59, 33, 126, 65, 67, 71, 78, 
	84, 97, 99, 103, 110, 116, 9, 65, 
	67, 71, 78, 84, 97, 99, 103, 110, 
	116, 42, 46, 60, 65, 67, 71, 78, 
	84, 91, 93, 97, 99, 103, 110, 116, 
	9, 44, 43, 45, 46, 73, 78, 48, 
	57, 46, 73, 48, 57, 48, 57, 9, 
	69, 101, 48, 57, 46, 58, 33, 47, 
	48, 57, 60, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 58, 33, 47, 48, 
	57, 60, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 9, 59, 33, 126, 46, 
	49, 58, 60, 65, 66, 67, 68, 69, 
	72, 77, 78, 83, 86, 33, 47, 48, 
	57, 62, 64, 70, 90, 91, 96, 97, 
	122, 123, 126, 58, 60, 33, 47, 48, 
	57, 62, 64, 65, 90, 91, 96, 97, 
	122, 123, 126, 9, 10, 59, 61, 33, 
	126, 95, 65, 90, 97, 122, 9, 46, 
	58, 95, 48, 57, 65, 90, 97, 122, 
	46, 48, 57, 9, 10, 47, 58, 124, 
	48, 57, 65, 90, 97, 122, 59, 62, 
	33, 47, 48, 57, 61, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 59, 61, 
	33, 47, 48, 57, 63, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 59, 62, 
	33, 57, 61, 126, 9, 46, 48, 57, 
	9, 10, 47, 58, 124, 48, 57, 33, 
	57, 59, 126, 9, 10, 58, 33, 126, 
	49, 58, 60, 65, 66, 67, 68, 69, 
	72, 77, 78, 83, 86, 33, 47, 48, 
	57, 62, 64, 70, 90, 91, 96, 97, 
	122, 123, 126, 9, 10, 48, 59, 61, 
	33, 126, 9, 10, 48, 59, 61, 33, 
	126, 9, 10, 48, 59, 61, 33, 126, 
	9, 10, 59, 61, 71, 33, 126, 33, 
	58, 60, 126, 9, 10, 59, 33, 126, 
	9, 10, 59, 61, 33, 126, 48, 49, 
	9, 10, 59, 9, 10, 59, 61, 65, 
	67, 70, 78, 33, 126, 61, 33, 58, 
	60, 126, 65, 67, 71, 78, 84, 97, 
	99, 103, 110, 116, 45, 46, 9, 10, 
	59, 9, 10, 59, 65, 67, 71, 78, 
	84, 97, 99, 103, 110, 116, 61, 33, 
	58, 60, 126, 43, 45, 48, 57, 48, 
	57, 9, 10, 44, 59, 48, 57, 61, 
	33, 58, 60, 126, 43, 45, 46, 73, 
	78, 48, 57, 46, 73, 48, 57, 48, 
	57, 9, 10, 44, 59, 69, 101, 48, 
	57, 43, 45, 48, 57, 48, 57, 9, 
	10, 44, 59, 48, 57, 9, 10, 44, 
	46, 59, 69, 101, 48, 57, 110, 102, 
	9, 10, 44, 59, 97, 78, 61, 33, 
	58, 60, 126, 43, 45, 48, 57, 48, 
	57, 9, 10, 59, 48, 57, 9, 10, 
	59, 61, 81, 33, 126, 61, 33, 58, 
	60, 126, 43, 45, 46, 73, 78, 48, 
	57, 46, 73, 48, 57, 48, 57, 9, 
	10, 59, 69, 101, 48, 57, 43, 45, 
	48, 57, 48, 57, 9, 10, 59, 48, 
	57, 9, 10, 46, 59, 69, 101, 48, 
	57, 110, 102, 9, 10, 59, 97, 78, 
	9, 10, 59, 61, 73, 33, 126, 9, 
	10, 59, 61, 71, 33, 126, 9, 10, 
	59, 61, 65, 33, 126, 9, 10, 59, 
	61, 82, 33, 126, 61, 33, 58, 60, 
	126, 48, 57, 65, 90, 97, 122, 9, 
	10, 59, 48, 57, 65, 90, 97, 122, 
	9, 10, 59, 61, 66, 80, 33, 126, 
	9, 10, 59, 61, 33, 126, 48, 49, 
	9, 10, 59, 61, 33, 58, 60, 126, 
	43, 45, 48, 57, 48, 57, 9, 10, 
	59, 48, 57, 9, 10, 59, 61, 78, 
	33, 126, 9, 10, 59, 61, 68, 33, 
	126, 61, 33, 58, 60, 126, 43, 45, 
	48, 57, 48, 57, 9, 10, 59, 48, 
	57, 9, 10, 50, 51, 59, 61, 33, 
	126, 9, 10, 59, 61, 33, 126, 48, 
	49, 9, 10, 59, 9, 10, 59, 61, 
	33, 126, 48, 49, 9, 10, 59, 9, 
	10, 59, 61, 81, 33, 126, 48, 61, 
	33, 58, 60, 126, 61, 33, 58, 60, 
	126, 43, 45, 48, 57, 48, 57, 9, 
	10, 59, 48, 57, 43, 45, 46, 73, 
	78, 48, 57, 46, 73, 48, 57, 48, 
	57, 9, 10, 59, 69, 101, 48, 57, 
	43, 45, 48, 57, 48, 57, 9, 10, 
	59, 48, 57, 9, 10, 46, 59, 69, 
	101, 48, 57, 110, 102, 9, 10, 59, 
	97, 78, 9, 10, 59, 61, 83, 33, 
	126, 61, 33, 58, 60, 126, 43, 45, 
	48, 57, 48, 57, 9, 10, 59, 48, 
	57, 9, 10, 59, 61, 66, 79, 33, 
	126, 61, 33, 58, 60, 126, 43, 45, 
	46, 73, 78, 48, 57, 46, 73, 48, 
	57, 48, 57, 9, 10, 59, 69, 101, 
	48, 57, 43, 45, 48, 57, 48, 57, 
	9, 10, 59, 48, 57, 9, 10, 46, 
	59, 69, 101, 48, 57, 110, 102, 9, 
	10, 59, 97, 78, 9, 10, 59, 61, 
	77, 33, 126, 9, 10, 59, 61, 65, 
	33, 126, 9, 10, 59, 61, 84, 33, 
	126, 9, 10, 59, 61, 73, 33, 126, 
	9, 10, 59, 61, 67, 33, 126, 9, 
	10, 59, 61, 33, 126, 48, 49, 9, 
	10, 59, 9, 10, 59, 61, 65, 33, 
	126, 9, 10, 59, 61, 76, 33, 126, 
	9, 10, 59, 61, 73, 33, 126, 9, 
	10, 59, 61, 68, 33, 126, 9, 10, 
	59, 61, 65, 33, 126, 9, 10, 59, 
	61, 84, 33, 126, 9, 10, 59, 61, 
	69, 33, 126, 9, 10, 59, 61, 68, 
	33, 126, 9, 10, 59, 61, 33, 126, 
	48, 49, 9, 10, 59, 9, 10, 58, 
	60, 33, 47, 48, 57, 62, 64, 65, 
	90, 91, 96, 97, 122, 123, 126, 58, 
	33, 47, 48, 57, 60, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 9, 58, 
	33, 47, 48, 57, 60, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 43, 45, 
	48, 57, 48, 57, 9, 48, 57, 9, 
	46, 69, 101, 48, 57, 110, 102, 9, 
	9, 48, 57, 97, 78, 42, 46, 60, 
	65, 67, 71, 78, 84, 91, 93, 97, 
	99, 103, 110, 116, 65, 67, 71, 78, 
	84, 97, 99, 103, 110, 116, 9, 44, 
	65, 67, 71, 78, 84, 97, 99, 103, 
	110, 116, 58, 95, 48, 57, 65, 90, 
	97, 122, 62, 95, 48, 58, 65, 90, 
	97, 122, 9, 44, 46, 65, 67, 71, 
	78, 84, 91, 93, 97, 99, 103, 110, 
	116, 60, 48, 57, 65, 90, 97, 122, 
	58, 59, 61, 33, 47, 48, 57, 63, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 59, 61, 33, 47, 48, 57, 63, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 58, 61, 33, 59, 63, 126, 43, 
	45, 48, 57, 48, 57, 91, 48, 57, 
	48, 57, 65, 90, 97, 122, 59, 62, 
	33, 47, 48, 57, 61, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 59, 61, 
	33, 47, 48, 57, 63, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 59, 62, 
	33, 57, 61, 126, 58, 60, 48, 57, 
	65, 90, 97, 122, 58, 59, 61, 33, 
	47, 48, 57, 63, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 59, 61, 33, 
	47, 48, 57, 63, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 58, 61, 33, 
	59, 63, 126, 43, 45, 48, 57, 48, 
	57, 93, 48, 57, 48, 57, 65, 90, 
	97, 122, 59, 62, 33, 47, 48, 57, 
	61, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 59, 61, 33, 47, 48, 57, 
	63, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 59, 62, 33, 57, 61, 126, 
	58, 60, 48, 57, 65, 90, 97, 122, 
	58, 59, 61, 33, 47, 48, 57, 63, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 59, 61, 33, 47, 48, 57, 63, 
	64, 65, 90, 91, 96, 97, 122, 123, 
	126, 58, 61, 33, 59, 63, 126, 43, 
	45, 48, 57, 48, 57, 91, 48, 57, 
	48, 57, 65, 90, 97, 122, 59, 62, 
	33, 47, 48, 57, 61, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 59, 61, 
	33, 47, 48, 57, 63, 64, 65, 90, 
	91, 96, 97, 122, 123, 126, 59, 62, 
	33, 57, 61, 126, 58, 60, 48, 57, 
	65, 90, 97, 122, 58, 59, 61, 33, 
	47, 48, 57, 63, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 59, 61, 33, 
	47, 48, 57, 63, 64, 65, 90, 91, 
	96, 97, 122, 123, 126, 58, 61, 33, 
	59, 63, 126, 43, 45, 48, 57, 48, 
	57, 93, 48, 57, 48, 57, 65, 90, 
	97, 122, 59, 62, 33, 47, 48, 57, 
	61, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 59, 61, 33, 47, 48, 57, 
	63, 64, 65, 90, 91, 96, 97, 122, 
	123, 126, 59, 62, 33, 57, 61, 126, 
	58, 9, 65, 67, 71, 78, 84, 97, 
	99, 103, 110, 116, 59, 61, 33, 47, 
	48, 57, 63, 64, 65, 90, 91, 96, 
	97, 122, 123, 126, 9, 59, 61, 33, 
	57, 63, 126, 10, 10, 60, 48, 57, 
	65, 90, 97, 122, 60, 48, 57, 65, 
	90, 97, 122, 0
};

static const char _vcf_v41_single_lengths[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	8, 1, 2, 1, 1, 2, 2, 1, 
	2, 3, 2, 2, 2, 1, 2, 3, 
	3, 1, 2, 1, 2, 1, 1, 2, 
	1, 2, 2, 2, 2, 4, 4, 4, 
	5, 4, 4, 3, 4, 4, 2, 2, 
	2, 4, 4, 4, 5, 4, 4, 3, 
	4, 2, 2, 1, 1, 1, 1, 1, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 1, 1, 2, 3, 3, 2, 3, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 2, 1, 1, 2, 3, 3, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 2, 1, 1, 2, 3, 3, 
	1, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 2, 1, 1, 2, 3, 3, 
	1, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 2, 1, 1, 3, 
	1, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 1, 1, 2, 3, 3, 2, 2, 
	2, 2, 2, 2, 2, 1, 0, 5, 
	5, 1, 1, 0, 1, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 0, 
	3, 2, 3, 1, 1, 2, 1, 2, 
	1, 2, 2, 2, 2, 4, 4, 4, 
	5, 4, 4, 3, 4, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 5, 5, 1, 1, 0, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 0, 2, 3, 
	2, 0, 1, 0, 2, 10, 11, 15, 
	2, 5, 2, 0, 3, 2, 1, 2, 
	14, 2, 4, 1, 4, 1, 5, 0, 
	2, 2, 2, 1, 1, 5, 0, 3, 
	13, 5, 5, 5, 5, 0, 3, 4, 
	0, 3, 8, 1, 10, 3, 13, 1, 
	2, 0, 4, 1, 5, 2, 0, 6, 
	2, 0, 4, 7, 1, 1, 4, 1, 
	1, 1, 2, 0, 3, 5, 1, 5, 
	2, 0, 5, 2, 0, 3, 6, 1, 
	1, 3, 1, 1, 5, 5, 5, 5, 
	1, 0, 3, 6, 4, 0, 3, 1, 
	2, 0, 3, 5, 5, 1, 2, 0, 
	3, 6, 4, 0, 3, 4, 0, 3, 
	5, 2, 1, 2, 0, 3, 5, 2, 
	0, 5, 2, 0, 3, 6, 1, 1, 
	3, 1, 1, 5, 1, 2, 0, 3, 
	6, 1, 5, 2, 0, 5, 2, 0, 
	3, 6, 1, 1, 3, 1, 1, 5, 
	5, 5, 5, 5, 4, 0, 3, 5, 
	5, 5, 5, 5, 5, 5, 5, 4, 
	0, 3, 4, 1, 2, 2, 0, 1, 
	4, 1, 1, 1, 1, 1, 1, 15, 
	10, 12, 2, 2, 15, 1, 3, 2, 
	2, 2, 0, 1, 0, 2, 2, 2, 
	1, 1, 3, 2, 2, 2, 0, 1, 
	0, 2, 2, 2, 1, 1, 3, 2, 
	2, 2, 0, 1, 0, 2, 2, 2, 
	1, 1, 3, 2, 2, 2, 0, 1, 
	0, 2, 2, 2, 1, 11, 2, 3, 
	1, 1, 1, 1, 0, 0
};

static const char _vcf_v41_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	2, 1, 1, 1, 0, 1, 1, 0, 
	1, 1, 4, 1, 1, 0, 1, 1, 
	1, 4, 4, 3, 2, 4, 4, 4, 
	3, 1, 1, 0, 1, 1, 8, 8, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 8, 8, 7, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	3, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 1, 3, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 4, 4, 4, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 4, 4, 4, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 2, 2, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 4, 4, 4, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 2, 2, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 4, 4, 4, 4, 4, 4, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 4, 4, 4, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	4, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 0, 
	0, 0, 0, 2, 0, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 3, 
	7, 8, 2, 4, 4, 4, 3, 2, 
	0, 1, 1, 0, 1, 1, 8, 8, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 2, 0, 0, 0, 0, 2, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 7, 
	1, 1, 1, 2, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 7, 7, 1, 
	7, 7, 1, 2, 3, 1, 0, 3, 
	7, 7, 2, 0, 1, 1, 2, 1, 
	7, 1, 1, 1, 1, 2, 1, 1, 
	1, 0, 1, 2, 1, 0, 0, 2, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 2, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	2, 3, 3, 1, 1, 1, 0, 2, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 0, 1, 1, 0, 
	1, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 7, 7, 7, 1, 1, 1, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 3, 3, 0, 3, 7, 7, 
	2, 1, 1, 1, 3, 7, 7, 2, 
	0, 3, 7, 7, 2, 1, 1, 1, 
	3, 7, 7, 2, 0, 3, 7, 7, 
	2, 1, 1, 1, 3, 7, 7, 2, 
	0, 3, 7, 7, 2, 1, 1, 1, 
	3, 7, 7, 2, 0, 0, 7, 2, 
	0, 0, 3, 3, 0, 0
};

static const short _vcf_v41_index_offsets[] = {
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 22, 24, 26, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	47, 58, 61, 65, 68, 70, 74, 78, 
	80, 84, 89, 96, 100, 104, 106, 110, 
	115, 120, 126, 133, 138, 143, 149, 155, 
	162, 167, 171, 175, 178, 182, 188, 201, 
	214, 227, 233, 239, 244, 250, 256, 260, 
	264, 268, 274, 287, 300, 313, 319, 325, 
	330, 336, 340, 344, 347, 349, 351, 353, 
	355, 361, 367, 369, 371, 373, 375, 377, 
	379, 381, 383, 385, 387, 389, 391, 393, 
	397, 401, 403, 405, 409, 414, 419, 425, 
	430, 434, 438, 442, 446, 449, 451, 453, 
	455, 457, 463, 469, 476, 478, 480, 482, 
	484, 486, 488, 490, 492, 494, 496, 498, 
	500, 502, 506, 510, 512, 514, 518, 523, 
	528, 532, 536, 540, 544, 547, 549, 551, 
	553, 555, 561, 567, 574, 576, 578, 580, 
	582, 584, 586, 588, 593, 595, 597, 599, 
	601, 603, 605, 608, 612, 614, 616, 618, 
	620, 622, 624, 626, 628, 630, 632, 634, 
	636, 638, 642, 646, 648, 650, 654, 659, 
	664, 667, 671, 675, 679, 682, 684, 686, 
	688, 690, 696, 702, 709, 711, 713, 715, 
	717, 719, 721, 723, 728, 730, 732, 734, 
	736, 738, 740, 743, 747, 749, 751, 753, 
	755, 757, 759, 761, 763, 765, 767, 769, 
	771, 773, 777, 781, 783, 785, 789, 794, 
	799, 802, 806, 810, 814, 818, 822, 826, 
	830, 833, 835, 841, 847, 854, 860, 866, 
	874, 876, 880, 884, 888, 892, 896, 899, 
	901, 903, 905, 907, 913, 919, 926, 928, 
	930, 932, 934, 936, 938, 940, 942, 947, 
	952, 954, 956, 958, 960, 962, 964, 966, 
	968, 973, 978, 980, 982, 984, 986, 988, 
	990, 992, 994, 996, 998, 1000, 1002, 1004, 
	1008, 1012, 1014, 1016, 1020, 1025, 1030, 1034, 
	1038, 1042, 1046, 1050, 1054, 1058, 1061, 1064, 
	1070, 1076, 1078, 1080, 1083, 1085, 1089, 1093, 
	1097, 1101, 1105, 1108, 1110, 1112, 1114, 1116, 
	1120, 1131, 1142, 1148, 1154, 1160, 1167, 1172, 
	1177, 1179, 1183, 1187, 1190, 1194, 1200, 1213, 
	1226, 1239, 1245, 1251, 1256, 1262, 1268, 1272, 
	1276, 1280, 1284, 1288, 1292, 1296, 1300, 1304, 
	1307, 1309, 1312, 1318, 1324, 1326, 1328, 1331, 
	1334, 1337, 1339, 1341, 1343, 1345, 1347, 1349, 
	1351, 1353, 1355, 1357, 1359, 1361, 1363, 1365, 
	1367, 1369, 1371, 1373, 1375, 1377, 1379, 1381, 
	1383, 1385, 1387, 1389, 1391, 1393, 1395, 1397, 
	1399, 1401, 1403, 1405, 1407, 1409, 1412, 1414, 
	1416, 1418, 1420, 1422, 1424, 1426, 1428, 1432, 
	1443, 1447, 1449, 1452, 1455, 1459, 1470, 1482, 
	1498, 1501, 1508, 1512, 1514, 1519, 1529, 1538, 
	1542, 1564, 1574, 1580, 1584, 1592, 1595, 1601, 
	1605, 1615, 1625, 1630, 1632, 1635, 1642, 1645, 
	1650, 1671, 1678, 1685, 1692, 1699, 1702, 1707, 
	1713, 1715, 1719, 1729, 1733, 1745, 1749, 1763, 
	1767, 1771, 1773, 1779, 1783, 1790, 1794, 1796, 
	1804, 1808, 1810, 1816, 1825, 1827, 1829, 1834, 
	1836, 1838, 1842, 1846, 1848, 1853, 1860, 1864, 
	1871, 1875, 1877, 1884, 1888, 1890, 1895, 1903, 
	1905, 1907, 1911, 1913, 1915, 1922, 1929, 1936, 
	1943, 1947, 1951, 1958, 1966, 1972, 1974, 1978, 
	1982, 1986, 1988, 1993, 2000, 2007, 2011, 2015, 
	2017, 2022, 2030, 2036, 2038, 2042, 2048, 2050, 
	2054, 2061, 2066, 2070, 2074, 2076, 2081, 2088, 
	2092, 2094, 2101, 2105, 2107, 2112, 2120, 2122, 
	2124, 2128, 2130, 2132, 2139, 2143, 2147, 2149, 
	2154, 2162, 2166, 2173, 2177, 2179, 2186, 2190, 
	2192, 2197, 2205, 2207, 2209, 2213, 2215, 2217, 
	2224, 2231, 2238, 2245, 2252, 2258, 2260, 2264, 
	2271, 2278, 2285, 2292, 2299, 2306, 2313, 2320, 
	2326, 2328, 2332, 2344, 2353, 2363, 2367, 2369, 
	2372, 2378, 2380, 2382, 2384, 2387, 2389, 2391, 
	2407, 2418, 2431, 2437, 2443, 2459, 2464, 2475, 
	2485, 2490, 2494, 2496, 2499, 2503, 2513, 2523, 
	2528, 2530, 2535, 2546, 2556, 2561, 2565, 2567, 
	2570, 2574, 2584, 2594, 2599, 2601, 2606, 2617, 
	2627, 2632, 2636, 2638, 2641, 2645, 2655, 2665, 
	2670, 2672, 2677, 2688, 2698, 2703, 2707, 2709, 
	2712, 2716, 2726, 2736, 2741, 2743, 2755, 2765, 
	2771, 2773, 2775, 2780, 2785, 2786
};

static const short _vcf_v41_indicies[] = {
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 11, 0, 12, 0, 
	13, 0, 15, 14, 16, 14, 17, 14, 
	18, 14, 19, 14, 20, 14, 21, 14, 
	22, 14, 24, 23, 26, 27, 25, 30, 
	31, 32, 33, 34, 35, 36, 37, 29, 
	29, 28, 40, 39, 38, 42, 43, 41, 
	38, 44, 45, 38, 24, 25, 47, 48, 
	46, 38, 50, 51, 49, 38, 52, 38, 
	53, 51, 49, 38, 52, 50, 51, 49, 
	38, 54, 55, 55, 56, 56, 56, 38, 
	58, 59, 57, 38, 61, 62, 60, 38, 
	63, 38, 64, 62, 60, 38, 61, 65, 
	62, 60, 38, 52, 61, 62, 60, 38, 
	66, 66, 67, 67, 67, 38, 68, 67, 
	67, 67, 67, 67, 38, 70, 69, 69, 
	69, 38, 72, 50, 71, 71, 38, 73, 
	73, 74, 74, 74, 38, 75, 75, 76, 
	76, 76, 38, 77, 76, 76, 76, 76, 
	76, 38, 78, 69, 69, 69, 38, 80, 
	81, 79, 38, 83, 84, 82, 38, 85, 
	63, 38, 86, 84, 82, 38, 83, 87, 
	88, 84, 82, 38, 83, 82, 84, 89, 
	82, 89, 90, 82, 90, 82, 90, 82, 
	38, 83, 82, 84, 91, 82, 91, 92, 
	82, 92, 82, 92, 82, 38, 83, 82, 
	93, 84, 92, 82, 92, 82, 92, 82, 
	92, 82, 38, 95, 82, 82, 96, 94, 
	38, 83, 98, 99, 100, 97, 38, 52, 
	83, 84, 82, 38, 86, 98, 99, 100, 
	97, 38, 80, 101, 102, 81, 79, 38, 
	80, 104, 103, 38, 83, 106, 105, 38, 
	107, 106, 105, 38, 83, 108, 109, 106, 
	105, 38, 83, 105, 106, 110, 105, 110, 
	111, 105, 111, 105, 111, 105, 38, 83, 
	105, 106, 112, 105, 112, 113, 105, 113, 
	105, 113, 105, 38, 83, 105, 114, 106, 
	113, 105, 113, 105, 113, 105, 113, 105, 
	38, 95, 105, 105, 116, 115, 38, 83, 
	118, 119, 120, 117, 38, 52, 83, 106, 
	105, 38, 107, 118, 119, 120, 117, 38, 
	40, 122, 39, 121, 40, 123, 39, 121, 
	124, 39, 121, 125, 121, 126, 121, 127, 
	121, 128, 121, 131, 131, 130, 130, 130, 
	129, 132, 133, 133, 133, 133, 129, 134, 
	121, 135, 121, 136, 121, 137, 121, 138, 
	121, 139, 121, 140, 121, 141, 121, 142, 
	121, 143, 121, 144, 121, 145, 121, 146, 
	121, 149, 150, 148, 147, 152, 153, 151, 
	147, 154, 147, 52, 121, 155, 153, 151, 
	147, 152, 156, 153, 151, 147, 52, 152, 
	153, 151, 147, 157, 157, 133, 133, 133, 
	129, 40, 159, 160, 39, 158, 40, 162, 
	39, 161, 40, 163, 39, 161, 40, 164, 
	39, 161, 40, 165, 39, 161, 166, 39, 
	161, 167, 161, 168, 161, 169, 161, 170, 
	161, 172, 172, 173, 173, 173, 171, 174, 
	174, 175, 175, 175, 171, 176, 175, 175, 
	175, 175, 175, 171, 177, 161, 178, 161, 
	179, 161, 180, 161, 181, 161, 182, 161, 
	183, 161, 184, 161, 185, 161, 186, 161, 
	187, 161, 188, 161, 189, 161, 192, 193, 
	191, 190, 195, 196, 194, 190, 197, 190, 
	52, 161, 198, 196, 194, 190, 195, 199, 
	196, 194, 190, 52, 195, 196, 194, 190, 
	40, 201, 39, 200, 40, 202, 39, 200, 
	40, 203, 39, 200, 40, 204, 39, 200, 
	205, 39, 200, 206, 200, 207, 200, 208, 
	200, 209, 200, 211, 211, 212, 212, 212, 
	210, 213, 213, 214, 214, 214, 210, 215, 
	214, 214, 214, 214, 214, 210, 216, 200, 
	217, 200, 218, 200, 219, 200, 220, 200, 
	221, 200, 222, 200, 224, 224, 224, 225, 
	223, 226, 223, 227, 200, 228, 200, 229, 
	200, 230, 200, 231, 200, 233, 233, 232, 
	234, 235, 235, 232, 236, 200, 237, 200, 
	238, 200, 239, 200, 240, 200, 241, 200, 
	242, 200, 243, 200, 244, 200, 245, 200, 
	246, 200, 247, 200, 248, 200, 251, 252, 
	250, 249, 254, 255, 253, 249, 256, 249, 
	52, 200, 257, 255, 253, 249, 254, 258, 
	255, 253, 249, 52, 254, 255, 253, 249, 
	226, 259, 223, 40, 261, 39, 260, 40, 
	262, 39, 260, 40, 263, 39, 260, 264, 
	39, 260, 265, 260, 266, 260, 267, 260, 
	268, 260, 270, 270, 271, 271, 271, 269, 
	272, 272, 273, 273, 273, 269, 274, 273, 
	273, 273, 273, 273, 269, 275, 260, 276, 
	260, 277, 260, 278, 260, 279, 260, 280, 
	260, 281, 260, 283, 283, 283, 284, 282, 
	285, 282, 286, 260, 287, 260, 288, 260, 
	289, 260, 290, 260, 292, 292, 291, 293, 
	294, 294, 291, 295, 260, 296, 260, 297, 
	260, 298, 260, 299, 260, 300, 260, 301, 
	260, 302, 260, 303, 260, 304, 260, 305, 
	260, 306, 260, 307, 260, 310, 311, 309, 
	308, 313, 314, 312, 308, 315, 308, 52, 
	260, 316, 314, 312, 308, 313, 317, 314, 
	312, 308, 52, 313, 314, 312, 308, 285, 
	318, 282, 40, 320, 39, 319, 40, 321, 
	39, 319, 40, 322, 39, 319, 40, 323, 
	39, 319, 40, 324, 39, 319, 40, 325, 
	39, 319, 40, 326, 39, 319, 327, 39, 
	319, 328, 319, 330, 330, 331, 331, 331, 
	329, 332, 332, 333, 333, 333, 329, 334, 
	333, 333, 333, 333, 333, 329, 335, 335, 
	336, 336, 336, 329, 337, 337, 338, 338, 
	338, 329, 339, 340, 338, 338, 338, 338, 
	338, 329, 52, 319, 40, 342, 39, 341, 
	40, 343, 39, 341, 40, 344, 39, 341, 
	40, 345, 39, 341, 40, 346, 39, 341, 
	347, 39, 341, 348, 341, 349, 341, 350, 
	341, 351, 341, 353, 353, 354, 354, 354, 
	352, 355, 355, 356, 356, 356, 352, 358, 
	356, 356, 356, 356, 356, 357, 360, 359, 
	361, 359, 362, 359, 363, 359, 364, 359, 
	365, 359, 366, 359, 367, 359, 368, 368, 
	368, 368, 359, 371, 370, 370, 370, 369, 
	373, 372, 374, 372, 375, 372, 376, 372, 
	377, 372, 378, 372, 379, 372, 380, 372, 
	381, 381, 381, 381, 372, 384, 383, 383, 
	383, 382, 386, 385, 387, 385, 388, 385, 
	389, 385, 390, 385, 391, 385, 392, 385, 
	393, 385, 394, 385, 395, 385, 396, 385, 
	397, 385, 398, 385, 400, 401, 399, 385, 
	403, 404, 402, 385, 405, 385, 52, 341, 
	406, 404, 402, 385, 403, 407, 404, 402, 
	385, 52, 403, 404, 402, 385, 40, 409, 
	39, 408, 40, 410, 39, 408, 40, 411, 
	39, 408, 40, 412, 39, 408, 40, 413, 
	39, 408, 40, 414, 39, 408, 40, 415, 
	39, 408, 416, 39, 408, 418, 418, 417, 
	417, 417, 417, 417, 417, 419, 417, 417, 
	417, 420, 417, 419, 421, 417, 422, 417, 
	423, 423, 417, 44, 423, 40, 425, 39, 
	424, 40, 426, 39, 424, 40, 427, 39, 
	424, 40, 428, 39, 424, 40, 429, 39, 
	424, 430, 39, 424, 431, 424, 432, 424, 
	433, 424, 434, 424, 436, 436, 436, 435, 
	438, 437, 440, 437, 439, 437, 439, 437, 
	439, 437, 435, 437, 437, 437, 437, 439, 
	437, 439, 437, 439, 437, 435, 438, 439, 
	440, 439, 439, 435, 441, 441, 442, 442, 
	442, 424, 443, 443, 444, 444, 444, 424, 
	445, 444, 444, 444, 444, 444, 424, 447, 
	446, 446, 446, 424, 438, 440, 448, 448, 
	424, 52, 424, 450, 451, 449, 424, 453, 
	454, 452, 424, 455, 456, 424, 457, 454, 
	452, 424, 453, 458, 459, 454, 452, 424, 
	453, 452, 454, 460, 452, 460, 461, 452, 
	461, 452, 461, 452, 424, 453, 452, 454, 
	462, 452, 462, 463, 452, 463, 452, 463, 
	452, 424, 453, 452, 464, 454, 463, 452, 
	463, 452, 463, 452, 463, 452, 424, 466, 
	452, 452, 467, 465, 424, 453, 469, 470, 
	471, 468, 424, 52, 453, 454, 452, 424, 
	457, 469, 470, 471, 468, 424, 450, 472, 
	473, 451, 449, 424, 40, 475, 39, 474, 
	40, 476, 39, 474, 40, 477, 39, 474, 
	40, 478, 39, 474, 40, 479, 39, 474, 
	40, 480, 39, 474, 40, 481, 39, 474, 
	40, 482, 39, 474, 40, 483, 39, 474, 
	484, 39, 474, 485, 474, 487, 487, 486, 
	486, 486, 486, 486, 486, 488, 486, 486, 
	486, 489, 486, 488, 490, 486, 491, 486, 
	492, 492, 486, 486, 493, 492, 52, 493, 
	492, 495, 494, 496, 494, 497, 494, 498, 
	494, 499, 494, 500, 494, 501, 494, 502, 
	494, 503, 494, 504, 494, 505, 494, 506, 
	494, 507, 494, 508, 494, 509, 494, 510, 
	494, 511, 494, 512, 494, 513, 494, 514, 
	494, 515, 494, 516, 494, 517, 494, 518, 
	494, 519, 494, 520, 494, 521, 494, 522, 
	494, 523, 494, 524, 494, 525, 494, 526, 
	494, 527, 494, 528, 494, 529, 494, 530, 
	494, 531, 532, 494, 534, 533, 535, 533, 
	536, 533, 537, 533, 538, 533, 539, 533, 
	540, 533, 541, 533, 542, 543, 544, 533, 
	546, 547, 547, 547, 548, 547, 548, 547, 
	548, 547, 545, 550, 550, 551, 549, 552, 
	549, 553, 552, 549, 555, 555, 554, 556, 
	558, 557, 554, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 559, 561, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 559, 564, 565, 566, 567, 567, 567, 
	567, 567, 568, 569, 567, 567, 567, 567, 
	567, 563, 570, 571, 563, 573, 573, 574, 
	576, 577, 575, 572, 578, 580, 579, 572, 
	581, 572, 582, 583, 583, 581, 572, 586, 
	585, 585, 587, 585, 587, 585, 587, 585, 
	584, 588, 588, 589, 588, 589, 588, 589, 
	588, 584, 590, 591, 589, 584, 594, 596, 
	593, 593, 597, 598, 599, 600, 601, 602, 
	603, 604, 605, 606, 593, 595, 593, 595, 
	593, 595, 593, 592, 607, 607, 607, 608, 
	607, 608, 607, 608, 607, 592, 609, 610, 
	611, 612, 608, 592, 614, 614, 614, 613, 
	615, 616, 617, 616, 616, 616, 616, 613, 
	619, 620, 618, 615, 610, 621, 622, 621, 
	618, 623, 623, 623, 545, 624, 626, 624, 
	625, 624, 625, 624, 625, 624, 545, 624, 
	624, 624, 625, 624, 625, 624, 625, 624, 
	545, 625, 626, 625, 625, 545, 627, 545, 
	628, 629, 618, 615, 610, 621, 622, 621, 
	629, 618, 631, 631, 630, 615, 610, 622, 
	631, 630, 596, 593, 593, 597, 598, 599, 
	600, 601, 602, 603, 604, 605, 606, 593, 
	595, 593, 595, 593, 595, 593, 592, 609, 
	610, 632, 611, 612, 608, 592, 609, 610, 
	633, 611, 612, 608, 592, 609, 610, 634, 
	611, 612, 608, 592, 609, 610, 611, 612, 
	635, 608, 592, 637, 637, 636, 609, 610, 
	611, 637, 636, 609, 610, 611, 639, 608, 
	638, 641, 640, 609, 610, 611, 640, 609, 
	610, 611, 612, 642, 643, 644, 645, 608, 
	592, 646, 608, 608, 592, 649, 649, 649, 
	649, 649, 649, 649, 649, 649, 649, 648, 
	647, 609, 610, 611, 647, 609, 610, 611, 
	649, 649, 649, 649, 649, 649, 649, 649, 
	649, 649, 647, 650, 608, 608, 592, 652, 
	652, 653, 651, 653, 651, 609, 610, 650, 
	611, 653, 651, 654, 608, 608, 592, 656, 
	656, 657, 659, 660, 658, 655, 657, 659, 
	658, 655, 661, 655, 609, 610, 654, 611, 
	662, 662, 661, 655, 663, 663, 664, 655, 
	664, 655, 609, 610, 654, 611, 664, 655, 
	609, 610, 654, 657, 611, 662, 662, 658, 
	655, 665, 655, 666, 655, 609, 610, 654, 
	611, 655, 667, 655, 666, 655, 668, 608, 
	608, 592, 670, 670, 671, 669, 671, 669, 
	609, 610, 611, 671, 669, 609, 610, 611, 
	612, 672, 608, 592, 673, 608, 608, 592, 
	675, 675, 676, 678, 679, 677, 674, 676, 
	678, 677, 674, 680, 674, 609, 610, 611, 
	681, 681, 680, 674, 682, 682, 683, 674, 
	683, 674, 609, 610, 611, 683, 674, 609, 
	610, 676, 611, 681, 681, 677, 674, 684, 
	674, 685, 674, 609, 610, 611, 674, 686, 
	674, 685, 674, 609, 610, 611, 612, 687, 
	608, 592, 609, 610, 611, 612, 688, 608, 
	592, 609, 610, 611, 612, 689, 608, 592, 
	609, 610, 611, 612, 690, 608, 592, 691, 
	608, 608, 592, 693, 693, 693, 692, 609, 
	610, 611, 693, 693, 693, 692, 609, 610, 
	611, 612, 694, 695, 608, 592, 609, 610, 
	611, 697, 608, 696, 699, 698, 609, 610, 
	611, 698, 700, 608, 608, 592, 702, 702, 
	703, 701, 703, 701, 609, 610, 611, 703, 
	701, 609, 610, 611, 612, 704, 608, 592, 
	609, 610, 611, 612, 705, 608, 592, 706, 
	608, 608, 592, 708, 708, 709, 707, 709, 
	707, 609, 610, 611, 709, 707, 609, 610, 
	710, 711, 611, 612, 608, 592, 609, 610, 
	611, 713, 608, 712, 715, 714, 609, 610, 
	611, 714, 609, 610, 611, 717, 608, 716, 
	719, 718, 609, 610, 611, 718, 609, 610, 
	611, 612, 720, 608, 592, 721, 722, 608, 
	608, 592, 723, 608, 608, 592, 725, 725, 
	726, 724, 726, 724, 609, 610, 611, 726, 
	724, 728, 728, 729, 731, 732, 730, 727, 
	729, 731, 730, 727, 733, 727, 609, 610, 
	611, 734, 734, 733, 727, 735, 735, 736, 
	727, 736, 727, 609, 610, 611, 736, 727, 
	609, 610, 729, 611, 734, 734, 730, 727, 
	737, 727, 738, 727, 609, 610, 611, 727, 
	739, 727, 738, 727, 609, 610, 611, 612, 
	740, 608, 592, 741, 608, 608, 592, 743, 
	743, 744, 742, 744, 742, 609, 610, 611, 
	744, 742, 609, 610, 611, 612, 745, 746, 
	608, 592, 747, 608, 608, 592, 749, 749, 
	750, 752, 753, 751, 748, 750, 752, 751, 
	748, 754, 748, 609, 610, 611, 755, 755, 
	754, 748, 756, 756, 757, 748, 757, 748, 
	609, 610, 611, 757, 748, 609, 610, 750, 
	611, 755, 755, 751, 748, 758, 748, 759, 
	748, 609, 610, 611, 748, 760, 748, 759, 
	748, 609, 610, 611, 612, 761, 608, 592, 
	609, 610, 611, 612, 762, 608, 592, 609, 
	610, 611, 612, 763, 608, 592, 609, 610, 
	611, 612, 764, 608, 592, 609, 610, 611, 
	612, 765, 608, 592, 609, 610, 611, 767, 
	608, 766, 769, 768, 609, 610, 611, 768, 
	609, 610, 611, 612, 770, 608, 592, 609, 
	610, 611, 612, 771, 608, 592, 609, 610, 
	611, 612, 772, 608, 592, 609, 610, 611, 
	612, 773, 608, 592, 609, 610, 611, 612, 
	774, 608, 592, 609, 610, 611, 612, 775, 
	608, 592, 609, 610, 611, 612, 776, 608, 
	592, 609, 610, 611, 612, 777, 608, 592, 
	609, 610, 611, 779, 608, 778, 781, 780, 
	609, 610, 611, 780, 609, 610, 607, 607, 
	607, 608, 607, 608, 607, 608, 607, 592, 
	585, 585, 587, 585, 587, 585, 587, 585, 
	584, 590, 588, 588, 589, 588, 589, 588, 
	589, 588, 584, 782, 782, 783, 572, 783, 
	572, 582, 783, 572, 582, 578, 583, 583, 
	579, 572, 784, 572, 785, 572, 582, 572, 
	582, 581, 572, 786, 572, 785, 572, 564, 
	787, 566, 567, 567, 567, 567, 567, 568, 
	569, 567, 567, 567, 567, 567, 563, 788, 
	788, 788, 788, 788, 788, 788, 788, 788, 
	788, 563, 570, 571, 788, 788, 788, 788, 
	788, 788, 788, 788, 788, 788, 563, 790, 
	790, 789, 789, 789, 563, 791, 789, 789, 
	789, 789, 563, 570, 571, 791, 792, 792, 
	792, 792, 792, 793, 794, 792, 792, 792, 
	792, 792, 563, 796, 795, 795, 795, 563, 
	799, 797, 797, 797, 798, 797, 798, 797, 
	798, 797, 563, 797, 797, 797, 798, 797, 
	798, 797, 798, 797, 563, 799, 798, 798, 
	798, 563, 800, 800, 801, 563, 801, 563, 
	791, 801, 563, 802, 802, 802, 563, 803, 
	805, 803, 804, 803, 804, 803, 804, 803, 
	563, 803, 803, 803, 804, 803, 804, 803, 
	804, 803, 563, 804, 805, 804, 804, 563, 
	799, 563, 807, 806, 806, 806, 563, 810, 
	808, 808, 808, 809, 808, 809, 808, 809, 
	808, 563, 808, 808, 808, 809, 808, 809, 
	808, 809, 808, 563, 810, 809, 809, 809, 
	563, 811, 811, 812, 563, 812, 563, 791, 
	812, 563, 813, 813, 813, 563, 814, 816, 
	814, 815, 814, 815, 814, 815, 814, 563, 
	814, 814, 814, 815, 814, 815, 814, 815, 
	814, 563, 815, 816, 815, 815, 563, 810, 
	563, 818, 817, 817, 817, 563, 821, 819, 
	819, 819, 820, 819, 820, 819, 820, 819, 
	563, 819, 819, 819, 820, 819, 820, 819, 
	820, 819, 563, 821, 820, 820, 820, 563, 
	822, 822, 823, 563, 823, 563, 824, 823, 
	563, 825, 825, 825, 563, 826, 828, 826, 
	827, 826, 827, 826, 827, 826, 563, 826, 
	826, 826, 827, 826, 827, 826, 827, 826, 
	563, 827, 828, 827, 827, 563, 821, 563, 
	830, 829, 829, 829, 563, 833, 831, 831, 
	831, 832, 831, 832, 831, 832, 831, 563, 
	831, 831, 831, 832, 831, 832, 831, 832, 
	831, 563, 833, 832, 832, 832, 563, 834, 
	834, 835, 563, 835, 563, 824, 835, 563, 
	836, 836, 836, 563, 837, 839, 837, 838, 
	837, 838, 837, 838, 837, 563, 837, 837, 
	837, 838, 837, 838, 837, 838, 837, 563, 
	838, 839, 838, 838, 563, 833, 563, 570, 
	788, 788, 788, 788, 788, 788, 788, 788, 
	788, 788, 563, 547, 547, 547, 548, 547, 
	548, 547, 548, 547, 545, 546, 548, 548, 
	548, 548, 545, 841, 840, 843, 842, 846, 
	845, 845, 845, 844, 848, 847, 847, 847, 
	545, 849, 849, 0
};

static const short _vcf_v41_trans_targs[] = {
	0, 2, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 0, 15, 
	16, 17, 18, 19, 20, 21, 22, 0, 
	23, 0, 24, 369, 0, 25, 73, 103, 
	185, 233, 249, 302, 317, 350, 0, 25, 
	26, 27, 29, 34, 28, 27, 30, 31, 
	32, 30, 31, 32, 28, 33, 35, 41, 
	42, 36, 37, 38, 36, 37, 38, 31, 
	39, 40, 41, 42, 43, 44, 62, 44, 
	45, 46, 47, 46, 47, 48, 49, 50, 
	51, 52, 50, 51, 52, 45, 53, 54, 
	59, 55, 56, 55, 56, 57, 58, 61, 
	60, 58, 54, 59, 60, 54, 59, 63, 
	64, 63, 64, 65, 66, 71, 67, 68, 
	67, 68, 69, 70, 72, 70, 66, 71, 
	72, 0, 74, 75, 76, 77, 78, 79, 
	80, 0, 81, 102, 82, 81, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	93, 94, 95, 0, 96, 97, 99, 96, 
	97, 99, 98, 100, 101, 102, 0, 104, 
	136, 0, 105, 106, 107, 108, 109, 110, 
	111, 112, 113, 0, 114, 115, 114, 115, 
	116, 117, 118, 119, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 0, 130, 
	131, 133, 130, 131, 133, 132, 134, 135, 
	0, 137, 138, 139, 140, 141, 142, 143, 
	144, 145, 0, 146, 147, 146, 147, 148, 
	149, 150, 151, 152, 153, 154, 155, 0, 
	156, 184, 157, 158, 159, 160, 161, 162, 
	0, 163, 164, 163, 165, 166, 167, 168, 
	169, 170, 171, 172, 173, 174, 175, 176, 
	177, 0, 178, 179, 181, 178, 179, 181, 
	180, 182, 183, 184, 0, 186, 187, 188, 
	189, 190, 191, 192, 193, 0, 194, 195, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 0, 204, 232, 205, 206, 207, 
	208, 209, 210, 0, 211, 212, 211, 213, 
	214, 215, 216, 217, 218, 219, 220, 221, 
	222, 223, 224, 225, 0, 226, 227, 229, 
	226, 227, 229, 228, 230, 231, 232, 0, 
	234, 235, 236, 237, 238, 239, 240, 241, 
	242, 0, 243, 244, 243, 244, 245, 246, 
	247, 246, 247, 242, 248, 0, 250, 251, 
	252, 253, 254, 255, 256, 257, 258, 259, 
	0, 260, 261, 260, 261, 0, 262, 0, 
	263, 264, 265, 266, 267, 268, 269, 270, 
	271, 0, 271, 272, 0, 273, 274, 275, 
	276, 277, 278, 279, 280, 281, 0, 281, 
	282, 0, 283, 284, 285, 286, 287, 288, 
	289, 290, 291, 292, 293, 294, 295, 296, 
	297, 299, 296, 297, 299, 298, 300, 301, 
	0, 303, 304, 305, 306, 307, 308, 309, 
	310, 0, 311, 312, 313, 314, 315, 316, 
	0, 318, 319, 320, 321, 322, 323, 324, 
	325, 326, 327, 0, 328, 329, 331, 330, 
	336, 332, 333, 332, 333, 334, 335, 337, 
	335, 338, 339, 340, 338, 339, 340, 331, 
	336, 341, 342, 347, 343, 344, 343, 344, 
	345, 346, 349, 348, 346, 342, 347, 348, 
	342, 347, 0, 351, 352, 353, 354, 355, 
	356, 357, 358, 359, 360, 361, 0, 362, 
	363, 364, 365, 366, 367, 368, 0, 370, 
	371, 372, 373, 374, 375, 376, 377, 378, 
	379, 380, 381, 382, 383, 384, 385, 386, 
	387, 388, 389, 390, 391, 392, 393, 394, 
	395, 396, 397, 398, 399, 400, 401, 402, 
	403, 404, 405, 406, 658, 0, 407, 408, 
	409, 410, 411, 412, 413, 414, 413, 658, 
	414, 0, 416, 654, 655, 0, 417, 418, 
	418, 419, 0, 420, 421, 420, 419, 0, 
	422, 423, 422, 0, 424, 653, 602, 604, 
	629, 641, 425, 599, 0, 426, 596, 592, 
	593, 597, 427, 592, 593, 428, 429, 589, 
	0, 430, 588, 431, 430, 431, 432, 587, 
	0, 433, 586, 434, 449, 458, 485, 500, 
	507, 515, 521, 528, 547, 552, 575, 433, 
	434, 435, 659, 448, 453, 0, 436, 437, 
	436, 435, 0, 438, 445, 444, 446, 440, 
	441, 442, 443, 416, 438, 445, 0, 447, 
	450, 451, 452, 455, 0, 454, 0, 456, 
	0, 457, 459, 463, 467, 481, 460, 0, 
	461, 462, 464, 0, 465, 466, 468, 0, 
	469, 470, 475, 476, 479, 471, 472, 473, 
	474, 477, 478, 480, 482, 0, 483, 484, 
	486, 487, 0, 488, 489, 494, 495, 498, 
	490, 491, 492, 493, 496, 497, 499, 501, 
	502, 503, 504, 505, 0, 506, 508, 511, 
	0, 509, 0, 510, 512, 0, 513, 514, 
	516, 517, 518, 0, 519, 520, 522, 525, 
	0, 523, 0, 524, 0, 526, 0, 527, 
	529, 530, 534, 531, 0, 532, 533, 0, 
	535, 536, 541, 542, 545, 537, 538, 539, 
	540, 543, 544, 546, 548, 549, 0, 550, 
	551, 553, 567, 554, 0, 555, 556, 561, 
	562, 565, 557, 558, 559, 560, 563, 564, 
	566, 568, 569, 570, 571, 572, 0, 573, 
	0, 574, 576, 577, 578, 579, 580, 581, 
	582, 583, 0, 584, 0, 585, 590, 591, 
	594, 595, 598, 600, 601, 603, 602, 424, 
	604, 605, 617, 606, 612, 607, 608, 609, 
	610, 611, 613, 614, 615, 616, 618, 624, 
	619, 620, 621, 622, 623, 625, 626, 627, 
	628, 630, 636, 631, 632, 633, 634, 635, 
	600, 637, 638, 639, 640, 642, 648, 643, 
	644, 645, 646, 647, 649, 650, 651, 652, 
	656, 660, 657, 661, 0, 415, 439, 415, 
	439, 0
};

static const short _vcf_v41_trans_actions[] = {
	7, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 83, 1, 
	0, 0, 0, 0, 0, 3, 65, 360, 
	0, 151, 0, 0, 410, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 9, 3, 
	35, 41, 0, 0, 143, 3, 41, 44, 
	41, 3, 5, 3, 74, 50, 0, 1, 
	41, 41, 44, 41, 3, 5, 3, 0, 
	50, 3, 0, 3, 37, 41, 0, 3, 
	5, 1, 41, 0, 3, 37, 0, 41, 
	44, 41, 3, 5, 3, 0, 50, 3, 
	3, 41, 41, 3, 3, 71, 47, 5, 
	47, 3, 50, 50, 3, 41, 41, 41, 
	41, 3, 3, 50, 3, 3, 47, 47, 
	3, 3, 53, 47, 47, 3, 50, 50, 
	3, 86, 3, 0, 15, 0, 0, 0, 
	0, 187, 163, 68, 5, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 33, 243, 41, 44, 41, 3, 
	5, 3, 0, 50, 3, 0, 191, 3, 
	3, 95, 3, 3, 3, 0, 21, 0, 
	0, 0, 0, 223, 68, 163, 0, 3, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 33, 247, 41, 
	44, 41, 3, 5, 3, 0, 50, 3, 
	98, 3, 3, 3, 0, 23, 0, 0, 
	0, 0, 227, 68, 163, 0, 3, 5, 
	0, 0, 0, 0, 0, 0, 0, 195, 
	167, 167, 5, 0, 0, 0, 0, 0, 
	203, 171, 5, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	33, 251, 41, 44, 41, 3, 5, 3, 
	0, 50, 3, 3, 101, 3, 3, 0, 
	25, 0, 0, 0, 0, 231, 68, 163, 
	0, 3, 5, 0, 0, 0, 0, 0, 
	0, 0, 199, 167, 167, 5, 0, 0, 
	0, 0, 0, 207, 171, 5, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 33, 255, 41, 44, 41, 
	3, 5, 3, 0, 50, 3, 3, 104, 
	3, 3, 3, 3, 3, 3, 0, 27, 
	0, 235, 1, 41, 0, 3, 5, 1, 
	41, 0, 3, 5, 5, 110, 3, 3, 
	3, 3, 0, 31, 0, 0, 0, 0, 
	239, 68, 163, 0, 3, 375, 5, 211, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	175, 365, 3, 5, 215, 0, 0, 0, 
	0, 0, 0, 0, 0, 179, 370, 3, 
	5, 259, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 33, 41, 
	44, 41, 3, 5, 3, 0, 50, 3, 
	89, 3, 3, 3, 3, 3, 3, 0, 
	17, 263, 1, 0, 0, 0, 0, 3, 
	92, 3, 3, 3, 3, 0, 19, 0, 
	0, 0, 0, 219, 163, 3, 5, 3, 
	5, 1, 41, 0, 3, 5, 41, 0, 
	3, 41, 44, 41, 3, 5, 3, 0, 
	0, 50, 3, 3, 41, 41, 3, 3, 
	56, 47, 5, 47, 3, 50, 50, 3, 
	41, 41, 107, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 29, 0, 267, 1, 
	0, 0, 0, 0, 3, 50, 113, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 77, 13, 0, 0, 
	0, 0, 0, 0, 0, 41, 39, 183, 
	3, 116, 147, 3, 3, 119, 1, 41, 
	3, 147, 122, 41, 147, 3, 5, 125, 
	41, 147, 3, 128, 41, 41, 41, 41, 
	41, 41, 147, 5, 131, 41, 41, 41, 
	41, 41, 3, 3, 3, 3, 147, 3, 
	134, 1, 41, 41, 0, 3, 147, 5, 
	271, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 3, 
	3, 147, 355, 5, 3, 137, 41, 147, 
	3, 5, 351, 41, 41, 3, 3, 41, 
	3, 3, 5, 80, 3, 3, 140, 3, 
	3, 3, 3, 3, 275, 3, 405, 3, 
	347, 3, 3, 3, 3, 3, 3, 279, 
	3, 3, 3, 283, 3, 3, 3, 287, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 291, 3, 3, 
	3, 3, 295, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 299, 3, 3, 3, 
	380, 3, 303, 3, 3, 307, 3, 3, 
	3, 3, 3, 311, 3, 3, 3, 3, 
	385, 3, 315, 3, 390, 3, 319, 3, 
	3, 3, 3, 3, 327, 3, 3, 323, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 331, 3, 
	3, 3, 3, 3, 335, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 395, 3, 
	339, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 400, 3, 343, 3, 3, 3, 
	3, 3, 3, 41, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	0, 59, 0, 62, 159, 155, 11, 41, 
	0, 0
};

static const short _vcf_v41_eof_actions[] = {
	0, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 83, 83, 
	83, 83, 83, 83, 83, 83, 360, 151, 
	410, 9, 9, 9, 151, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 86, 86, 86, 86, 86, 86, 86, 
	187, 187, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 243, 
	243, 243, 86, 243, 243, 243, 187, 191, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 223, 223, 223, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 247, 247, 247, 95, 247, 247, 247, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 227, 227, 227, 98, 98, 98, 98, 
	98, 98, 98, 195, 195, 98, 98, 98, 
	98, 98, 203, 203, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 251, 251, 251, 98, 251, 251, 251, 
	195, 101, 101, 101, 101, 101, 101, 101, 
	101, 231, 231, 231, 101, 101, 101, 101, 
	101, 101, 101, 199, 199, 101, 101, 101, 
	101, 101, 207, 207, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 255, 255, 255, 101, 255, 255, 255, 
	199, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 235, 235, 235, 235, 235, 235, 
	104, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 239, 239, 375, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 365, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 370, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 110, 259, 259, 259, 89, 89, 
	89, 89, 89, 89, 89, 89, 263, 263, 
	263, 263, 263, 263, 263, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 219, 
	219, 219, 219, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 267, 267, 267, 267, 267, 267, 267, 
	267, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 116, 
	119, 119, 119, 122, 122, 125, 125, 128, 
	128, 131, 131, 131, 131, 134, 134, 134, 
	271, 271, 271, 137, 137, 351, 351, 116, 
	116, 116, 116, 116, 351, 351, 140, 140, 
	271, 271, 271, 271, 271, 275, 275, 405, 
	347, 347, 271, 271, 279, 279, 279, 271, 
	283, 283, 283, 271, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 271, 291, 291, 291, 271, 271, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 271, 271, 271, 271, 
	271, 299, 299, 271, 380, 303, 303, 271, 
	307, 307, 307, 271, 271, 271, 311, 311, 
	311, 271, 385, 315, 315, 390, 319, 319, 
	271, 271, 271, 327, 327, 327, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 271, 271, 331, 331, 331, 
	271, 271, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 271, 
	271, 271, 271, 271, 395, 339, 339, 271, 
	271, 271, 271, 271, 271, 271, 271, 400, 
	343, 343, 271, 134, 134, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 116, 116, 
	0, 0, 11, 0, 0, 0
};

static const int vcf_v41_start = 1;
static const int vcf_v41_first_final = 658;
static const int vcf_v41_error = 0;

static const int vcf_v41_en_main = 1;
static const int vcf_v41_en_main_meta_section = 28;
static const int vcf_v41_en_main_body_section = 659;
static const int vcf_v41_en_meta_section_skip = 656;
static const int vcf_v41_en_body_section_skip = 657;


#line 756 "src/vcf/vcf_v41.ragel"

}

namespace ebi
{
  namespace vcf
  {
    template <typename Configuration>
    ParserImpl_v41<Configuration>::ParserImpl_v41(std::shared_ptr<Source> const & source,
                                          std::shared_ptr<std::vector<Record>> const & records
    )
    : ParsingState{source, records}
    {
      
#line 1485 "inc/vcf/validator_detail_v41.hpp"
	{
	cs = vcf_v41_start;
	}

#line 771 "src/vcf/vcf_v41.ragel"

    }

    template <typename Configuration>
    void ParserImpl_v41<Configuration>::parse(std::vector<char> const & text)
    {
      char const * p = &text[0];
      char const * pe = &text[0] + text.size();
      char const * eof = nullptr;

      clear_records();
      parse_buffer(p, pe, eof);
    }

    template <typename Configuration>
    void ParserImpl_v41<Configuration>::parse(std::string const & text)
    {
      char const * p = text.data();
      char const * pe = text.data() + text.size();
      char const * eof = nullptr;

      clear_records();
      parse_buffer(p, pe, eof);
    }

    template <typename Configuration>
    void ParserImpl_v41<Configuration>::end()
    {
      char const * empty = "";
      clear_records();
      parse_buffer(empty, empty, empty);
    }

    template <typename Configuration>
    bool ParserImpl<Configuration>::is_valid() const
    {
      return m_is_valid;
    }

    template <typename Configuration>
    void ParserImpl_v41<Configuration>::parse_buffer(char const * p, char const * pe, char const * eof)
    {
      
#line 1534 "inc/vcf/validator_detail_v41.hpp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _vcf_v41_trans_keys + _vcf_v41_key_offsets[cs];
	_trans = _vcf_v41_index_offsets[cs];

	_klen = _vcf_v41_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _vcf_v41_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _vcf_v41_indicies[_trans];
	cs = _vcf_v41_trans_targs[_trans];

	if ( _vcf_v41_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _vcf_v41_actions + _vcf_v41_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 31 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_token_begin(*this);
    }
	break;
	case 1:
#line 35 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_token_char(*this, *p);
    }
	break;
	case 2:
#line 39 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_token_end(*this);
    }
	break;
	case 3:
#line 43 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_newline(*this);
        ++n_lines;
        n_columns = 1;

        if (n_lines % 10000 == 0) {
            std::cout << "Lines read: " << n_lines << std::endl;
        }
    }
	break;
	case 4:
#line 53 "src/vcf/vcf_v41.ragel"
	{
        ++n_columns;
    }
	break;
	case 5:
#line 60 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_fileformat_section_error(*this);
        p--; {cs = 656; goto _again;}
    }
	break;
	case 6:
#line 65 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this);
        p--; {cs = 656; goto _again;}
    }
	break;
	case 7:
#line 70 "src/vcf/vcf_v41.ragel"
	{
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
    }
	break;
	case 8:
#line 78 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_header_section_error(*this);
        
        // If an error occurs in the header, meta_section_end won't be triggered and the meta and header optional validations must be run here
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
        
        p--; {cs = 657; goto _again;}
    }
	break;
	case 9:
#line 91 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this);
        p--; {cs = 657; goto _again;}
    }
	break;
	case 10:
#line 99 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_fileformat(*this);
    }
	break;
	case 11:
#line 103 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "ALT");
    }
	break;
	case 12:
#line 107 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "assembly");
    }
	break;
	case 13:
#line 111 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "contig");
    }
	break;
	case 14:
#line 115 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "FILTER");
    }
	break;
	case 15:
#line 119 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "FORMAT");
    }
	break;
	case 16:
#line 123 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "INFO");
    }
	break;
	case 17:
#line 127 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "PEDIGREE");
    }
	break;
	case 18:
#line 131 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "pedigreeDB");
    }
	break;
	case 19:
#line 135 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this, "SAMPLE");
    }
	break;
	case 20:
#line 139 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_token_end(*this, "ID");
    }
	break;
	case 21:
#line 143 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Number");
    }
	break;
	case 22:
#line 147 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Type");
    }
	break;
	case 23:
#line 151 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Description");
    }
	break;
	case 24:
#line 155 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Genomes");
    }
	break;
	case 25:
#line 159 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_token_end(*this, "Mixture");
    }
	break;
	case 26:
#line 163 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_meta_typeid(*this);
    }
	break;
	case 27:
#line 167 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_token_end(*this);
    }
	break;
	case 28:
#line 171 "src/vcf/vcf_v41.ragel"
	{
        try {
          ParsePolicy::handle_meta_line(*this);
        } catch (ParsingError ex) {
          ErrorPolicy::handle_meta_section_error(*this, ex.what());
        }
    }
	break;
	case 29:
#line 179 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_sample_name(*this);
    }
	break;
	case 30:
#line 183 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_header_line(*this);
    }
	break;
	case 31:
#line 189 "src/vcf/vcf_v41.ragel"
	{
        ParsePolicy::handle_column_end(*this, n_columns);
    }
	break;
	case 32:
#line 193 "src/vcf/vcf_v41.ragel"
	{
        try {
          // Handle all columns and build record
          ParsePolicy::handle_body_line(*this);
          // Check warnings (non-blocking errors but potential mistakes anyway, only makes sense if the last record parsed was correct)
          OptionalPolicy::optional_check_body_entry(*this, ParsingState::records->back());
        } catch (ParsingError ex) {
          ErrorPolicy::handle_body_section_error(*this, ex.what());
        } catch (ParsingWarning ex) {
          ErrorPolicy::handle_body_section_warning(*this, ex.what());
        }
    }
	break;
	case 33:
#line 210 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_fileformat_section_error(*this,
            "The fileformat declaration is not 'fileformat=VCFv4.1'");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 34:
#line 217 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in ALT metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 35:
#line 222 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "ALT metadata ID is not prefixed by DEL/INS/DUP/INV/CNV and suffixed by ':' and a text sequence");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 36:
#line 228 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in assembly metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 37:
#line 234 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in contig metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 38:
#line 240 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in FILTER metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 39:
#line 246 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in FORMAT metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 40:
#line 251 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "FORMAT metadata Number is not a number, A, R, G or dot");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 41:
#line 262 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in INFO metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 42:
#line 267 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "INFO metadata Number is not a number, A, R, G or dot");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 43:
#line 272 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "INFO metadata Type is not a Integer, Float, Flag, Character or String");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 44:
#line 278 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in PEDIGREE metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 45:
#line 284 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in pedigreeDB metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 46:
#line 290 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in SAMPLE metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 47:
#line 295 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "SAMPLE metadata Genomes is not a valid string (maybe it contains quotes?)");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 48:
#line 300 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "SAMPLE metadata Mixture is not a valid string (maybe it contains quotes?)");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 49:
#line 306 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata ID contains a character different from alphanumeric, dot, underscore and dash");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 50:
#line 311 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata description string is not valid");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 51:
#line 316 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata URL is not valid");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 52:
#line 322 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_header_section_error(*this, "The header line does not start with the mandatory columns: CHROM, POS, ID, REF, ALT, QUAL, FILTER and INFO");
        
        // If an error occurs in the header, meta_section_end won't be triggered and the meta and header optional validations must be run here
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
        
        p--; {cs = 657; goto _again;}
    }
	break;
	case 53:
#line 338 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Chromosome is not a string without colons or whitespaces, optionally wrapped with angle brackets (<>)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 54:
#line 344 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Position is not a positive number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 55:
#line 350 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "ID is not a single dot or a list of strings without semicolons or whitespaces");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 56:
#line 356 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Reference is not a string of bases");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 57:
#line 362 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Alternate is not a single dot or a comma-separated list of bases");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 58:
#line 368 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Quality is not a single dot or a positive number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 59:
#line 374 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Filter is not a single dot or a semicolon-separated list of strings");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 60:
#line 380 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info is not a single dot or a semicolon-separated list of key-value pairs");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 61:
#line 385 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info key is not a sequence of alphanumeric and/or punctuation characters");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 62:
#line 390 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info field value is not a comma-separated list of valid strings (maybe it contains whitespaces?)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 63:
#line 395 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AA value is not a single dot or a string of bases");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 64:
#line 400 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AC value is not a comma-separated list of numbers");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 65:
#line 405 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AF value is not a comma-separated list of numbers");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 66:
#line 410 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AN value is not an integer number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 67:
#line 415 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info BQ value is not a number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 68:
#line 420 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info CIGAR value is not an alphanumeric string");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 69:
#line 425 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info DB is not a flag (with 1/0/no value)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 70:
#line 430 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info DP value is not an integer number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 71:
#line 435 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info END value is not an integer number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 72:
#line 440 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info H2 is not a flag (with 1/0/no value)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 73:
#line 445 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info H3 is not a flag (with 1/0/no value)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 74:
#line 450 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info MQ value is not a number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 75:
#line 455 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info MQ0 value is not an integer number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 76:
#line 460 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info NS value is not an integer number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 77:
#line 465 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info SB value is not a number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 78:
#line 470 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info SOMATIC is not a flag (with 1/0/no value)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 79:
#line 475 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info VALIDATED is not a flag (with 1/0/no value)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 80:
#line 480 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info 1000G is not a flag (with 1/0/no value)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 81:
#line 486 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Format is not a colon-separated list of alphanumeric strings");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 82:
#line 492 "src/vcf/vcf_v41.ragel"
	{
        std::ostringstream message_stream;
        message_stream << "Sample #" << (n_columns - 9) << " is not a valid string";
        ErrorPolicy::handle_body_section_error(*this, message_stream.str());
        p--; {cs = 657; goto _again;}
    }
	break;
	case 83:
#line 499 "src/vcf/vcf_v41.ragel"
	{
        std::ostringstream message_stream;
        message_stream << "Sample #" << (n_columns - 9) << " does not start with a valid genotype";
        ErrorPolicy::handle_body_section_error(*this, message_stream.str());
        p--; {cs = 657; goto _again;}
    }
	break;
	case 84:
#line 748 "src/vcf/vcf_v41.ragel"
	{ {cs = 28; goto _again;} }
	break;
	case 85:
#line 749 "src/vcf/vcf_v41.ragel"
	{ {cs = 659; goto _again;} }
	break;
#line 2219 "inc/vcf/validator_detail_v41.hpp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _vcf_v41_actions + _vcf_v41_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 5:
#line 60 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_fileformat_section_error(*this);
        p--; {cs = 656; goto _again;}
    }
	break;
	case 6:
#line 65 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this);
        p--; {cs = 656; goto _again;}
    }
	break;
	case 7:
#line 70 "src/vcf/vcf_v41.ragel"
	{
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
    }
	break;
	case 8:
#line 78 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_header_section_error(*this);
        
        // If an error occurs in the header, meta_section_end won't be triggered and the meta and header optional validations must be run here
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
        
        p--; {cs = 657; goto _again;}
    }
	break;
	case 9:
#line 91 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this);
        p--; {cs = 657; goto _again;}
    }
	break;
	case 33:
#line 210 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_fileformat_section_error(*this,
            "The fileformat declaration is not 'fileformat=VCFv4.1'");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 34:
#line 217 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in ALT metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 35:
#line 222 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "ALT metadata ID is not prefixed by DEL/INS/DUP/INV/CNV and suffixed by ':' and a text sequence");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 36:
#line 228 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in assembly metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 37:
#line 234 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in contig metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 38:
#line 240 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in FILTER metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 39:
#line 246 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in FORMAT metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 40:
#line 251 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "FORMAT metadata Number is not a number, A, R, G or dot");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 41:
#line 262 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in INFO metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 42:
#line 267 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "INFO metadata Number is not a number, A, R, G or dot");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 43:
#line 272 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "INFO metadata Type is not a Integer, Float, Flag, Character or String");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 44:
#line 278 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in PEDIGREE metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 45:
#line 284 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in pedigreeDB metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 46:
#line 290 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Error in SAMPLE metadata");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 47:
#line 295 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "SAMPLE metadata Genomes is not a valid string (maybe it contains quotes?)");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 48:
#line 300 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "SAMPLE metadata Mixture is not a valid string (maybe it contains quotes?)");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 49:
#line 306 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata ID contains a character different from alphanumeric, dot, underscore and dash");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 50:
#line 311 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata description string is not valid");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 51:
#line 316 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_meta_section_error(*this, "Metadata URL is not valid");
        p--; {cs = 656; goto _again;}
    }
	break;
	case 52:
#line 322 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_header_section_error(*this, "The header line does not start with the mandatory columns: CHROM, POS, ID, REF, ALT, QUAL, FILTER and INFO");
        
        // If an error occurs in the header, meta_section_end won't be triggered and the meta and header optional validations must be run here
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (ParsingWarning warn) {
          ErrorPolicy::handle_meta_section_warning(*this, warn.what());
        }
        
        p--; {cs = 657; goto _again;}
    }
	break;
	case 53:
#line 338 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Chromosome is not a string without colons or whitespaces, optionally wrapped with angle brackets (<>)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 54:
#line 344 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Position is not a positive number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 55:
#line 350 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "ID is not a single dot or a list of strings without semicolons or whitespaces");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 56:
#line 356 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Reference is not a string of bases");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 57:
#line 362 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Alternate is not a single dot or a comma-separated list of bases");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 58:
#line 368 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Quality is not a single dot or a positive number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 59:
#line 374 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Filter is not a single dot or a semicolon-separated list of strings");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 60:
#line 380 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info is not a single dot or a semicolon-separated list of key-value pairs");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 61:
#line 385 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info key is not a sequence of alphanumeric and/or punctuation characters");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 62:
#line 390 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info field value is not a comma-separated list of valid strings (maybe it contains whitespaces?)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 63:
#line 395 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AA value is not a single dot or a string of bases");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 64:
#line 400 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AC value is not a comma-separated list of numbers");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 65:
#line 405 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AF value is not a comma-separated list of numbers");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 66:
#line 410 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info AN value is not an integer number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 67:
#line 415 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info BQ value is not a number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 68:
#line 420 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info CIGAR value is not an alphanumeric string");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 69:
#line 425 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info DB is not a flag (with 1/0/no value)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 70:
#line 430 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info DP value is not an integer number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 71:
#line 435 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info END value is not an integer number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 72:
#line 440 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info H2 is not a flag (with 1/0/no value)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 73:
#line 445 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info H3 is not a flag (with 1/0/no value)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 74:
#line 450 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info MQ value is not a number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 75:
#line 455 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info MQ0 value is not an integer number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 76:
#line 460 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info NS value is not an integer number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 77:
#line 465 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info SB value is not a number");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 78:
#line 470 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info SOMATIC is not a flag (with 1/0/no value)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 79:
#line 475 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info VALIDATED is not a flag (with 1/0/no value)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 80:
#line 480 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Info 1000G is not a flag (with 1/0/no value)");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 81:
#line 486 "src/vcf/vcf_v41.ragel"
	{
        ErrorPolicy::handle_body_section_error(*this, "Format is not a colon-separated list of alphanumeric strings");
        p--; {cs = 657; goto _again;}
    }
	break;
	case 82:
#line 492 "src/vcf/vcf_v41.ragel"
	{
        std::ostringstream message_stream;
        message_stream << "Sample #" << (n_columns - 9) << " is not a valid string";
        ErrorPolicy::handle_body_section_error(*this, message_stream.str());
        p--; {cs = 657; goto _again;}
    }
	break;
	case 83:
#line 499 "src/vcf/vcf_v41.ragel"
	{
        std::ostringstream message_stream;
        message_stream << "Sample #" << (n_columns - 9) << " does not start with a valid genotype";
        ErrorPolicy::handle_body_section_error(*this, message_stream.str());
        p--; {cs = 657; goto _again;}
    }
	break;
#line 2651 "inc/vcf/validator_detail_v41.hpp"
		}
	}
	}

	_out: {}
	}

#line 815 "src/vcf/vcf_v41.ragel"

    }
    
  }
}
